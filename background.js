// Entry Block Helper - Background Service Worker (ÏßÑÏßú RAG ÏãúÏä§ÌÖú Ï†ÅÏö©)

// ===== RAG ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï =====
let USE_RAG = true; // Ïù¥Í≤ÉÏùÑ true/falseÎ°ú Î∞îÍøîÍ∞ÄÎ©∞ ÌÖåÏä§Ìä∏

// ===== Entry Î∏îÎ°ù Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è Ï∫êÏã± =====
let entryBlockData = null;
let dataLoadPromise = null;
let questionClassifier = null;

// ===== API ÌÇ§ ÏÑ§Ï†ï (ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ïÌï† Ïàò ÏûàÎèÑÎ°ù ÎπÑÏõåÎë†) =====
const OPENAI_API_KEY = ""; // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÑ§Ï†ïÌïòÎèÑÎ°ù ÎπÑÏõåÎë†

// ===== ÏßàÎ¨∏ Î∂ÑÎ•òÍ∏∞ ÌÅ¥ÎûòÏä§ Ï†ïÏùò (ÌååÏùº ÎÇ¥Î∂ÄÏóê Ìè¨Ìï®) =====
class EntryQuestionClassifier {
  constructor() {
    this.classificationRules = {
      simple: {
        keywords: ["Ïñ¥ÎñªÍ≤å", "Ïñ¥Îñ§", "Î¨¥Ïóá", "Î≠ê", "Î≠ò", "Ïñ∏Ï†ú", "Î∏îÎ°ù", "ÏÇ¨Ïö©Î≤ï", "ÏÇ¨Ïö©", "Ïì∞Îäî", "Ï∞æ", "Ïñ¥Îîî"],
        patterns: [/.*Î∏îÎ°ù.*Ïñ¥Îîî.*Ïûà/, /.*Ïñ¥ÎñªÍ≤å.*ÏÇ¨Ïö©/, /.*Î¨¥Ïä®.*Í∏∞Îä•/, /.*Î≠ê.*ÌïòÎäî/],
        examples: ["Î∞òÎ≥µ Î∏îÎ°ùÏùÄ Ïñ¥ÎîîÏóê ÏûàÏñ¥?", "Î≥ÄÏàòÎäî Ïñ¥ÎñªÍ≤å ÎßåÎì§Ïñ¥?", "ÏÜåÎ¶¨ Î∏îÎ°ù ÏÇ¨Ïö©Î≤ï ÏïåÎ†§Ï§ò"],
        maxComplexity: 30,
        priority: 1,
      },
      complex: {
        keywords: [
          "ÎßåÎì§",
          "Ï†úÏûë",
          "Í∞úÎ∞ú",
          "Íµ¨ÌòÑ",
          "ÌîÑÎ°úÍ∑∏Îû®",
          "Í≤åÏûÑ",
          "RPG",
          "ÏäàÌåÖ",
          "ÌçºÏ¶ê",
          "ÏãúÎÆ¨Î†àÏù¥ÏÖò",
          "Í≥ÑÏÇ∞Í∏∞",
          "ÏãúÍ≥Ñ",
          "Í∑∏Î¶ºÌåê",
          "Ï±óÎ¥á",
          "Ïï†ÎãàÎ©îÏù¥ÏÖò",
        ],
        patterns: [/.*Í≤åÏûÑ.*ÎßåÎì§/, /.*Íµ¨ÌòÑ.*ÌïòÍ≥†.*Ïã∂/, /.*ÌîÑÎ°úÏ†ùÌä∏.*Ïñ¥ÎñªÍ≤å/, /.*ÎßåÎì§.*Ïàò.*Ïûà/, /Ï†êÏàò.*ÏãúÏä§ÌÖú/, /.*Îî∞Îùº.*ÌïòÎäî/],
        examples: ["Í∞ÑÎã®Ìïú ÏäàÌåÖ Í≤åÏûÑ ÎßåÎì§Í≥† Ïã∂Ïñ¥", "Ï†êÏàò ÏãúÏä§ÌÖúÏùÄ Ïñ¥ÎñªÍ≤å Íµ¨ÌòÑÌï¥?", "Í≥µÌäïÍ∏∞Í∏∞ Í≤åÏûÑ ÎßåÎì§Ïñ¥Ï§ò"],
        minComplexity: 20,
        priority: 3,
      },
      debug: {
        keywords: [
          "ÏïàÎèº",
          "ÏïàÎêò",
          "ÏïàÎê®",
          "Ïò§Î•ò",
          "ÏóêÎü¨",
          "Î≤ÑÍ∑∏",
          "Ïù¥ÏÉÅ",
          "Ïôú",
          "Î¨∏Ï†ú",
          "ÎßâÌòÄ",
          "Î©àÏ∂∞",
          "ÏûëÎèô",
          "Í≥†Ï≥ê",
          "Ìï¥Í≤∞",
          "ÏàòÏ†ï",
          "Î∞îÍøî",
          "ÌãÄÎ†∏",
        ],
        patterns: [/.*Ïïà\s*Îèº/, /.*Ïïà\s*Îêò/, /.*Ïôú.*Ïïà/, /.*Ïù¥ÏÉÅÌï¥/, /.*Ïã§Ìñâ.*Ïïà/, /.*ÏõÄÏßÅ.*Ïïä/],
        emotionalCues: ["„Ö†", "„Öú", "...", "??", "!", ";;;"],
        examples: ["ÏΩîÎìú Ïã§ÌñâÏù¥ ÏïàÎèºÏöî", "Ï∫êÎ¶≠ÌÑ∞Í∞Ä Ïïà ÏõÄÏßÅÏó¨„Ö†„Ö†", "Ïôú Î∞òÎ≥µÏù¥ Î©àÏ∂îÏßÄ ÏïäÏïÑ?"],
        priority: 5,
      },
      conceptual: {
        keywords: [
          "Î≥ÄÏàò",
          "Ìï®Ïàò",
          "Ï°∞Í±¥Î¨∏",
          "Î∞òÎ≥µÎ¨∏",
          "Î¶¨Ïä§Ìä∏",
          "Î∞∞Ïó¥",
          "Í∞úÎÖê",
          "ÏõêÎ¶¨",
          "Ïù¥Î°†",
          "Ï†ïÏùò",
          "Ï∞®Ïù¥",
          "ÎπÑÍµê",
          "Î∞∞Ïö∞",
          "Í≥µÎ∂Ä",
          "Ïù¥Ìï¥",
          "ÏÑ§Î™Ö",
        ],
        patterns: [/.*Ï∞®Ïù¥.*Î≠ê/, /.*Í∞úÎÖê.*ÏÑ§Î™Ö/, /.*Ïù¥ÎûÄ.*Î¨¥Ïóá/],
        examples: ["Î≥ÄÏàòÏôÄ Î¶¨Ïä§Ìä∏Ïùò Ï∞®Ïù¥Í∞Ä Î≠êÏïº?", "Ï°∞Í±¥Î¨∏ Í∞úÎÖê ÏÑ§Î™ÖÌï¥Ï§ò", "Ìï®ÏàòÎäî Ïôú ÏÇ¨Ïö©Ìï¥?"],
        priority: 2,
      },
    };
    this.CONFIDENCE_THRESHOLD = 0.65;
  }

  async classify(message, context = {}) {
    console.log("üîç ÏßàÎ¨∏ Î∂ÑÎ•ò ÏãúÏûë:", message);

    const processed = this.preprocessMessage(message);
    const ruleBasedResult = this.ruleBasedClassify(processed);

    if (ruleBasedResult.confidence >= this.CONFIDENCE_THRESHOLD) {
      console.log(`‚úÖ Í∑úÏπô Í∏∞Î∞ò Î∂ÑÎ•ò ÏôÑÎ£å: ${ruleBasedResult.type} (Ïã†Î¢∞ÎèÑ: ${ruleBasedResult.confidence})`);
      return ruleBasedResult;
    }

    console.log("ü§ñ Ïã†Î¢∞ÎèÑ Î∂ÄÏ°±, AI Î∂ÑÎ•ò ÏãúÎèÑ...");
    return await this.aiClassify(message, ruleBasedResult);
  }

  preprocessMessage(message) {
    return {
      original: message,
      normalized: message.toLowerCase().replace(/\s+/g, " ").trim(),
      length: message.length,
      wordCount: message.split(/\s+/).length,
      hasEmoticon: /[„Ö†„Öú„Öã„Öé]|[.]{2,}|[!?]{2,}/.test(message),
      hasCode: /when_|if_|repeat_|move_/.test(message),
    };
  }

  ruleBasedClassify(processed) {
    const scores = {};

    for (const [type, rules] of Object.entries(this.classificationRules)) {
      scores[type] = this.calculateTypeScore(processed, rules);
    }

    const totalScore = Object.values(scores).reduce((a, b) => a + b, 0);
    const normalizedScores = {};
    let maxType = null;
    let maxScore = 0;

    for (const [type, score] of Object.entries(scores)) {
      normalizedScores[type] = totalScore > 0 ? score / totalScore : 0;
      if (score > maxScore) {
        maxScore = score;
        maxType = type;
      }
    }

    return {
      type: maxType,
      confidence: normalizedScores[maxType] || 0,
      scores: normalizedScores,
      method: "rule-based",
    };
  }

  calculateTypeScore(processed, rules) {
    let score = 0;
    const text = processed.normalized;

    for (const keyword of rules.keywords || []) {
      if (text.includes(keyword)) {
        score += 2 * (rules.priority || 1);
      }
    }

    for (const pattern of rules.patterns || []) {
      if (pattern.test(text)) {
        score += 3 * (rules.priority || 1);
      }
    }

    if (rules.maxComplexity && processed.length <= rules.maxComplexity) {
      score += 1;
    }
    if (rules.minComplexity && processed.length >= rules.minComplexity) {
      score += 1;
    }

    if (rules.emotionalCues && processed.hasEmoticon) {
      for (const cue of rules.emotionalCues) {
        if (text.includes(cue)) {
          score += 2;
        }
      }
    }

    return score;
  }

  async aiClassify(message, ruleResult) {
    try {
      const settings = await chrome.storage.sync.get(["openai_api_key"]);
      if (!settings.openai_api_key) {
        console.warn("‚ö†Ô∏è API ÌÇ§ ÏóÜÏùå, Í∑úÏπô Í∏∞Î∞ò Í≤∞Í≥º ÏÇ¨Ïö©");
        return { ...ruleResult, method: "rule-based-fallback" };
      }

      const systemPrompt = `ÎãπÏã†ÏùÄ ÏóîÌä∏Î¶¨(Entry) Î∏îÎ°ùÏΩîÎî© ÏßàÎ¨∏ Î∂ÑÎ•ò Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.
      
ÏßàÎ¨∏ÏùÑ Îã§Ïùå 4Í∞ÄÏßÄ Ï§ë ÌïòÎÇòÎ°ú Ï†ïÌôïÌûà Î∂ÑÎ•òÌïòÏÑ∏Ïöî:
- simple: Îã®ÏàúÌïú Î∏îÎ°ù ÏÇ¨Ïö©Î≤ïÏù¥ÎÇò ÏúÑÏπòÎ•º Î¨ªÎäî ÏßàÎ¨∏
- complex: Í≤åÏûÑÏù¥ÎÇò ÌîÑÎ°úÏ†ùÌä∏Î•º ÎßåÎìúÎäî Î∞©Î≤ïÏùÑ Î¨ªÎäî ÏßàÎ¨∏  
- debug: Ïò§Î•òÎÇò Î¨∏Ï†ú Ìï¥Í≤∞ÏùÑ ÏöîÏ≤≠ÌïòÎäî ÏßàÎ¨∏
- conceptual: ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Í∞úÎÖêÏù¥ÎÇò ÏõêÎ¶¨Î•º Î¨ªÎäî ÏßàÎ¨∏

Ïò§ÏßÅ ÌÉÄÏûÖÎ™ÖÎßå ÎãµÌïòÏÑ∏Ïöî.`;

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${settings.openai_api_key}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: `ÏßàÎ¨∏: "${message}"` },
          ],
          max_tokens: 10,
          temperature: 0.3,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const aiType = data.choices[0].message.content.trim().toLowerCase();

        console.log(`ü§ñ AI Î∂ÑÎ•ò Í≤∞Í≥º: ${aiType}`);

        return {
          type: aiType,
          confidence: 0.9,
          method: "ai-classified",
          ruleBasedGuess: ruleResult.type,
        };
      }
    } catch (error) {
      console.error("AI Î∂ÑÎ•ò Ïã§Ìå®:", error);
    }

    return { ...ruleResult, method: "fallback" };
  }
}

chrome.runtime.onInstalled.addListener(() => {
  questionClassifier = new EntryQuestionClassifier();
  console.log("üìä ÏßàÎ¨∏ Î∂ÑÎ•òÍ∏∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
  console.log("Entry Block Helper ÏÑ§Ïπò ÏôÑÎ£å - RAG ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ï§ë...");
  chrome.storage.sync.set({
    enabled: true,
    autoAnalysis: true,
    sidebarMode: "auto",
    openai_api_key: "",
    useDevKey: false,
    rag_enabled: true,
  });

  USE_RAG = true;
  loadEntryBlockData();
});

// ===== Î∏îÎ°ù Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò =====
async function loadEntryBlockData() {
  if (entryBlockData) return entryBlockData;
  if (dataLoadPromise) return dataLoadPromise;

  dataLoadPromise = (async () => {
    try {
      const blockCategories = [
        "start",
        "moving",
        "looks",
        "sound",
        "judgement",
        "repeat",
        "variable",
        "func",
        "calc",
        "brush",
        "flow",
      ];
      const allBlocks = [];

      for (const category of blockCategories) {
        try {
          const knownFiles = getKnownBlockFiles(category);

          for (const fileName of knownFiles) {
            try {
              const response = await fetch(chrome.runtime.getURL(`data/blocks/${category}/${fileName}`));
              if (response.ok) {
                const blockData = await response.json();

                // Î∏îÎ°ù Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú Ï∂îÍ∞Ä
                const imagePath = `data/block-images/${category}/${fileName.replace(".json", ".png")}`;
                const imageUrl = chrome.runtime.getURL(imagePath);

                // Ïù¥ÎØ∏ÏßÄ Ï°¥Ïû¨ ÌôïÏù∏
                let hasImage = false;
                try {
                  const imgResponse = await fetch(imageUrl, { method: "HEAD" });
                  hasImage = imgResponse.ok;
                } catch {
                  hasImage = false;
                }

                allBlocks.push({
                  category,
                  fileName: fileName.replace(".json", ""),
                  imageUrl: hasImage ? imageUrl : null,
                  hasImage,
                  ...blockData,
                });
              }
            } catch (fileError) {
              console.log(`ÌååÏùº Í±¥ÎÑàÎúÄ: ${category}/${fileName}`);
            }
          }
        } catch (categoryError) {
          console.log(`Ïπ¥ÌÖåÍ≥†Î¶¨ Í±¥ÎÑàÎúÄ: ${category}`);
        }
      }

      entryBlockData = allBlocks;
      console.log(`üìö Entry Î∏îÎ°ù Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: ${allBlocks.length}Í∞ú Î∏îÎ°ù`);
      return allBlocks;
    } catch (error) {
      console.error("Entry Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", error);
      entryBlockData = [];
      return [];
    }
  })();

  return dataLoadPromise;
}

// ===== ÌååÏùºÎ™ÖÏùÑ ÌïúÍµ≠Ïñ¥Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò =====
function convertFileNameToKorean(fileName) {
  const nameMap = {
    // ÏãúÏûë Î∏îÎ°ù
    when_object_click: "Ïò§Î∏åÏ†ùÌä∏Î•º ÌÅ¥Î¶≠ÌñàÏùÑ Îïå",
    when_message_cast: "Î©îÏãúÏßÄÎ•º Î∞õÏïòÏùÑ Îïå",
    when_scene_start: "Ïû•Î©¥Ïù¥ ÏãúÏûëÎêòÏóàÏùÑ Îïå",
    when_some_key_pressed: "ÌÇ§Î•º ÎàåÎ†ÄÏùÑ Îïå",
    when_run_button_click: "ÏãúÏûëÌïòÍ∏∞ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå",
    mouse_clicked: "ÎßàÏö∞Ïä§Î•º ÌÅ¥Î¶≠ÌñàÏùÑ Îïå",
    start_neighbor_scene: "Îã§Ïùå Ïû•Î©¥ÏúºÎ°ú Î∞îÍæ∏Í∏∞",
    message_cast: "Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞",
    message_cast_with: "Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞(Í∞í Ìè¨Ìï®)",

    // ÏõÄÏßÅÏûÑ Î∏îÎ°ù
    move_steps: "~ÎßåÌÅº ÏõÄÏßÅÏù¥Í∏∞",
    rotate_relative: "~ÎèÑ ÌöåÏ†ÑÌïòÍ∏∞",
    move_to_position: "~Ï¢åÌëúÎ°ú Ïù¥ÎèôÌïòÍ∏∞",

    // Î™®Ïñë Î∏îÎ°ù
    show: "Î≥¥Ïù¥Í∏∞",
    hide: "Ïà®Í∏∞Í∏∞",
    change_size: "ÌÅ¨Í∏∞ ~ÎßåÌÅº Î∞îÍæ∏Í∏∞",
    set_size: "ÌÅ¨Í∏∞Î•º ~%Î°ú Ï†ïÌïòÍ∏∞",

    // ÏÜåÎ¶¨ Î∏îÎ°ù
    play_sound: "ÏÜåÎ¶¨ Ïû¨ÏÉùÌïòÍ∏∞",
    stop_sound: "ÏÜåÎ¶¨ Ï†ïÏßÄÌïòÍ∏∞",

    // ÌåêÎã® Î∏îÎ°ù
    if: "ÎßåÏïΩ ~ÎùºÎ©¥",
    if_else: "ÎßåÏïΩ ~ÎùºÎ©¥, ÏïÑÎãàÎ©¥",

    // Î∞òÎ≥µ Î∏îÎ°ù
    repeat_basic: "~Î≤à Î∞òÎ≥µÌïòÍ∏∞",
    repeat_inf: "Í≥ÑÏÜç Î∞òÎ≥µÌïòÍ∏∞",

    // Î≥ÄÏàò Î∏îÎ°ù
    set_variable: "Î≥ÄÏàò ~ÏùÑ ~Î°ú Ï†ïÌïòÍ∏∞",
    change_variable: "Î≥ÄÏàò ~ÏùÑ ~ÎßåÌÅº Î∞îÍæ∏Í∏∞",

    // Ìï®Ïàò Î∏îÎ°ù
    function_create: "Ìï®Ïàò ÎßåÎì§Í∏∞",
    function_call: "Ìï®Ïàò Ïã§ÌñâÌïòÍ∏∞",

    // Í≥ÑÏÇ∞ Î∏îÎ°ù
    calc_basic: "ÏÇ¨ÏπôÏó∞ÏÇ∞",
    number: "Ïà´Ïûê",

    // Î∂ì Î∏îÎ°ù
    brush_stamp: "ÎèÑÏû• Ï∞çÍ∏∞",

    // ÌùêÎ¶Ñ Î∏îÎ°ù
    wait_second: "~Ï¥à Í∏∞Îã§Î¶¨Í∏∞",
    stop_run: "Ï†ïÏßÄÌïòÍ∏∞",
  };

  return nameMap[fileName] || fileName;
}

// ===== Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÌïúÍµ≠Ïñ¥Î°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò =====
function getCategoryKorean(category) {
  const categoryMap = {
    start: "ÏãúÏûë",
    moving: "ÏõÄÏßÅÏûÑ",
    looks: "Î™®Ïñë",
    sound: "ÏÜåÎ¶¨",
    judgement: "ÌåêÎã®",
    repeat: "Î∞òÎ≥µ",
    variable: "Î≥ÄÏàò",
    func: "Ìï®Ïàò",
    calc: "Í≥ÑÏÇ∞",
    brush: "Î∂ì",
    flow: "ÌùêÎ¶Ñ",
  };

  return categoryMap[category] || category;
}

function getKnownBlockFiles(category) {
  const fileMap = {
    brush: [
      "brush_erase_all.json",
      "brush_stamp.json",
      "change_brush_transparency.json",
      "change_thickness.json",
      "set_brush_transparency.json",
      "set_color.json",
      "set_fill_color.json",
      "set_random_color.json",
      "set_thickness.json",
      "start_drawing.json",
      "start_fill.json",
      "stop_drawing.json",
      "stop_fill.json",
    ],
    calc: [
      "calc_basic.json",
      "calc_operation.json",
      "calc_rand.json",
      "change_hex_to_rgb.json",
      "change_rgb_to_hex.json",
      "change_string_case.json",
      "char_at.json",
      "choose_project_timer_action.json",
      "combine_something.json",
      "coordinate_mouse.json",
      "coordinate_object.json",
      "count_match_string.json",
      "distance_something.json",
      "get_block_count.json",
      "get_boolean_value.json",
      "get_date.json",
      "get_nickname.json",
      "get_project_timer_value.json",
      "get_user_name.json",
      "index_of_string.json",
      "length_of_string.json",
      "quotient_and_mod.json",
      "replace_string.json",
      "reverse_of_string.json",
      "set_visible_project_timer.json",
      "substring.json",
    ],
    flow: [
      "_if.json",
      "continue_repeat.json",
      "create_clone.json",
      "delete_clone.json",
      "if_else.json",
      "remove_all_clones.json",
      "repeat_basic.json",
      "repeat_inf.json",
      "repeat_while_true.json",
      "restart_project.json",
      "stop_object.json",
      "stop_repeat.json",
      "wait_second.json",
      "wait_until_true.json",
      "when_clone_start.json",
    ],
    func: [
      "function_create.json",
      "function_field_boolean.json",
      "function_field_label.json",
      "function_field_string.json",
      "function_general.json",
      "function_param_boolean.json",
      "function_param_string.json",
      "function_value.json",
      "get_func_variable.json",
      "set_func_variable.json",
      "showFunctionPropsButton.json",
    ],
    judgement: [
      "boolean_and_or.json",
      "boolean_basic_operator.json",
      "boolean_not.json",
      "is_clicked.json",
      "is_object_clicked.json",
      "is_press_some_key.json",
      "is_type.json",
      "reach_something.json",
    ],
    looks: [
      "add_effect_amount.json",
      "change_effect_amount.json",
      "change_object_index.json",
      "change_scale_size.json",
      "change_to_next_shape.json",
      "change_to_some_shape.json",
      "dialog.json",
      "dialog_time.json",
      "erase_all_effects.json",
      "flip_x.json",
      "flip_y.json",
      "hide.json",
      "remove_dialog.json",
      "reset_scale_size.json",
      "set_scale_size.json",
      "show.json",
      "stretch_scale_size.json",
    ],
    moving: [
      "bounce_wall.json",
      "direction_absolute.json",
      "direction_relative.json",
      "direction_relative_duration.json",
      "locate.json",
      "locate_object_time.json",
      "locate_x.json",
      "locate_xy.json",
      "locate_xy_time.json",
      "locate_y.json",
      "move_direction.json",
      "move_to_angle.json",
      "move_x.json",
      "move_xy_time.json",
      "move_y.json",
      "rotate_absolute.json",
      "rotate_by_time.json",
      "rotate_relative.json",
      "see_angle_object.json",
    ],
    sound: [
      "get_sound_duration.json",
      "get_sound_speed.json",
      "get_sound_volume.json",
      "play_bgm.json",
      "sound_from_to.json",
      "sound_from_to_and_wait.json",
      "sound_silent_all.json",
      "sound_something_second_wait_with_block.json",
      "sound_something_second_with_block.json",
      "sound_something_wait_with_block.json",
      "sound_something_with_block.json",
      "sound_speed_change.json",
      "sound_speed_set.json",
      "sound_volume_change.json",
      "sound_volume_set.json",
      "stop_bgm.json",
    ],
    start: [
      "message_cast.json",
      "message_cast_wait.json",
      "mouse_click_cancled.json",
      "mouse_clicked.json",
      "start_neighbor_scene.json",
      "start_scene.json",
      "when_message_cast.json",
      "when_object_click.json",
      "when_object_click_canceled.json",
      "when_run_button_click.json",
      "when_scene_start.json",
      "when_some_key_pressed.json",
    ],
    variable: [
      "add_value_to_list.json",
      "ask_and_wait.json",
      "change_variable.json",
      "change_value_list_index.json",
      "get_canvas_input_value.json",
      "get_variable.json",
      "hide_list.json",
      "hide_variable.json",
      "insert_value_to_list.json",
      "is_included_in_list.json",
      "length_of_list.json",
      "listAddButton.json",
      "remove_value_from_list.json",
      "set_variable.json",
      "set_visible_answer.json",
      "show_list.json",
      "show_variable.json",
      "value_of_index_from_list.json",
      "variableAddButton.json",
    ],
  };

  return fileMap[category] || [];
}

// ===== searchEntryBlocks Ìï®Ïàò Í∞úÏÑ† =====
async function searchEntryBlocks(userMessage, topK = 3) {
  const blockData = await loadEntryBlockData();

  if (!blockData || blockData.length === 0) {
    console.log("üîç RAG: Î∏îÎ°ù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå");
    return [];
  }

  // 1. ÏßÅÏ†ë Îß§Ïπ≠ Ïö∞ÏÑ† (Ï†ïÌôïÌïú Î∏îÎ°ùÎ™Ö)
  const directMatches = blockData.filter((block) => {
    const blockName = block.name || "";
    return blockName.includes("ÎßåÏïΩ") && blockName.includes("ÎùºÎ©¥") && userMessage.includes("ÎßåÏïΩ");
  });

  // 2. ÌäπÎ≥Ñ ÌÇ§ÏõåÎìú Îß§Ïπ≠
  const specialKeywordMatches = [];

  // ÎÇòÎ®∏ÏßÄ Í¥ÄÎ†®
  if (
    (userMessage.includes("ÎÇòÎ®∏ÏßÄ") && userMessage.includes("Î∏îÎ°ù")) ||
    userMessage.includes("ÎÇòÎàóÏÖà") ||
    userMessage.includes("Î™´")
  ) {
    const mathBlocks = blockData.filter(
      (block) =>
        block.fileName === "quotient_and_mod" || (block.name && (block.name.includes("ÎÇòÎ®∏ÏßÄ") || block.name.includes("Î™´")))
    );
    specialKeywordMatches.push(...mathBlocks);
  }

  // Ï°∞Í±¥ Í¥ÄÎ†®
  if (userMessage.includes("Ï°∞Í±¥") || (userMessage.includes("ÎßåÏïΩ") && userMessage.includes("ÎùºÎ©¥"))) {
    const conditionBlocks = blockData.filter(
      (block) => block.fileName === "_if" || block.fileName === "if_else" || (block.name && block.name.includes("ÎßåÏïΩ"))
    );
    specialKeywordMatches.push(...conditionBlocks);
  }

  // Î∞òÎ≥µ Í¥ÄÎ†®
  if (userMessage.includes("Î∞òÎ≥µ") || userMessage.includes("Î£®ÌîÑ")) {
    const repeatBlocks = blockData.filter(
      (block) => block.category === "repeat" || (block.category === "flow" && block.name && block.name.includes("Î∞òÎ≥µ"))
    );
    specialKeywordMatches.push(...repeatBlocks);
  }

  // ÏßÅÏ†ë Îß§Ïπ≠Ïù¥ÎÇò ÌäπÎ≥Ñ ÌÇ§ÏõåÎìú Îß§Ïπ≠Ïù¥ ÏûàÏúºÎ©¥ Ïö∞ÏÑ† Î∞òÌôò
  if (directMatches.length > 0) {
    console.log(`üéØ ÏßÅÏ†ë Îß§Ïπ≠: ${directMatches.length}Í∞ú Î∏îÎ°ù`);
    return directMatches.slice(0, topK);
  }

  if (specialKeywordMatches.length > 0) {
    console.log(`üéØ ÌäπÎ≥Ñ ÌÇ§ÏõåÎìú Îß§Ïπ≠: ${specialKeywordMatches.length}Í∞ú Î∏îÎ°ù`);
    return [...new Set(specialKeywordMatches)].slice(0, topK); // Ï§ëÎ≥µ Ï†úÍ±∞
  }

  // 3. Í∏∞Ï°¥ ÏùºÎ∞ò Í≤ÄÏÉâ Î°úÏßÅ
  const messageWords = userMessage
    .toLowerCase()
    .replace(/[^\w\sÍ∞Ä-Ìû£]/g, " ")
    .split(/\s+/)
    .filter((word) => word.length > 0);

  console.log("üîç Í≤ÄÏÉâ ÌÇ§ÏõåÎìú:", messageWords);

  const scored = blockData.map((block) => {
    let score = 0;

    const searchableText = [
      block.name || "",
      block.description || "",
      getCategoryKorean(block.category),
      block.fileName || "",
      JSON.stringify(block.usage_examples || []),
      JSON.stringify(block.common_mistakes || []),
    ]
      .join(" ")
      .toLowerCase();

    // ÌÇ§ÏõåÎìú Îß§Ïπ≠
    for (const word of messageWords) {
      if (block.name && block.name.toLowerCase().includes(word)) {
        score += 10;
        console.log(`ÎÜíÏùÄ Îß§Ïπ≠: ${block.name} <- ${word}`);
      }

      if (searchableText.includes(word)) {
        score += 2;
      }

      const koreanCategory = getCategoryKorean(block.category);
      if (koreanCategory.includes(word)) {
        score += 5;
      }
    }

    return { block, score };
  });

  const results = scored
    .filter((item) => item.score > 0)
    .sort((a, b) => b.score - a.score)
    .slice(0, topK)
    .map((item) => item.block);

  console.log(`üîç RAG Í≤ÄÏÉâ Í≤∞Í≥º: ${results.length}Í∞ú Î∏îÎ°ù Ï∞æÏùå`);
  if (results.length > 0) {
    console.log(
      "Í≤ÄÏÉâÎêú Î∏îÎ°ùÎì§:",
      results.map((b) => ({
        name: b.name || b.fileName,
        category: getCategoryKorean(b.category),
        hasImage: b.hasImage,
      }))
    );
  }

  return results;
}

// ===== OpenAI API Ìò∏Ï∂ú Ìï®Ïàò =====
async function callOpenAI(messages, apiKey = null) {
  const key = apiKey || OPENAI_API_KEY;

  if (!key || key === "") {
    throw new Error("API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÑ§Ï†ïÏóêÏÑú OpenAI API ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
  }

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${key}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: messages,
        max_tokens: 200,
        temperature: 0.5,
        presence_penalty: 0.2,
        frequency_penalty: 0.2,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      if (response.status === 401) {
        throw new Error("API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏÑ§Ï†ïÏóêÏÑú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
      }
      throw new Error(`OpenAI API Ïò§Î•ò: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("OpenAI API Ìò∏Ï∂ú Ïã§Ìå®:", error);
    throw error;
  }
}

// ===== ÍµêÏú°Ï†Å AI ÏùëÎãµ ÏÉùÏÑ± (Îã®Í≥ÑÏ†Å ÌûåÌä∏ ÏãúÏä§ÌÖú) =====
async function generateEducationalResponse(userMessage, mode, projectContext, conversationHistory = [], classification) {
  try {
    const settings = await chrome.storage.sync.get(["openai_api_key"]);
    const apiKey = settings.openai_api_key;

    if (!apiKey || apiKey.trim() === "") {
      console.log("API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå");
      return "API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî. ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏïÑÏù¥ÏΩò ‚Üí ÏÑ§Ï†ïÏóêÏÑú OpenAI API ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.";
    }

    const messageCount = conversationHistory.length;
    const conversationCount = Math.floor(messageCount / 2);

    const needsHelp =
      userMessage.includes("Î™®Î•¥Í≤†") ||
      userMessage.includes("ÎßâÌòî") ||
      userMessage.includes("ÎèÑÏôÄ") ||
      userMessage.includes("Ïïà Îèº") ||
      userMessage.includes("Ïïà Îêò") ||
      userMessage.includes("Ïñ¥Î†§Ïõå");

    const attemptCount = conversationHistory.filter(
      (msg) => msg.role === "user" && (msg.content.includes("Î™®Î•¥Í≤†") || msg.content.includes("ÎßâÌòî"))
    ).length;

    let systemPrompt = `ÎãπÏã†ÏùÄ Entry(ÏóîÌä∏Î¶¨) Î∏îÎ°ùÏΩîÎî© ÍµêÏú° Ï†ÑÎ¨∏ ÌäúÌÑ∞ÏûÖÎãàÎã§.

ÍµêÏú° ÏõêÏπô:
- 2-3Î¨∏Ïû•ÏúºÎ°ú Í∞ÑÍ≤∞ÌïòÍ≤å ÏùëÎãµ
- ÏÜåÌÅ¨ÎùºÌÖåÏä§Ïãù Îã®Í≥ÑÏ†Å ÏßàÎ¨∏ÏúºÎ°ú ÌïôÏäµ Ïú†ÎèÑ
- ÌòÑÏû¨ ${conversationCount + 1}Î≤àÏß∏ ÎåÄÌôîÏûÖÎãàÎã§
- ÌïôÏÉùÏù¥ ${attemptCount}Î≤à ÎèÑÏõÄ ÏöîÏ≤≠Ìï®

ÌòÑÏû¨ ÏÉÅÌô©: ${projectContext || "ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ ÏóÜÏùå"}
ÏÑ†ÌÉùÎêú Î™®Îìú: ${getModeDescription(mode)}`;

    // Î∂ÑÎ•ò Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ ÌôúÏö©
    if (classification) {
      systemPrompt += `\nÏßàÎ¨∏ Ïú†Ìòï: ${classification.type} (Ïã†Î¢∞ÎèÑ: ${(classification.confidence * 100).toFixed(1)}%)`;
    }

    // RAG Í≤ÄÏÉâ ÏàòÌñâ
    if (USE_RAG) {
      const relevantBlocks = await searchEntryBlocks(userMessage);

      if (relevantBlocks.length > 0) {
        const contextInfo = relevantBlocks
          .map((block) => {
            let info = `‚Ä¢ ${getCategoryKorean(block.category)} Î∂ÑÎ•ò: ${block.name || block.fileName}`;
            if (block.description) info += ` - ${block.description}`;
            return info;
          })
          .join("\n");

        // Îã®Í≥ÑÎ≥Ñ ÌûåÌä∏ Ï†úÍ≥µ Ï†ÑÎûµ
        if (attemptCount === 0 && !needsHelp) {
          systemPrompt += `

=== Entry Ï†ÑÎ¨∏ ÏßÄÏãù (1Îã®Í≥Ñ - Í∞úÎÖê ÌûåÌä∏) ===
Ï∞æÏïÑÎÇ∏ Í¥ÄÎ†® Î∏îÎ°ùÎì§:
${contextInfo}

**Ï§ëÏöî ÏßÄÏãúÏÇ¨Ìï≠ - 1Îã®Í≥Ñ (Í∞úÎÖê ÌûåÌä∏):**
- Íµ¨Ï≤¥Ï†ÅÏù∏ Î∏îÎ°ùÎ™ÖÏùÄ Ï†àÎåÄ Ïñ∏Í∏âÌïòÏßÄ ÎßàÏÑ∏Ïöî
- "Ïù¥Îü∞ ÏÉÅÌô©ÏóêÏÑúÎäî Ï°∞Í±¥ÏùÑ ÌôïÏù∏ÌïòÎäî Î∞©Î≤ïÏù¥ ÌïÑÏöîÌï¥Ïöî"Ï≤òÎüº Í∞úÎÖêÎßå ÏÑ§Î™Ö
- "Ïñ¥Îñ§ ÏùºÏù¥ ÏùºÏñ¥ÎÇ¨ÏùÑ Îïå Î∞òÏùëÌïòÍ≤å ÌïòÎ†§Î©¥ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÍπåÏöî?" Í∞ôÏùÄ Ïú†ÎèÑ ÏßàÎ¨∏
- ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Í∞úÎÖê(Ï°∞Í±¥Î¨∏, Î∞òÎ≥µÎ¨∏ Îì±)Îßå Í∞ÑÏ†ëÏ†ÅÏúºÎ°ú Ïñ∏Í∏â
- ÎãµÏùÑ ÏßÅÏ†ë Ï£ºÏßÄ ÎßêÍ≥† Ïä§Ïä§Î°ú ÏÉùÍ∞ÅÌïòÎèÑÎ°ù Ïú†ÎèÑ`;
        } else if (attemptCount === 1 || (attemptCount === 0 && needsHelp)) {
          systemPrompt += `

=== Entry Ï†ÑÎ¨∏ ÏßÄÏãù (2Îã®Í≥Ñ - Ïπ¥ÌÖåÍ≥†Î¶¨ ÌûåÌä∏) ===
Ï∞æÏïÑÎÇ∏ Í¥ÄÎ†® Î∏îÎ°ùÎì§:
${contextInfo}

**Ï§ëÏöî ÏßÄÏãúÏÇ¨Ìï≠ - 2Îã®Í≥Ñ (Ïπ¥ÌÖåÍ≥†Î¶¨ ÌûåÌä∏):**
- Íµ¨Ï≤¥Ï†ÅÏù∏ Î∏îÎ°ùÎ™ÖÏùÄ ÏïÑÏßÅ Ïñ∏Í∏âÌïòÏßÄ ÎßàÏÑ∏Ïöî
- "${getCategoryKorean(relevantBlocks[0]?.category || "")} Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî"ÎùºÍ≥† ÏïàÎÇ¥
- "Ïù¥ Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú ~ÌïòÎäî Î∏îÎ°ùÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî" ÌòïÌÉúÎ°ú ÌûåÌä∏ Ï†úÍ≥µ
- Î∏îÎ°ùÏùò ÏùºÎ∞òÏ†ÅÏù∏ Í∏∞Îä•ÏùÄ ÏÑ§Î™ÖÌï¥ÎèÑ Îê®
- Ïó¨Ï†ÑÌûà Ï†ïÎãµÏùÄ ÏßÅÏ†ë Ï£ºÏßÄ ÏïäÏùå`;
        } else {
          systemPrompt += `

=== Entry Ï†ÑÎ¨∏ ÏßÄÏãù (3Îã®Í≥Ñ - Íµ¨Ï≤¥Ï†Å ÏïàÎÇ¥) ===
Ï∞æÏïÑÎÇ∏ Í¥ÄÎ†® Î∏îÎ°ùÎì§:
${contextInfo}

**Ï§ëÏöî ÏßÄÏãúÏÇ¨Ìï≠ - 3Îã®Í≥Ñ (Íµ¨Ï≤¥Ï†Å ÏïàÎÇ¥):**
- Ïù¥Ï†ú ÌïúÍµ≠Ïñ¥ Î∏îÎ°ùÎ™Ö ÏÇ¨Ïö©: "${relevantBlocks[0]?.name || "Ìï¥Îãπ Î∏îÎ°ù"}"
- ÏòÅÏñ¥ Ïö©Ïñ¥ Ï†àÎåÄ ÏÇ¨Ïö© Í∏àÏßÄ (when_object_click ‚ùå, Ïò§Î∏åÏ†ùÌä∏Î•º ÌÅ¥Î¶≠ÌñàÏùÑ Îïå ‚úÖ)
- ${getCategoryKorean(relevantBlocks[0]?.category || "")} Ïπ¥ÌÖåÍ≥†Î¶¨ÎùºÍ≥† Î™ÖÏãú
- Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÇ¨Ïö© Î∞©Î≤ïÍ≥º Îã®Í≥ÑÎ≥Ñ ÏÑ§Î™Ö Ï†úÍ≥µ
- Î∏îÎ°ùÏùÑ Ïñ¥ÎñªÍ≤å Ïó∞Í≤∞ÌïòÎäîÏßÄ ÏÉÅÏÑ∏Ìûà ÏïàÎÇ¥`;
        }

        console.log(`üß† RAG Î™®Îìú: ${attemptCount + 1}Îã®Í≥Ñ ÌûåÌä∏ Ï†úÍ≥µ`);
      }
    } else {
      // RAG ÎπÑÌôúÏÑ±Ìôî ÏãúÏóêÎèÑ Îã®Í≥ÑÎ≥Ñ Ï†ëÍ∑º
      if (attemptCount === 0 && !needsHelp) {
        systemPrompt += `

ÏùºÎ∞ò Î∏îÎ°ùÏΩîÎî© ÏõêÏπô (1Îã®Í≥Ñ):
- Í∞úÎÖêÏ†Å ÏÑ§Î™ÖÎßå Ï†úÍ≥µ
- "Ïù¥Îü∞ Í∏∞Îä•ÏùÑ ÌïòÎ†§Î©¥ Ïñ¥Îñ§ Ï¢ÖÎ•òÏùò Î∏îÎ°ùÏù¥ ÌïÑÏöîÌï†ÍπåÏöî?" ÏßàÎ¨∏
- ÏßÅÏ†ëÏ†ÅÏù∏ ÎãµÎ≥Ä Í∏àÏßÄ`;
      } else if (attemptCount === 1 || (attemptCount === 0 && needsHelp)) {
        systemPrompt += `

ÏùºÎ∞ò Î∏îÎ°ùÏΩîÎî© ÏõêÏπô (2Îã®Í≥Ñ):
- Í¥ÄÎ†® Ïπ¥ÌÖåÍ≥†Î¶¨ Ïñ∏Í∏â Í∞ÄÎä•
- "ÏãúÏûë Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî" Í∞ôÏùÄ ÌûåÌä∏
- Íµ¨Ï≤¥Ï†Å Î∏îÎ°ùÎ™ÖÏùÄ ÏïÑÏßÅ ÎπÑÍ≥µÍ∞ú`;
      } else {
        systemPrompt += `

ÏùºÎ∞ò Î∏îÎ°ùÏΩîÎî© ÏõêÏπô (3Îã®Í≥Ñ):
- Ïù¥Ï†ú Íµ¨Ï≤¥Ï†ÅÏù∏ ÎèÑÏõÄ Ï†úÍ≥µ
- Î∏îÎ°ù Ïù¥Î¶ÑÍ≥º ÏÇ¨Ïö©Î≤ï ÏÑ§Î™Ö
- Îã®Í≥ÑÎ≥Ñ Ïó∞Í≤∞ Î∞©Î≤ï ÏïàÎÇ¥`;
      }

      console.log(`üìö ÏùºÎ∞ò Î™®Îìú: ${attemptCount + 1}Îã®Í≥Ñ ÌûåÌä∏ Ï†úÍ≥µ`);
    }

    // ÎåÄÌôî Îã®Í≥ÑÎ≥Ñ Ï∂îÍ∞Ä ÏßÄÏãúÏÇ¨Ìï≠
    if (attemptCount === 0 && !needsHelp) {
      systemPrompt += `\n\n[ÏßÄÏãú] Ï≤´ ÏãúÎèÑÏûÖÎãàÎã§. ÎãµÏùÑ Ï†àÎåÄ Ï£ºÏßÄ ÎßêÍ≥† Í∞úÎÖêÏ†Å ÏßàÎ¨∏Îßå ÌïòÏÑ∏Ïöî.
Ïòà: "Ïñ¥Îñ§ ÏùºÏù¥ ÏùºÏñ¥ÎÇ¨ÏùÑ Îïå Î∞òÏùëÌïòÍ≤å ÌïòÎ†§Î©¥ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†ÍπåÏöî?"`;
    } else if (attemptCount === 1 || (attemptCount === 0 && needsHelp)) {
      systemPrompt += `\n\n[ÏßÄÏãú] Îëê Î≤àÏß∏ ÏãúÎèÑÏù¥Í±∞ÎÇò ÎèÑÏõÄ ÏöîÏ≤≠ÏûÖÎãàÎã§. Ïπ¥ÌÖåÍ≥†Î¶¨ ÌûåÌä∏Îßå Ï†úÍ≥µÌïòÏÑ∏Ïöî.
Ïòà: "ÌùêÎ¶Ñ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÌïúÎ≤à ÏÇ¥Ìé¥Î≥¥Îäî Í≤å Ïñ¥Îñ®ÍπåÏöî?"`;
    } else {
      systemPrompt += `\n\n[ÏßÄÏãú] Ïó¨Îü¨ Î≤à ÏãúÎèÑÌñàÏúºÎãà Ïù¥Ï†ú Íµ¨Ï≤¥Ï†ÅÏù∏ Î∏îÎ°ùÎ™ÖÍ≥º ÏÇ¨Ïö©Î≤ïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî.`;
    }

    const messages = [
      { role: "system", content: systemPrompt },
      ...conversationHistory.slice(-4),
      { role: "user", content: userMessage },
    ];

    const response = await callOpenAI(messages, apiKey);

    // ÏùëÎãµ Í∏∏Ïù¥ Ï†úÌïú (3Î¨∏Ïû• Ïù¥ÎÇ¥)
    const sentences = response.split(/[.!?]\s+/);
    let finalResponse = response;
    if (sentences.length > 3) {
      finalResponse = sentences.slice(0, 3).join(". ") + ".";
    }

    // ÏÇ¨Ïö©Îüâ Î°úÍπÖ
    await logUsageStats(userMessage.length, finalResponse.length, mode, USE_RAG);

    return finalResponse;
  } catch (error) {
    console.error("AI ÏùëÎãµ ÏÉùÏÑ± Ïã§Ìå®:", error);
    return `Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`;
  }
}

// ===== Î™®ÎìúÎ≥Ñ ÏÑ§Î™Ö =====
function getModeDescription(mode) {
  const modes = {
    auto: "ÏûêÎèô Î™®Îìú - ÏÉÅÌô©Ïóê ÎßûÎäî ÏµúÏ†ÅÏùò ÎèÑÏõÄ Ï†úÍ≥µ",
    blocks: "Î∏îÎ°ù ÎèÑÏõÄ Î™®Îìú - Î∏îÎ°ù ÏÇ¨Ïö©Î≤ïÍ≥º Ï°∞Ìï©Ïóê ÏßëÏ§ë",
    general: "ÏùºÎ∞ò ÏßàÎ¨∏ Î™®Îìú - ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Í∞úÎÖê ÏÑ§Î™Ö",
    debug: "ÎîîÎ≤ÑÍπÖ Î™®Îìú - Î¨∏Ï†ú Ìï¥Í≤∞Í≥º Ïò§Î•ò Î∂ÑÏÑù",
  };
  return modes[mode] || modes["auto"];
}

// ===== Ìè¥Î∞± ÏùëÎãµ (API Ïã§Ìå® Ïãú) =====
function getFallbackResponse(errorMessage) {
  const fallbackResponses = [
    "Ïñ¥Îñ§ Î∂ÄÎ∂ÑÏù¥ Ïñ¥Î†§Ïö∞Ïã†Í∞ÄÏöî?",
    "Ïñ¥Îñ§ Í≤∞Í≥ºÎ•º ÎßåÎì§Í≥† Ïã∂ÏúºÏÑ∏Ïöî?",
    "Ï≤´ Î≤àÏß∏ Îã®Í≥ÑÎäî Î≠òÍπåÏöî?",
    "Ïñ¥Îñ§ Î∏îÎ°ùÏùÑ Ïç®Î≥¥ÏÖ®ÎÇòÏöî?",
  ];

  const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];

  if (errorMessage.includes("API ÌÇ§")) {
    return `${randomResponse}\n\n‚ö†Ô∏è ${errorMessage}\n\nÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏïÑÏù¥ÏΩòÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.`;
  }

  return `${randomResponse}\n\n(Ïó∞Í≤∞ ÏÉÅÌÉúÍ∞Ä Î∂àÏïàÏ†ïÌï¥ÏÑú Í∞ÑÎã®Ìïú ÏùëÎãµÏùÑ ÎìúÎ†∏Ïñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî!)`;
}

// ===== handleAIRequest Ìï®Ïàò ÏàòÏ†ï - asyncÎ°ú Î™ÖÌôïÌûà ÏÑ†Ïñ∏ =====
async function handleAIRequest(request) {
  const { message, mode, projectContext, conversationHistory = [] } = request;

  console.log("üöÄ AI ÏöîÏ≤≠ Ï≤òÎ¶¨ ÏãúÏûë:", { message, mode });

  // 1. ÏßàÎ¨∏ Î∂ÑÎ•ò
  if (!questionClassifier) {
    questionClassifier = new EntryQuestionClassifier();
  }

  const classification = await questionClassifier.classify(message, {
    previousMessages: conversationHistory,
  });

  console.log(`üìä Î∂ÑÎ•ò Í≤∞Í≥º:`, classification);

  // 2. Î∂ÑÎ•òÏóê Îî∞Î•∏ Ï≤òÎ¶¨ Ï†ÑÎûµ Í≤∞Ï†ï
  let responseStrategy = "";
  let useCoT = false;

  switch (classification.type) {
    case "simple":
      responseStrategy = "ÏßÅÏ†ëÏ†ÅÏù∏ ÎãµÎ≥ÄÍ≥º Í¥ÄÎ†® Î∏îÎ°ù Ï†úÏãú";
      break;
    case "complex":
      responseStrategy = "Îã®Í≥ÑÎ≥Ñ Íµ¨ÌòÑ Í∞ÄÏù¥Îìú";
      useCoT = true;
      break;
    case "debug":
      responseStrategy = "Î¨∏Ï†ú ÏßÑÎã® ÌõÑ Ìï¥Í≤∞Ï±Ö Ï†úÏãú";
      useCoT = true;
      break;
    case "conceptual":
      responseStrategy = "Í∞úÎÖê ÏÑ§Î™ÖÍ≥º ÏòàÏãú";
      break;
  }

  console.log(`üìù ÏùëÎãµ Ï†ÑÎûµ: ${responseStrategy}`);

  try {
    // 3. AI ÏùëÎãµ ÏÉùÏÑ±
    const response = await generateEducationalResponse(message, mode, projectContext, conversationHistory, classification);
    console.log("üí¨ AI ÏùëÎãµ ÏÉùÏÑ± ÏôÑÎ£å:", response.substring(0, 100) + "...");

    // 4. RAG Î∏îÎ°ù Í≤ÄÏÉâ (Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ Ìè¨Ìï®)
    const relevantBlocks = await searchEntryBlocks(message, 5);
    console.log("üîç RAG Í≤ÄÏÉâ ÏôÑÎ£å:", relevantBlocks.length, "Í∞ú Î∏îÎ°ù Î∞úÍ≤¨");

    // Î∏îÎ°ù Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    const blocksWithImages = relevantBlocks.map((block) => ({
      ...block,
      displayInfo: {
        name: block.name || convertFileNameToKorean(block.fileName),
        category: getCategoryKorean(block.category),
        imageUrl: block.imageUrl,
        hasImage: block.hasImage,
      },
    }));

    // 5. ÌÜµÍ≥Ñ ÏàòÏßë
    await logClassificationStats(message, classification);

    return {
      response: response,
      rawBlocks: blocksWithImages,
      blockSequence: null,
      classification: classification,
      useCoT: useCoT,
      responseStrategy: responseStrategy,
    };
  } catch (error) {
    console.error("‚ùå AI ÏöîÏ≤≠ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error);
    return {
      response: getFallbackResponse(error.message),
      rawBlocks: [],
      blockSequence: null,
      classification: classification,
    };
  }
}

// ===== ÌÜµÍ≥Ñ ÏàòÏßë Ìï®Ïàò =====
async function logClassificationStats(message, classification) {
  const stats = await chrome.storage.local.get(["classification_stats"]);
  const currentStats = stats.classification_stats || {
    total: 0,
    byType: {},
    byMethod: {},
  };

  currentStats.total++;
  currentStats.byType[classification.type] = (currentStats.byType[classification.type] || 0) + 1;
  currentStats.byMethod[classification.method] = (currentStats.byMethod[classification.method] || 0) + 1;

  await chrome.storage.local.set({ classification_stats: currentStats });
  console.log(`üìà Î∂ÑÎ•ò ÌÜµÍ≥Ñ:`, currentStats);
}

// ===== ÏÇ¨Ïö©Îüâ ÌÜµÍ≥Ñ =====
async function logUsageStats(messageLength, responseLength, mode, ragUsed) {
  const today = new Date().toISOString().split("T")[0];
  const stats = await chrome.storage.local.get([`stats_${today}`]);

  const todayStats = stats[`stats_${today}`] || {
    totalRequests: 0,
    totalTokens: 0,
    modeUsage: {},
    ragUsage: {
      withRAG: 0,
      withoutRAG: 0,
      ragSearches: 0,
      avgBlocksFound: 0,
    },
  };

  todayStats.totalRequests++;
  todayStats.totalTokens += Math.ceil((messageLength + responseLength) / 4);
  todayStats.modeUsage[mode] = (todayStats.modeUsage[mode] || 0) + 1;

  if (ragUsed) {
    todayStats.ragUsage.withRAG++;
    todayStats.ragUsage.ragSearches++;
  } else {
    todayStats.ragUsage.withoutRAG++;
  }

  await chrome.storage.local.set({
    [`stats_${today}`]: todayStats,
  });

  console.log(`üìä ÏÇ¨Ïö©Îüâ Í∏∞Î°ù: RAG ${ragUsed ? "ON" : "OFF"}, Î™®Îìú: ${mode}`);
}

// ===== Content ScriptÏôÄ Î©îÏãúÏßÄ ÌÜµÏã† =====
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  switch (request.action) {
    case "getSettings":
      chrome.storage.sync.get(["enabled", "autoAnalysis", "sidebarMode", "openai_api_key", "rag_enabled"], (data) => {
        sendResponse({
          ...data,
          hasApiKey: !!data.openai_api_key,
          ragEnabled: data.rag_enabled !== false,
          openai_api_key: undefined,
        });
      });
      return true;

    case "saveSettings":
      chrome.storage.sync.set(request.settings, () => {
        if (request.settings.hasOwnProperty("rag_enabled")) {
          USE_RAG = request.settings.rag_enabled;
          console.log(`üîÑ RAG ÏÑ§Ï†ï Î≥ÄÍ≤Ω: ${USE_RAG ? "ON" : "OFF"}`);
        }
        sendResponse({ success: true });
      });
      return true;

    case "toggleRAG":
      chrome.storage.sync.get(["rag_enabled"], (data) => {
        const newState = !(data.rag_enabled !== false);
        chrome.storage.sync.set({ rag_enabled: newState }, () => {
          USE_RAG = newState;
          console.log(`üîÑ RAG ÌÜ†Í∏Ä: ${USE_RAG ? "ON" : "OFF"}`);
          sendResponse({ success: true, ragEnabled: newState });
        });
      });
      return true;

    case "generateAIResponse":
      handleAIRequest(request)
        .then((result) => {
          sendResponse({
            success: true,
            response: result.response,
            blockSequence: result.blockSequence,
            rawBlocks: result.rawBlocks,
            classification: result.classification,
          });
        })
        .catch((error) => {
          sendResponse({
            success: false,
            error: error.message,
          });
        });
      return true;

    case "testClassification":
      (async () => {
        if (!questionClassifier) {
          questionClassifier = new EntryQuestionClassifier();
        }

        const result = await questionClassifier.classify(request.message);
        console.log(`üß™ ÌÖåÏä§Ìä∏ Î∂ÑÎ•ò:`, {
          message: request.message,
          result: result,
        });

        sendResponse(result);
      })();
      return true;

    case "openSettings":
      chrome.tabs.create({ url: chrome.runtime.getURL("settings.html") });
      sendResponse({ success: true });
      return true;

    default:
      break;
  }
});

// ===== Í∏∞Ï°¥ ÏΩîÎìú (Entry URL Ï≤òÎ¶¨ Îì±) =====
const ENTRY_URL = "https://playentry.org/";
const ENTRY_MATCH = /^https?:\/\/([a-z0-9-]+\.)?playentry\.org/i;

function sendToggle(tabId) {
  if (!tabId) return;
  chrome.tabs.sendMessage(tabId, { type: "TOGGLE_SIDEBAR" }, () => {
    void chrome.runtime.lastError;
  });
}

function waitTabComplete(tabId, timeoutMs = 15000) {
  return new Promise((resolve) => {
    let settled = false;

    const timer = setTimeout(async () => {
      if (settled) return;
      settled = true;
      try {
        const t = await chrome.tabs.get(tabId);
        resolve(t || null);
      } catch {
        resolve(null);
      }
    }, timeoutMs);

    const listener = (id, info, tab) => {
      if (id !== tabId) return;
      if (info.status === "complete") {
        chrome.tabs.onUpdated.removeListener(listener);
        if (settled) return;
        settled = true;
        clearTimeout(timer);
        resolve(tab || null);
      }
    };

    chrome.tabs.onUpdated.addListener(listener);
  });
}

async function openOrFocusEntryAndToggle(fromTab) {
  if (fromTab?.id && ENTRY_MATCH.test(fromTab.url || "")) {
    sendToggle(fromTab.id);
    return;
  }

  const all = await chrome.tabs.query({});
  const existing = all.find((t) => ENTRY_MATCH.test(t.url || ""));
  if (existing) {
    await chrome.tabs.update(existing.id, { active: true });
    setTimeout(() => sendToggle(existing.id), 200);
    return;
  }

  const created = await chrome.tabs.create({ url: ENTRY_URL, active: true });
  const loaded = await waitTabComplete(created.id);
  setTimeout(() => sendToggle((loaded || created).id), 300);
}
