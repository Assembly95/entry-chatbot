{
  "id": "is_type",
  "category": "judgement",
  "name": "[문자]이(가) [~]인가?",
  "description": "입력된 문자나 문자열이 특정 유형(숫자, 영어, 한글)에 해당하는지 판단하는 블록입니다. 문자의 종류를 확인하여 참(True) 또는 거짓(False)을 반환합니다.",

  "educational_context": {
    "learning_objectives": [
      "문자와 숫자의 구분 개념 학습",
      "데이터 타입 검증 방법 이해",
      "문자 인코딩과 언어별 문자 체계 기초 학습",
      "입력 데이터 검증을 통한 프로그램 안정성 향상",
      "조건부 처리를 활용한 데이터 분류 기능 구현"
    ],
    "key_concepts": [
      {
        "concept": "데이터 타입 검증(Data Type Validation)",
        "explanation": "입력된 데이터가 예상한 형태인지 확인하는 과정으로, 프로그램의 안정성과 정확성을 보장하는 중요한 개념"
      },
      {
        "concept": "문자 분류(Character Classification)",
        "explanation": "문자를 숫자, 영어, 한글 등의 카테고리로 구분하여 각각 다른 처리를 할 수 있게 하는 방법"
      },
      {
        "concept": "조건부 데이터 처리",
        "explanation": "데이터의 타입이나 특성에 따라 다른 로직을 실행하는 프로그래밍 패턴"
      },
      {
        "concept": "유니코드와 문자 인코딩",
        "explanation": "컴퓨터가 다양한 언어의 문자를 인식하고 처리하는 방식에 대한 기초 개념"
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "조건 블록(만약 ~라면) 사용법",
      "변수와 값의 개념 이해",
      "문자열과 숫자의 기본 구분",
      "판단 블록의 기본 사용법"
    ]
  },

  "usage_examples": [
    {
      "title": "사용자 입력 숫자 검증",
      "description": "사용자가 입력한 값이 숫자인지 확인",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'숫자를 입력하세요' 묻고 기다리기",
        "만약 (답변)이(가) (숫자)인가? 라면",
        "  '올바른 숫자를 입력했습니다!' 말하기",
        "아니라면",
        "  '숫자만 입력해주세요' 말하기"
      ],
      "explanation": "사용자가 입력한 값이 숫자인지 확인하여 적절한 메시지를 출력합니다."
    },
    {
      "title": "언어별 문자 분류",
      "description": "입력된 문자가 한글인지 영어인지 구분",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'문자를 입력하세요' 묻고 기다리기",
        "만약 (답변)이(가) (한글)인가? 라면",
        "  '한글을 입력했네요!' 말하기",
        "아니라면",
        "  만약 (답변)이(가) (영어)인가? 라면",
        "    '영어를 입력했네요!' 말하기",
        "  아니라면",
        "    '한글이나 영어를 입력해주세요' 말하기"
      ],
      "explanation": "사용자가 입력한 문자가 한글인지 영어인지 구분하여 각각 다른 반응을 보입니다."
    },
    {
      "title": "암호 강도 검사",
      "description": "비밀번호에 숫자와 영어가 포함되어 있는지 확인",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'비밀번호를 입력하세요' 묻고 기다리기",
        "점수 변수를 0으로 정하기",
        "(답변)의 길이만큼 반복하기",
        "  현재문자 변수를 (답변)에서 (횟수)번째 글자로 정하기",
        "  만약 (현재문자)이(가) (숫자)인가? 라면",
        "    점수 변수를 1만큼 바꾸기",
        "  만약 (현재문자)이(가) (영어)인가? 라면",
        "    점수 변수를 1만큼 바꾸기",
        "만약 (점수) > (5) 라면",
        "  '강한 비밀번호입니다!' 말하기",
        "아니라면",
        "  '숫자와 영어를 더 포함시켜주세요' 말하기"
      ],
      "explanation": "비밀번호에 숫자와 영어 문자가 얼마나 포함되어 있는지 검사하여 강도를 평가합니다."
    },
    {
      "title": "계산기 입력 검증",
      "description": "계산에 사용할 숫자 입력의 유효성 확인",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "계속 반복하기",
        "  '첫 번째 숫자를 입력하세요' 묻고 기다리기",
        "  만약 (답변)이(가) (숫자)인가? 라면",
        "    첫번째 변수를 (답변)으로 정하기",
        "    반복 중단하기",
        "  아니라면",
        "    '올바른 숫자를 입력해주세요!' 말하기",
        "계속 반복하기",
        "  '두 번째 숫자를 입력하세요' 묻고 기다리기",
        "  만약 (답변)이(가) (숫자)인가? 라면",
        "    두번째 변수를 (답변)으로 정하기",
        "    반복 중단하기",
        "  아니라면",
        "    '올바른 숫자를 입력해주세요!' 말하기",
        "결과 변수를 (첫번째) + (두번째)로 정하기",
        "(결과) + '입니다!' 말하기"
      ],
      "explanation": "계산기에서 사용자가 입력한 값이 숫자인지 확인하고, 숫자가 아니면 다시 입력받습니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "문자 타입을 어떻게 확인하는지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'판단' 카테고리(보라색 육각형 아이콘)를 클릭해보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[문자]이(가) [~]인가?' 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "첫 번째 칸에는 확인하고 싶은 문자를, 드롭다운에서는 숫자/영어/한글 중 선택하세요"
        }
      ]
    },
    {
      "situation": "사용자 입력을 검증하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "'묻고 기다리기' 블록으로 사용자 입력을 받은 후 '답변' 블록을 사용하세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'답변'을 '[문자]이(가) [숫자]인가?' 블록의 첫 번째 칸에 넣어보세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "이 블록을 '만약 ~라면' 조건 블록과 함께 사용해서 입력 검증을 구현하세요"
        }
      ]
    },
    {
      "situation": "문자열의 각 글자를 하나씩 확인하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "'[문자]의 길이만큼 반복하기' 블록을 사용해서 문자열의 각 글자를 순서대로 확인할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[문자]에서 [번호]번째 글자' 블록으로 각 글자를 가져와서 타입을 확인하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "반복 블록과 조건 블록을 조합해서 문자열 전체를 분석할 수 있어요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "빈 문자열이나 공백에 대한 처리 누락",
      "why_it_happens": "사용자가 아무것도 입력하지 않거나 공백만 입력하는 경우를 고려하지 않음",
      "consequence": "예상치 못한 결과나 오류 발생",
      "solution": "입력값의 길이를 먼저 확인하거나 공백 제거 후 검증 실시",
      "teaching_moment": "사용자는 예상과 다르게 행동할 수 있으니 다양한 경우를 미리 생각해보는 것이 중요해요."
    },
    {
      "mistake": "여러 문자가 섞인 문자열을 단일 타입으로 판단하려고 함",
      "why_it_happens": "이 블록이 문자열 전체가 아닌 개별 문자나 단일 타입 문자열을 확인한다는 것을 이해하지 못함",
      "consequence": "'123abc'와 같은 혼합 문자열에서 예상과 다른 결과",
      "solution": "문자열의 각 글자를 개별적으로 확인하거나 용도에 맞는 다른 방법 사용",
      "teaching_moment": "복잡한 문제는 작은 단위로 나누어서 해결하는 것이 프로그래밍의 기본 원칙이에요."
    },
    {
      "mistake": "특수 문자나 기호에 대한 고려 부족",
      "why_it_happens": "숫자, 영어, 한글 외의 문자들(!, @, #, 공백 등)에 대한 처리를 생각하지 못함",
      "consequence": "특수 문자 입력 시 예상과 다른 동작",
      "solution": "모든 경우를 다 확인한 후 '아니라면' 블록으로 예외 상황 처리",
      "teaching_moment": "프로그램을 만들 때는 '만약에 이런 경우라면?'을 계속 생각해보는 습관이 중요해요."
    },
    {
      "mistake": "대소문자 구분에 대한 이해 부족",
      "why_it_happens": "영어 대문자와 소문자가 모두 영어로 인식된다는 것을 모름",
      "consequence": "대소문자 처리에서 혼란",
      "solution": "영어 타입 검사는 대소문자를 구분하지 않는다는 것을 이해",
      "teaching_moment": "컴퓨터는 A와 a를 다른 문자로 보지만, 이 블록에서는 둘 다 영어로 인식해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "판단 블록 찾기",
      "instruction": "블록 팔레트에서 '판단' 카테고리(보라색 육각형 모양)를 클릭하세요.",
      "visual_hint": "보라색 아이콘이고 육각형 모양을 하고 있어요."
    },
    {
      "step": 2,
      "title": "문자 타입 판단 블록 선택",
      "instruction": "'[문자]이(가) [~]인가?' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "왼쪽에 문자 입력 칸이 있고 오른쪽에 드롭다운 메뉴가 있는 육각형 블록이에요."
    },
    {
      "step": 3,
      "title": "확인할 문자 입력",
      "instruction": "첫 번째 칸에 확인하고 싶은 문자나 변수를 넣으세요.",
      "visual_hint": "직접 문자를 입력하거나 '답변', 변수 블록 등을 드래그해서 넣을 수 있어요."
    },
    {
      "step": 4,
      "title": "문자 타입 선택",
      "instruction": "드롭다운 메뉴에서 확인하고 싶은 타입(숫자/영어/한글)을 선택하세요.",
      "visual_hint": "드롭다운을 클릭하면 숫자, 영어, 한글 세 가지 옵션이 나타나요."
    },
    {
      "step": 5,
      "title": "조건 블록과 연결",
      "instruction": "이 판단 블록을 '만약 ~라면' 블록의 조건 자리에 넣으세요.",
      "visual_hint": "육각형 모양의 조건 자리에 딱 맞아 들어가요."
    },
    {
      "step": 6,
      "title": "결과에 따른 동작 설정",
      "instruction": "조건이 참일 때와 거짓일 때 각각 다른 동작을 설정하세요.",
      "visual_hint": "'만약 ~라면, 아니라면' 블록을 사용하면 두 가지 경우를 모두 처리할 수 있어요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "_if",
      "block_name": "만약 ~라면",
      "relationship": "필수 연계 블록",
      "explanation": "문자 타입 판단 결과를 바탕으로 조건부 실행을 수행하는 핵심 블록"
    },
    {
      "block_id": "if_else",
      "block_name": "만약 ~라면, 아니라면",
      "relationship": "이중 조건 처리",
      "explanation": "문자 타입이 맞을 때와 틀릴 때 각각 다른 동작을 수행하는 블록"
    },
    {
      "block_id": "ask_and_wait",
      "block_name": "묻고 기다리기",
      "relationship": "사용자 입력 수집",
      "explanation": "사용자로부터 문자 입력을 받아 타입 검증의 대상이 되는 데이터 제공"
    },
    {
      "block_id": "get_canvas_input_value",
      "block_name": "답변",
      "relationship": "입력값 전달",
      "explanation": "사용자가 입력한 답변을 문자 타입 판단 블록으로 전달하는 블록"
    },
    {
      "block_id": "length_of_string",
      "block_name": "[문자]의 길이",
      "relationship": "문자열 분석 보조",
      "explanation": "문자열의 길이를 확인하여 반복 처리나 유효성 검사에 활용"
    },
    {
      "block_id": "char_at",
      "block_name": "[문자]에서 [번호]번째 글자",
      "relationship": "개별 문자 추출",
      "explanation": "문자열에서 개별 문자를 추출하여 하나씩 타입을 확인할 때 사용"
    },
    {
      "block_id": "repeat_basic",
      "block_name": "[횟수]번 반복하기",
      "relationship": "문자열 순회",
      "explanation": "문자열의 각 글자를 순서대로 확인할 때 사용하는 반복 블록"
    }
  ],

  "debugging_tips": [
    {
      "problem": "예상과 다른 결과가 나와요",
      "possible_causes": [
        "입력된 문자가 예상한 타입이 아님",
        "문자열에 공백이나 특수문자가 포함됨",
        "여러 타입이 섞인 문자열을 단일 타입으로 확인하려고 함"
      ],
      "solutions": [
        "입력값을 화면에 출력해서 실제 내용 확인하기",
        "문자열의 길이와 각 글자를 개별적으로 확인해보기",
        "공백 제거나 문자열 정리 과정 추가하기"
      ]
    },
    {
      "problem": "빈 입력이나 공백만 입력했을 때 오류가 나요",
      "possible_causes": ["빈 문자열이나 공백에 대한 처리가 없음", "문자열 길이 확인 없이 바로 타입 검사 시도"],
      "solutions": [
        "문자열 길이를 먼저 확인하는 조건 추가",
        "'아니라면' 블록으로 예외 상황 처리",
        "사용자에게 올바른 입력 방법 안내"
      ]
    },
    {
      "problem": "한글과 영어가 섞인 문자를 제대로 구분하지 못해요",
      "possible_causes": ["문자열 전체를 한 번에 확인하려고 함", "개별 문자 확인 로직이 없음"],
      "solutions": [
        "문자열의 각 글자를 하나씩 확인하는 반복 구조 사용",
        "각 문자 타입별로 카운터 변수를 만들어 개수 확인",
        "원하는 조건(예: 모두 한글, 모두 영어 등)을 명확히 정의"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "도서관 분류 시스템",
      "explanation": "도서관에서 책을 소설, 과학, 역사 등으로 분류하는 것처럼 문자를 숫자, 영어, 한글로 분류합니다."
    },
    {
      "analogy": "우편번호 시스템",
      "explanation": "우편번호가 모두 숫자로 이루어져야 하는 것처럼, 특정 입력이 원하는 형태인지 확인하는 과정과 같습니다."
    },
    {
      "analogy": "은행 계좌번호 검증",
      "explanation": "계좌번호에 숫자만 들어가야 하는 것처럼, 올바른 형태의 데이터인지 확인하는 보안 절차와 같습니다."
    },
    {
      "analogy": "언어 번역기",
      "explanation": "번역기가 입력된 텍스트의 언어를 자동으로 감지하는 것처럼, 문자의 종류를 자동으로 판별합니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "복합 문자열 분석",
      "description": "문자열에 포함된 각 타입의 문자 개수를 세어서 비율이나 패턴 분석",
      "use_case": "비밀번호 강도 측정, 텍스트 언어 비율 분석"
    },
    {
      "concept": "입력 형식 검증 시스템",
      "description": "이메일, 전화번호, 주민번호 등 특정 형식에 맞는지 종합적으로 검증",
      "use_case": "회원가입 폼 검증, 데이터 정리 프로그램"
    },
    {
      "concept": "다국어 텍스트 처리",
      "description": "한글, 영어 외에 다른 언어나 특수문자 처리를 위한 확장 로직",
      "use_case": "국제화 프로그램, 다국어 채팅 시스템"
    },
    {
      "concept": "실시간 입력 검증",
      "description": "사용자가 타이핑하는 동안 실시간으로 입력 형식을 검증하고 피드백 제공",
      "use_case": "실시간 폼 검증, 타이핑 게임"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "단일 문자나 간단한 문자열의 타입을 확인할 수 있다",
      "example": "사용자 입력이 숫자인지 확인하기, 단일 글자가 한글인지 영어인지 구분하기"
    },
    {
      "level": "중급",
      "criteria": "복합 문자열을 분석하고 각 문자 타입의 비율이나 패턴을 확인할 수 있다",
      "example": "비밀번호에 숫자와 영어가 모두 포함되어 있는지 확인, 문자열의 언어 구성 분석"
    },
    {
      "level": "고급",
      "criteria": "문자 타입 검증을 활용한 완전한 데이터 검증 시스템을 구현할 수 있다",
      "example": "다양한 입력 형식을 검증하는 종합 시스템, 실시간 입력 검증 및 오류 처리"
    }
  ]
}
