{
  "id": "is_press_some_key",
  "category": "judgement",
  "name": "[키] 키를 눌렀는가?",
  "description": "지정된 키보드 키가 현재 눌려져 있는 상태인지를 확인합니다. 해당 키를 누르고 있는 동안 참(True)을, 그렇지 않으면 거짓(False)을 반환하는 판단 블록입니다.",

  "visual_appearance": {
    "shape": "육각형 모양 (판단 블록 형태)",
    "color": "초록색 (#10B981)",
    "text_color": "흰색",
    "icon": "없음 (텍스트만)",
    "block_type": "판단 블록 (조건 블록에 연결 가능)",
    "parameters": [
      {
        "name": "키 선택",
        "type": "키보드 선택 드롭다운",
        "shape": "둥근 직사각형",
        "options": "화살표 키, 문자 키, 숫자 키, 기능 키 등",
        "default": "스페이스"
      }
    ]
  },

  "educational_context": {
    "learning_objectives": [
      "키보드 입력 감지의 기본 원리 이해",
      "특정 키에 대한 실시간 상태 확인 학습",
      "게임 컨트롤과 사용자 인터페이스 구현",
      "지속적인 키 입력 처리와 이벤트의 차이점 이해",
      "키보드 기반 상호작용 프로그래밍 기초"
    ],
    "key_concepts": [
      {
        "concept": "키 상태 감지(Key State Detection)",
        "explanation": "특정 키가 현재 눌려져 있는 상태인지를 실시간으로 확인하는 방식으로, 지속적인 키 입력 처리에 사용됨"
      },
      {
        "concept": "폴링 기반 입력(Polling-based Input)",
        "explanation": "프로그램이 능동적으로 키 상태를 계속 확인하는 방식으로, 키를 누르고 있는 동안의 지속적인 동작 구현에 적합"
      },
      {
        "concept": "키 코드와 키 매핑",
        "explanation": "각 키보드 키마다 고유한 코드가 있으며, 이를 통해 특정 키를 식별하고 처리하는 시스템"
      },
      {
        "concept": "게임 컨트롤 패턴",
        "explanation": "키를 누르고 있는 동안 계속 동작하는 게임 조작 방식으로, 이동이나 연속 동작에 많이 사용됨"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": ["Entry 기본 인터페이스 사용법", "조건 블록 사용법", "반복 블록의 기본 이해", "키보드 사용법"]
  },

  "usage_examples": [
    {
      "title": "기본 키 입력 감지",
      "description": "스페이스 키를 누르는 동안 메시지 표시",
      "blocks": [
        "[시작] 버튼을 클릭했을 때",
        "계속 반복하기",
        "  만약 <[스페이스] 키를 눌렀는가?> 이라면",
        "    '스페이스 키를 누르고 있습니다!'를 말하기",
        "  아니라면",
        "    말풍선 지우기"
      ],
      "explanation": "스페이스 키를 누르고 있는 동안에는 메시지를 표시하고, 키를 떼면 메시지가 사라집니다."
    },
    {
      "title": "캐릭터 이동 제어",
      "description": "화살표 키로 캐릭터 움직이기",
      "blocks": [
        "[시작] 버튼을 클릭했을 때",
        "계속 반복하기",
        "  만약 <[→] 키를 눌렀는가?> 이라면",
        "    x좌표를 5만큼 바꾸기",
        "  만약 <[←] 키를 눌렀는가?> 이라면",
        "    x좌표를 -5만큼 바꾸기",
        "  만약 <[↑] 키를 눌렀는가?> 이라면",
        "    y좌표를 5만큼 바꾸기",
        "  만약 <[↓] 키를 눌렀는가?> 이라면",
        "    y좌표를 -5만큼 바꾸기"
      ],
      "explanation": "화살표 키를 누르고 있는 동안 캐릭터가 해당 방향으로 계속 이동합니다. 부드러운 이동 효과를 만들 수 있습니다."
    },
    {
      "title": "연속 동작 구현",
      "description": "키를 누르는 동안 계속 점프하기",
      "blocks": [
        "[시작] 버튼을 클릭했을 때",
        "계속 반복하기",
        "  만약 <[J] 키를 눌렀는가?> 이라면",
        "    y좌표를 10만큼 바꾸기",
        "    0.1초 기다리기",
        "    y좌표를 -10만큼 바꾸기",
        "    0.1초 기다리기"
      ],
      "explanation": "J 키를 누르고 있는 동안 캐릭터가 계속 점프하는 동작을 반복합니다."
    },
    {
      "title": "복합 키 조합",
      "description": "여러 키를 동시에 눌렀을 때 특별한 동작",
      "blocks": [
        "[시작] 버튼을 클릭했을 때",
        "계속 반복하기",
        "  만약 <<[Shift] 키를 눌렀는가?> 그리고 <[→] 키를 눌렀는가?>> 이라면",
        "    x좌표를 15만큼 바꾸기",
        "    '빠르게 이동!'을 말하기",
        "  아니라면",
        "    만약 <[→] 키를 눌렀는가?> 이라면",
        "      x좌표를 5만큼 바꾸기"
      ],
      "explanation": "Shift + 오른쪽 화살표를 동시에 누르면 빠르게 이동하고, 오른쪽 화살표만 누르면 천천히 이동합니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "키 입력 감지를 언제 사용하는지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "키를 누르고 있는 동안 계속 어떤 일이 일어나게 하고 싶을 때 사용해요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'판단' 카테고리에서 초록색 육각형의 '키를 눌렀는가?' 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "드롭다운에서 원하는 키를 선택하고 조건 블록에 넣어서 사용하세요"
        }
      ]
    },
    {
      "situation": "키를 눌러도 반응이 없어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "키보드 포커스가 Entry 화면에 있는지 확인하세요. 다른 곳을 클릭했다면 Entry 화면을 클릭해보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'계속 반복하기' 블록 안에서 사용하고 있는지 확인하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "드롭다운에서 올바른 키를 선택했는지 확인해보세요"
        }
      ]
    },
    {
      "situation": "이벤트 블록의 키 입력과 뭐가 다른가요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "이벤트 블록은 키를 누르는 순간만 감지하고, 판단 블록은 누르고 있는 동안 계속 확인해요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "한 번 누를 때는 이벤트 블록을, 누르고 있는 동안 계속 뭔가 하려면 판단 블록을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "게임에서 이동이나 연속 동작에는 판단 블록이 더 적합해요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "한 번의 키 입력을 감지하려고 이 블록을 사용함",
      "why_it_happens": "이벤트 블록과 판단 블록의 차이점을 이해하지 못함",
      "consequence": "예상과 다르게 키를 누르고 있는 동안 계속 실행됨",
      "solution": "한 번의 키 입력은 '키를 눌렀을 때' 이벤트 블록 사용하기",
      "teaching_moment": "문을 한 번 두드리는 것과 계속 누르고 있는 것은 다른 행동이에요"
    },
    {
      "mistake": "반복 블록 없이 사용해서 감지가 불안정함",
      "why_it_happens": "키 상태를 지속적으로 확인하지 않아서 놓치는 경우 발생",
      "consequence": "키를 누르고 있어도 간헐적으로만 반응하거나 감지하지 못함",
      "solution": "'계속 반복하기' 블록 안에서 사용하여 지속적으로 확인하기",
      "teaching_moment": "문지기가 계속 지켜봐야 문을 두드리는 소리를 놓치지 않는 것과 같아요"
    },
    {
      "mistake": "여러 키를 동시에 확인할 때 복잡하게 만듦",
      "why_it_happens": "논리 연산자의 사용법을 모르거나 조건을 복잡하게 구성",
      "consequence": "원하는 키 조합이 제대로 감지되지 않거나 코드가 복잡해짐",
      "solution": "'그리고', '또는' 블록을 사용해서 깔끔하게 키 조합 만들기",
      "teaching_moment": "피아노에서 여러 건반을 동시에 누르는 것처럼, 프로그래밍에서도 여러 조건을 조합할 수 있어요"
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "판단 카테고리 찾기",
      "instruction": "블록 팔레트에서 '판단' 카테고리를 클릭하세요.",
      "visual_hint": "초록색 육각형 모양의 아이콘을 찾아보세요."
    },
    {
      "step": 2,
      "title": "키 입력 판단 블록 선택",
      "instruction": "'[키] 키를 눌렀는가?' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "키 선택 드롭다운이 있는 초록색 육각형 블록이에요."
    },
    {
      "step": 3,
      "title": "키 선택하기",
      "instruction": "드롭다운을 클릭해서 감지하고 싶은 키를 선택하세요.",
      "visual_hint": "화살표 키, 스페이스, 엔터, 문자 키 등 다양한 키를 선택할 수 있어요."
    },
    {
      "step": 4,
      "title": "조건 블록과 연결",
      "instruction": "'만약 ~라면' 블록의 육각형 조건 자리에 넣으세요.",
      "visual_hint": "육각형 모양이 딱 맞아떨어져야 해요."
    },
    {
      "step": 5,
      "title": "반복 블록으로 감싸기",
      "instruction": "지속적으로 확인하기 위해 '계속 반복하기' 블록으로 감싸세요.",
      "visual_hint": "계속 확인해야 키 입력을 놓치지 않아요."
    },
    {
      "step": 6,
      "title": "실행할 동작 추가",
      "instruction": "키를 눌렀을 때 실행할 블록들을 조건 블록 안에 넣으세요.",
      "visual_hint": "키를 누르고 있는 동안 계속 실행될 동작들을 배치하세요."
    },
    {
      "step": 7,
      "title": "테스트하기",
      "instruction": "프로그램을 실행하고 선택한 키를 길게 눌러보면서 테스트하세요.",
      "visual_hint": "Entry 화면을 클릭해서 키보드 포커스를 맞춘 후 테스트하세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "when_some_key_pressed",
      "relationship": "이벤트 방식",
      "explanation": "키를 누르는 순간만 감지하는 이벤트 블록으로, 한 번의 키 입력 처리에 적합"
    },
    {
      "block_id": "boolean_and_or",
      "relationship": "복합 키 조합",
      "explanation": "'그리고', '또는' 블록으로 여러 키를 동시에 확인하거나 키 조합 만들기"
    },
    {
      "block_id": "_if",
      "relationship": "조건부 실행",
      "explanation": "키 입력 상태에 따라 다른 동작을 실행하는 조건 블록"
    },
    {
      "block_id": "repeat_inf",
      "relationship": "지속적 확인",
      "explanation": "키 상태를 지속적으로 확인하기 위한 무한 반복 블록"
    },
    {
      "block_id": "move_x",
      "relationship": "이동 제어",
      "explanation": "키 입력에 따른 캐릭터 이동이나 위치 변경 블록"
    }
  ],

  "debugging_tips": [
    {
      "problem": "키를 눌러도 반응이 없어요",
      "possible_causes": [
        "Entry 화면에 키보드 포커스가 없음",
        "반복 블록 없이 사용해서 감지 빈도가 부족",
        "잘못된 키를 선택함",
        "다른 프로그램이 키 입력을 가로챔"
      ],
      "solutions": [
        "Entry 화면을 클릭해서 키보드 포커스 맞추기",
        "'계속 반복하기' 블록으로 감싸서 지속적으로 확인하기",
        "드롭다운에서 올바른 키가 선택되어 있는지 확인하기",
        "다른 프로그램을 종료하거나 Entry만 사용하기"
      ]
    },
    {
      "problem": "키를 누르지 않아도 계속 실행되는 것 같아요",
      "possible_causes": ["키보드 키가 물리적으로 눌린 상태로 고정됨", "다른 조건이나 변수가 동시에 영향을 줌"],
      "solutions": [
        "키보드 상태를 확인하고 해당 키를 여러 번 눌러보기",
        "다른 조건들과 함께 사용하는 경우 각각 따로 테스트해보기"
      ]
    },
    {
      "problem": "여러 키 조합이 제대로 감지되지 않아요",
      "possible_causes": ["키보드에서 동시에 인식할 수 있는 키 개수 제한", "논리 연산자의 잘못된 사용"],
      "solutions": [
        "동시에 누르는 키의 개수를 줄이거나 다른 키 조합 시도하기",
        "'그리고' 블록을 사용해서 정확한 조건 조합 만들기"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "자동차 액셀러레이터",
      "explanation": "자동차 액셀 페달을 밟고 있는 동안 계속 가속되는 것처럼, 키를 누르고 있는 동안 계속 동작이 실행됩니다."
    },
    {
      "analogy": "드라이어 버튼",
      "explanation": "드라이어 버튼을 누르고 있는 동안 바람이 나오는 것처럼, 키를 누르고 있는 동안 지속적인 동작을 만들 수 있습니다."
    },
    {
      "analogy": "게임 컨트롤러",
      "explanation": "게임에서 이동 버튼을 누르고 있으면 계속 움직이는 것처럼, 키보드로도 같은 방식의 조작을 구현할 수 있습니다."
    },
    {
      "analogy": "피아노 건반",
      "explanation": "피아노 건반을 누르고 있는 동안 소리가 계속 나는 것처럼, 키 상태에 따라 지속적인 반응을 만들 수 있습니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "멀티 키 컨트롤 시스템",
      "description": "여러 키를 조합해서 복잡한 조작 체계를 만드는 시스템",
      "use_case": "격투 게임의 콤보 시스템, 멀티미디어 플레이어 단축키, 게임 치트 코드"
    },
    {
      "concept": "적응형 키 매핑",
      "description": "상황이나 모드에 따라 같은 키가 다른 기능을 하는 시스템",
      "use_case": "게임의 모드별 조작법, 편집기의 모드 전환, 레벨별 컨트롤 변화"
    },
    {
      "concept": "키 상태 기반 애니메이션",
      "description": "키 입력 지속 시간이나 패턴에 따라 다른 애니메이션을 보여주는 시스템",
      "use_case": "캐릭터 걷기/뛰기 전환, 차징 시스템, 압력 감지형 인터페이스"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "특정 키 입력을 감지해서 기본적인 반응을 구현할 수 있다",
      "example": "키를 누르는 동안 메시지 표시, 간단한 이동 조작"
    },
    {
      "level": "중급",
      "criteria": "여러 키를 조합하고 지속적인 키 입력 처리를 통해 게임 컨트롤을 구현할 수 있다",
      "example": "화살표 키로 캐릭터 이동, 키 조합으로 특수 동작 만들기"
    },
    {
      "level": "고급",
      "criteria": "복잡한 키보드 인터페이스나 멀티 키 시스템을 설계해서 정교한 사용자 경험을 만들 수 있다",
      "example": "실시간 전략 게임 컨트롤, 음악 게임 인터페이스, 멀티미디어 컨트롤러"
    }
  ]
}
