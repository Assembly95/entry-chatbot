{
  "id": "reach_something",
  "category": "judgement",
  "name": "[~]에 닿았는가?",
  "description": "이 오브젝트가 선택한 항목에 닿았다면 참으로, 아니라면 거짓으로 판단하는 블록입니다. 충돌 감지를 위한 핵심 판단 블록으로, 게임이나 상호작용 프로그램에서 자주 사용됩니다.",

  "educational_context": {
    "learning_objectives": [
      "충돌 감지의 개념과 활용 방법 이해",
      "오브젝트 간의 상호작용 구현 능력 개발",
      "게임 로직 구현을 위한 기본 센서 블록 사용법 습득",
      "조건 블록과 함께 사용하여 동적 프로그래밍 구현",
      "픽셀 단위의 정밀한 충돌 감지 원리 학습"
    ],
    "key_concepts": [
      {
        "concept": "충돌 감지(Collision Detection)",
        "explanation": "두 오브젝트가 서로 겹치거나 닿았는지를 판단하는 컴퓨터 그래픽스의 핵심 기술로, 게임과 시뮬레이션에서 필수적인 기능"
      },
      {
        "concept": "픽셀 충돌(Pixel-Perfect Collision)",
        "explanation": "오브젝트의 실제 모양을 픽셀 단위로 정밀하게 계산하여 충돌을 감지하는 방식으로, 엔트리의 충돌 감지 시스템"
      },
      {
        "concept": "경계 영역(Boundary)",
        "explanation": "화면의 테두리나 특정 영역을 의미하는 개념으로, 오브젝트의 이동 제한이나 게임 영역 설정에 사용"
      },
      {
        "concept": "상호작용(Interaction)",
        "explanation": "오브젝트들 간의 접촉이나 상호 영향을 통해 프로그램의 동작이 변화하는 현상"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "조건 블록(만약 ~라면)의 이해",
      "오브젝트 생성과 이동 블록 사용 경험",
      "판단 블록의 참/거짓 개념 이해"
    ]
  },

  "collision_targets": {
    "objects": {
      "description": "다른 오브젝트와의 충돌 감지",
      "options": "작품에 있는 모든 오브젝트들이 목록에 표시됨",
      "usage": "캐릭터끼리의 충돌, 아이템 수집, 적과의 접촉 등"
    },
    "mouse_pointer": {
      "description": "마우스 포인터와의 충돌 감지",
      "korean_name": "마우스 포인터",
      "usage": "마우스로 오브젝트를 터치하거나 따라다니는 효과"
    },
    "walls": {
      "description": "화면 경계와의 충돌 감지",
      "options": {
        "wall": "모든 벽 (상하좌우)",
        "wall_up": "위쪽 벽",
        "wall_down": "아래쪽 벽",
        "wall_right": "오른쪽 벽",
        "wall_left": "왼쪽 벽"
      },
      "usage": "화면 밖으로 나가지 않게 하거나 벽에 튕기는 효과"
    }
  },

  "usage_examples": [
    {
      "title": "기본 벽 충돌 감지",
      "description": "오브젝트가 화면 경계에 닿았을 때 반대 방향으로 이동",
      "scenario": "공이 벽에 부딪히면 튕기는 효과",
      "blocks": [
        "when_run_button_click",
        "repeat_while_true",
        "  move_direction(10)",
        "  if_condition(<[벽]에 닿았는가?>)",
        "    direction_relative(180)"
      ],
      "explanation": "공이 계속 움직이다가 어떤 벽에든 닿으면 180도 방향을 바꿔서 튕기는 효과를 만듭니다."
    },
    {
      "title": "특정 오브젝트와의 충돌",
      "description": "플레이어가 아이템에 닿았을 때 점수 획득",
      "scenario": "수집 게임에서 코인을 먹는 기능",
      "blocks": [
        "when_run_button_click",
        "repeat_while_true",
        "  if_condition(<[코인]에 닿았는가?>)",
        "    change_variable('점수', 10)",
        "    hide('코인')",
        "    speak_something('코인 획득!')"
      ],
      "explanation": "플레이어가 코인에 닿으면 점수가 10점 올라가고 코인이 사라지며 메시지를 출력합니다."
    },
    {
      "title": "마우스 포인터 추적",
      "description": "마우스에 닿았을 때 반응하는 인터랙티브 오브젝트",
      "scenario": "마우스를 따라다니는 애완동물",
      "blocks": [
        "when_run_button_click",
        "repeat_while_true",
        "  if_condition(<[마우스 포인터]에 닿았는가?>)",
        "    speak_something('만져주셔서 고마워요!')",
        "    wait_second(1)"
      ],
      "explanation": "마우스 포인터가 오브젝트에 닿으면 인사말을 하고 1초 기다립니다."
    },
    {
      "title": "복합 충돌 조건",
      "description": "여러 조건을 조합한 충돌 감지",
      "scenario": "특정 키를 누른 상태에서만 아이템 수집 가능",
      "blocks": [
        "when_run_button_click",
        "repeat_while_true",
        "  if_condition(<<[아이템]에 닿았는가?> 그리고 <[스페이스] 키를 눌렀는가?>>)",
        "    change_variable('점수', 50)",
        "    hide('아이템')",
        "    speak_something('특별 아이템 획득!')"
      ],
      "explanation": "아이템에 닿은 상태에서 스페이스 키를 눌렀을 때만 아이템을 수집할 수 있습니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "충돌 감지가 어떨 때 사용되는지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "일상생활에서 '물건끼리 부딪혔을 때'를 생각해보세요. 공이 벽에 튕기거나, 사람이 문에 닿으면 문이 열리는 것처럼 접촉으로 인한 변화를 만들어요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'판단' 카테고리에서 '[~]에 닿았는가?' 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "드롭다운을 클릭해서 닿을 대상(다른 오브젝트, 마우스, 벽)을 선택할 수 있어요"
        }
      ]
    },
    {
      "situation": "닿았는데도 반응하지 않아요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "오브젝트가 실제로 보이는 상태인지 확인하세요. 숨겨진 오브젝트는 충돌 감지가 되지 않아요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "충돌 감지 블록이 조건 블록 안에 제대로 들어가 있는지 확인해보세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "닿을 대상을 올바르게 선택했는지 드롭다운 메뉴를 다시 확인해보세요"
        }
      ]
    },
    {
      "situation": "벽에 닿아도 튕기지 않아요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "충돌 감지는 닿았는지만 알려주는 센서예요. 튕기려면 방향을 바꾸는 블록을 추가로 사용해야 해요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'움직임' 카테고리의 '방향을 ~도 만큼 바꾸기' 블록을 조건 블록 안에 넣어보세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "또는 '벽에 닿으면 튕기기' 블록을 직접 사용할 수도 있어요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "숨겨진 오브젝트와의 충돌 감지 시도",
      "why_it_happens": "오브젝트가 숨겨진 상태에서는 충돌 감지가 작동하지 않음을 모르고 사용",
      "consequence": "충돌 조건이 절대 참이 되지 않아 관련 블록이 실행되지 않음",
      "solution": "충돌 감지 전에 대상 오브젝트가 보이는 상태인지 확인하기",
      "teaching_moment": "현실에서도 보이지 않는 것과는 부딪힐 수 없는 것처럼, 숨겨진 오브젝트는 충돌하지 않아요."
    },
    {
      "mistake": "충돌 감지만 하고 반응 블록을 빼먹음",
      "why_it_happens": "충돌 감지 블록 자체가 어떤 동작을 한다고 생각하는 오해",
      "consequence": "충돌은 감지되지만 아무 일도 일어나지 않음",
      "solution": "조건 블록 안에 충돌했을 때 실행할 블록들을 반드시 추가하기",
      "teaching_moment": "센서는 상황을 알려주는 역할이고, 실제 행동은 별도로 프로그래밍해야 해요."
    },
    {
      "mistake": "잘못된 충돌 대상 선택",
      "why_it_happens": "드롭다운에서 의도하지 않은 오브젝트나 벽을 선택",
      "consequence": "원하는 충돌이 감지되지 않거나 예상치 못한 충돌이 감지됨",
      "solution": "드롭다운 메뉴를 다시 확인하고 올바른 대상을 선택하기",
      "teaching_moment": "요리할 때 재료를 정확히 확인하는 것처럼, 충돌 대상도 정확히 선택해야 해요."
    },
    {
      "mistake": "계속 반복되는 충돌 반응",
      "why_it_happens": "충돌 상태가 지속되는 동안 계속해서 조건이 참이 되는 것을 고려하지 않음",
      "consequence": "한 번만 실행되어야 할 동작이 계속 반복됨",
      "solution": "충돌 후 오브젝트를 이동시키거나 변수로 상태를 관리하기",
      "teaching_moment": "문이 열린 후에는 다시 문고리를 잡지 않는 것처럼, 한 번 반응한 후의 상태를 관리해야 해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "판단 블록 찾기",
      "instruction": "블록 팔레트에서 '판단' 카테고리를 클릭하세요.",
      "visual_hint": "육각형 모양의 보라색 아이콘을 찾아보세요."
    },
    {
      "step": 2,
      "title": "충돌 감지 블록 선택",
      "instruction": "'[~]에 닿았는가?' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "육각형 모양의 블록으로, 가운데 드롭다운 메뉴가 있어요."
    },
    {
      "step": 3,
      "title": "충돌 대상 설정",
      "instruction": "블록의 드롭다운을 클릭해서 충돌을 감지할 대상을 선택하세요.",
      "visual_hint": "오브젝트, 마우스 포인터, 벽 중에서 선택할 수 있어요."
    },
    {
      "step": 4,
      "title": "조건 블록에 연결",
      "instruction": "충돌 감지 블록을 '만약 ~라면' 블록의 조건 자리에 넣으세요.",
      "visual_hint": "육각형 모양이 딱 맞게 들어가는 자리에 배치하세요."
    },
    {
      "step": 5,
      "title": "반응 블록 추가",
      "instruction": "충돌했을 때 실행할 블록들을 조건 블록 안쪽에 배치하세요.",
      "visual_hint": "말하기, 소리 재생, 방향 바꾸기 등의 블록을 넣을 수 있어요."
    },
    {
      "step": 6,
      "title": "테스트 및 수정",
      "instruction": "프로그램을 실행해서 충돌 감지가 제대로 작동하는지 확인하세요.",
      "visual_hint": "실제로 오브젝트를 이동시켜서 충돌 상황을 만들어보세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "_if",
      "block_name": "만약 ~라면",
      "relationship": "조건 블록",
      "explanation": "충돌 감지 결과에 따라 다른 동작을 실행하기 위해 함께 사용하는 필수 블록"
    },
    {
      "block_id": "bounce_wall",
      "block_name": "벽에 닿으면 튕기기",
      "relationship": "자동 충돌 처리",
      "explanation": "벽 충돌을 자동으로 처리해주는 블록으로, 수동 충돌 감지의 대안"
    },
    {
      "block_id": "boolean_and_or",
      "block_name": "그리고/또는",
      "relationship": "복합 조건",
      "explanation": "여러 충돌 조건을 조합하여 더 복잡한 상호작용 구현"
    },
    {
      "block_id": "coordinate_object",
      "block_name": "오브젝트의 좌표",
      "relationship": "위치 기반 판단",
      "explanation": "정확한 좌표 비교를 통한 대안적 충돌 감지 방법"
    },
    {
      "block_id": "distance_something",
      "block_name": "거리 계산",
      "relationship": "근접 감지",
      "explanation": "직접 접촉 전 근접 상태를 미리 감지하기 위한 보조 블록"
    }
  ],

  "debugging_tips": [
    {
      "problem": "충돌하는데도 반응하지 않아요",
      "possible_causes": [
        "충돌 감지 블록이 조건 블록 밖에 위치",
        "대상 오브젝트가 숨겨진 상태",
        "조건 블록 전체가 실행되지 않는 상태",
        "잘못된 충돌 대상을 선택"
      ],
      "solutions": [
        "충돌 감지 블록이 '만약 ~라면' 블록의 조건 자리에 제대로 들어가 있는지 확인",
        "충돌할 오브젝트들이 모두 보이는 상태인지 확인",
        "전체 블록 조합이 시작 블록과 연결되어 있는지 확인",
        "드롭다운에서 올바른 대상을 선택했는지 재확인"
      ]
    },
    {
      "problem": "계속 같은 동작이 반복돼요",
      "possible_causes": [
        "충돌 상태가 계속 유지되는 동안 조건이 지속적으로 참",
        "충돌 후 오브젝트가 분리되지 않음",
        "반복 블록 안에서 충돌 처리 중"
      ],
      "solutions": [
        "충돌 후 오브젝트를 다른 위치로 이동시키기",
        "변수를 사용해서 이미 처리된 충돌인지 확인하기",
        "적절한 대기 시간을 추가하여 연속 실행 방지하기"
      ]
    },
    {
      "problem": "벽 충돌이 감지되지 않아요",
      "possible_causes": ["오브젝트가 화면 경계를 완전히 벗어남", "이동 속도가 너무 빨라서 벽을 통과", "잘못된 벽 방향을 선택"],
      "solutions": [
        "오브젝트 이동 속도를 줄여보기",
        "특정 벽 방향 대신 '벽' 전체를 선택해보기",
        "'벽에 닿으면 튕기기' 블록을 대안으로 사용하기"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "자동차 충돌 감지 시스템",
      "explanation": "실제 자동차의 센서가 장애물을 감지하면 경고를 주거나 자동으로 멈추는 것처럼, 프로그램에서도 충돌을 감지해서 적절한 반응을 만들어요."
    },
    {
      "analogy": "스마트폰 터치 스크린",
      "explanation": "손가락이 화면에 닿는 것을 감지해서 앱이 반응하는 것처럼, 오브젝트끼리 닿는 것을 감지해서 프로그램이 반응하게 만들어요."
    },
    {
      "analogy": "문의 센서",
      "explanation": "사람이 문에 가까이 가면 자동으로 열리는 센서처럼, 게임에서도 캐릭터가 특정 위치에 닿으면 이벤트가 발생해요."
    },
    {
      "analogy": "당구공의 충돌",
      "explanation": "당구공끼리 부딪히면 방향이 바뀌는 것처럼, 프로그램에서도 오브젝트끼리 충돌하면 움직임이나 상태가 변화해요."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "다중 충돌 감지",
      "description": "'그리고', '또는' 블록을 사용해서 여러 오브젝트와의 충돌을 동시에 확인하기",
      "use_case": "플레이어가 열쇠와 문에 동시에 닿았을 때만 문이 열리는 게임"
    },
    {
      "concept": "조건부 충돌",
      "description": "특정 상황에서만 충돌이 의미가 있도록 추가 조건을 결합하기",
      "use_case": "특정 아이템을 가지고 있을 때만 NPC와 대화할 수 있는 RPG 게임"
    },
    {
      "concept": "충돌 카운터",
      "description": "충돌 횟수를 변수로 저장해서 누적 효과 만들기",
      "use_case": "적을 3번 공격해야 쓰러뜨릴 수 있는 액션 게임"
    },
    {
      "concept": "충돌 쿨다운",
      "description": "충돌 후 일정 시간 동안 다시 충돌하지 않도록 제어하기",
      "use_case": "무적 시간이 있는 게임 캐릭터 구현"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "기본적인 충돌 감지를 사용해서 간단한 상호작용을 구현할 수 있다",
      "example": "공이 벽에 닿으면 멈추기, 캐릭터가 아이템에 닿으면 소리 재생하기"
    },
    {
      "level": "중급",
      "criteria": "다양한 충돌 대상과 복합 조건을 활용해서 게임 로직을 구현할 수 있다",
      "example": "수집 게임에서 점수 시스템 구현, 장애물을 피하는 게임 만들기"
    },
    {
      "level": "고급",
      "criteria": "충돌 감지를 활용해서 복잡한 상호작용과 게임 메커니즘을 설계할 수 있다",
      "example": "멀티 레벨 게임에서 다양한 충돌 이벤트 구현, 물리 시뮬레이션 게임 제작"
    }
  ],

  "technical_notes": {
    "collision_algorithm": "엔트리는 픽셀 단위의 정밀한 충돌 감지를 사용하며, ndgmr.checkPixelCollision 함수를 통해 구현됩니다.",
    "performance_tips": [
      "너무 많은 오브젝트 간 충돌 감지는 성능에 영향을 줄 수 있음",
      "반복 블록 안에서 충돌 감지를 사용할 때는 적절한 대기 시간 추가 권장",
      "숨겨진 오브젝트는 충돌 감지에서 자동으로 제외됨"
    ],
    "limitations": [
      "복제본과의 충돌도 감지 가능하지만 개별 복제본 구분은 어려움",
      "매우 빠른 속도로 이동하는 오브젝트는 벽을 통과할 수 있음",
      "텍스트 박스 오브젝트는 다른 충돌 감지 방식 사용"
    ]
  }
}
