{
  "id": "length_of_string",
  "category": "calc",
  "name": "[텍스트]의 길이",
  "description": "입력한 텍스트의 전체 글자 수를 반환하는 값 블록입니다. 공백, 숫자, 특수문자를 포함한 모든 문자를 세어 총 길이를 숫자로 알려줍니다. 빈 텍스트는 0을 반환합니다.",

  "educational_context": {
    "learning_objectives": [
      "문자열 길이와 글자 수 세기의 개념 이해",
      "텍스트 데이터의 크기와 제한 관리 방법 학습",
      "유효성 검사와 입력 제한 구현 방법 익히기",
      "반복문과 연계한 문자 단위 처리 기법 습득",
      "데이터 처리와 분석의 기초 개념 이해"
    ],
    "key_concepts": [
      {
        "concept": "문자열 길이",
        "explanation": "텍스트에 포함된 모든 문자의 개수로, 공백과 특수문자도 하나의 문자로 계산됩니다."
      },
      {
        "concept": "문자 단위 계산",
        "explanation": "한글, 영어, 숫자, 기호 등 모든 문자를 동일하게 1개로 세는 계산 방식입니다."
      },
      {
        "concept": "빈 문자열",
        "explanation": "아무 글자도 없는 텍스트는 길이가 0이며, 이를 통해 입력 여부를 확인할 수 있습니다."
      },
      {
        "concept": "동적 길이 측정",
        "explanation": "텍스트가 변할 때마다 실시간으로 길이를 측정하여 다양한 처리에 활용할 수 있습니다."
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": ["텍스트와 문자열 개념 이해", "변수 사용 기초 지식", "조건 블록 활용 경험", "기본 연산 블록 사용법"]
  },

  "usage_examples": [
    {
      "title": "글자 수 제한 확인",
      "description": "입력한 메시지가 10글자 이내인지 확인",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('메시지를 입력하세요 (10글자 이내)')",
        "set_variable('글자수', <length_of_string(<get_variable('답변')>)>)",
        "if_condition(<get_variable('글자수') <= 10>)",
        "  speak_something(<join_something('좋아요! ', <join_something(<get_variable('글자수')>, '글자 입력했어요')>)>)",
        "else",
        "  speak_something(<join_something('너무 길어요! ', <join_something(<get_variable('글자수')>, '글자나 입력했어요')>)>)"
      ],
      "explanation": "사용자 입력의 글자 수를 세어 10글자 제한을 확인하고 적절한 피드백을 제공합니다."
    },
    {
      "title": "비밀번호 강도 확인",
      "description": "비밀번호 길이로 보안 강도 평가",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('비밀번호를 입력하세요')",
        "set_variable('비밀번호_길이', <length_of_string(<get_variable('답변')>)>)",
        "if_condition(<get_variable('비밀번호_길이') < 6>)",
        "  set_text('너무 짧아요! 최소 6자 이상 입력하세요')",
        "else_if(<get_variable('비밀번호_길이') < 10>)",
        "  set_text('보통 강도의 비밀번호입니다')",
        "else",
        "  set_text('강력한 비밀번호입니다!')"
      ],
      "explanation": "비밀번호의 길이를 기준으로 보안 강도를 평가하는 시스템입니다."
    },
    {
      "title": "문자 애니메이션",
      "description": "텍스트를 한 글자씩 출력하는 타이핑 효과",
      "blocks": [
        "when_run_button_click",
        "set_variable('메시지', '안녕하세요 엔트리입니다')",
        "set_variable('총길이', <length_of_string(<get_variable('메시지')>)>)",
        "set_variable('현재위치', 1)",
        "repeat_basic(<get_variable('총길이')>)",
        "  set_text(<substring(<get_variable('메시지')>, 1, <get_variable('현재위치')>)>)",
        "  change_variable('현재위치', 1)",
        "  wait_second(0.1)"
      ],
      "explanation": "텍스트의 길이만큼 반복하면서 한 글자씩 화면에 출력하는 타이핑 애니메이션입니다."
    },
    {
      "title": "회문 판별기",
      "description": "앞뒤가 같은 단어인지 확인",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('단어를 입력하세요')",
        "set_variable('원본', <get_variable('답변')>)",
        "set_variable('길이', <length_of_string(<get_variable('원본')>)>)",
        "set_variable('뒤집기', '')",
        "set_variable('i', <get_variable('길이')>)",
        "repeat_basic(<get_variable('길이')>)",
        "  set_variable('뒤집기', <join_something(<get_variable('뒤집기')>, <char_at(<get_variable('원본')>, <get_variable('i')>)>)>)",
        "  change_variable('i', -1)",
        "if_condition(<get_variable('원본') = <get_variable('뒤집기')>>)",
        "  speak_something('회문이에요! 앞뒤가 똑같아요')",
        "else",
        "  speak_something('회문이 아니에요')"
      ],
      "explanation": "텍스트의 길이를 구하고 그 길이만큼 반복하여 글자를 뒤집어서 회문인지 확인합니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "텍스트의 글자 수를 세고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'계산' 카테고리에서 문자열 관련 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[텍스트]의 길이' 블록을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "이 블록은 공백을 포함한 모든 글자의 개수를 세어줘요"
        }
      ]
    },
    {
      "situation": "입력이 비어있는지 확인하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "빈 텍스트의 길이는 0이에요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'흐름' 카테고리의 조건 블록과 함께 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "길이 = 0 조건으로 빈 입력을 확인할 수 있어요"
        }
      ]
    },
    {
      "situation": "글자 수만큼 반복하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "텍스트 길이를 반복 횟수로 사용할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'흐름' 카테고리의 반복 블록에 길이 값을 넣으세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "'[길이]번 반복하기' 블록에 텍스트 길이를 넣어보세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "공백을 글자로 세지 않을 것으로 기대",
      "why_it_happens": "눈에 보이지 않는 문자를 무시할 것으로 생각",
      "consequence": "예상보다 큰 길이 값이 나옴",
      "solution": "공백도 하나의 문자로 계산된다는 것을 이해하기",
      "teaching_moment": "컴퓨터에게 공백도 중요한 문자예요. 스페이스바도 한 글자로 세어요."
    },
    {
      "mistake": "한글을 2글자로 셀 것으로 예상",
      "why_it_happens": "일부 프로그래밍 언어의 바이트 단위 계산과 혼동",
      "consequence": "한글 텍스트의 길이를 잘못 예측",
      "solution": "엔트리는 모든 문자를 1개로 센다는 것을 기억",
      "teaching_moment": "엔트리에서는 'A'도 '가'도 '😊'도 모두 1글자로 세어요."
    },
    {
      "mistake": "길이를 문자열로 사용하려고 함",
      "why_it_happens": "숫자와 문자열의 차이를 이해하지 못함",
      "consequence": "연산이나 비교가 제대로 작동하지 않음",
      "solution": "길이는 숫자 값이므로 숫자 연산에 사용",
      "teaching_moment": "길이는 숫자예요. 3이라는 숫자로 계산할 수 있어요."
    },
    {
      "mistake": "null이나 undefined 처리를 하지 않음",
      "why_it_happens": "입력이 없는 경우를 고려하지 않음",
      "consequence": "빈 입력에서 오류가 발생할 수 있음",
      "solution": "항상 입력이 있는지 먼저 확인하기",
      "teaching_moment": "사용자가 아무것도 입력하지 않을 수도 있으니 준비해야 해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 카테고리 찾기",
      "instruction": "블록 팔레트에서 초록색 '계산' 카테고리를 클릭하세요.",
      "visual_hint": "계산기 모양의 아이콘이 있는 초록색 카테고리입니다."
    },
    {
      "step": 2,
      "title": "길이 블록 선택",
      "instruction": "'[텍스트]의 길이' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "텍스트 입력 자리가 하나 있는 둥근 값 블록입니다."
    },
    {
      "step": 3,
      "title": "텍스트 입력",
      "instruction": "블록의 텍스트 자리에 측정할 문자열을 입력하거나 변수를 연결하세요.",
      "visual_hint": "직접 텍스트를 입력하거나 답변, 변수 등을 넣을 수 있습니다."
    },
    {
      "step": 4,
      "title": "결과 활용",
      "instruction": "반환된 길이 값을 변수에 저장하거나 다른 블록에서 직접 사용하세요.",
      "visual_hint": "조건 블록, 반복 블록, 연산 블록 등에 활용할 수 있습니다."
    },
    {
      "step": 5,
      "title": "조건 처리 추가",
      "instruction": "필요하다면 길이에 따른 조건 처리를 추가하세요.",
      "visual_hint": "길이가 0인지, 특정 값보다 큰지 등을 확인할 수 있습니다."
    }
  ],

  "related_blocks": [
    {
      "block_id": "substring",
      "relationship": "부분 문자열",
      "explanation": "길이 정보를 활용해서 텍스트의 일부를 추출할 때 함께 사용"
    },
    {
      "block_id": "char_at",
      "relationship": "특정 위치 문자",
      "explanation": "길이 범위 내에서 특정 위치의 문자를 가져올 때 사용"
    },
    {
      "block_id": "join_something",
      "relationship": "문자열 결합",
      "explanation": "길이 정보와 함께 메시지를 만들 때 사용"
    },
    {
      "block_id": "repeat_basic",
      "relationship": "반복 횟수",
      "explanation": "텍스트 길이만큼 반복할 때 길이 값을 반복 횟수로 사용"
    },
    {
      "block_id": "if_condition",
      "relationship": "길이 조건",
      "explanation": "텍스트 길이에 따른 조건 처리를 할 때 함께 사용"
    },
    {
      "block_id": "calc_operation",
      "relationship": "길이 연산",
      "explanation": "길이 값을 가지고 계산이나 비교를 할 때 사용"
    }
  ],

  "debugging_tips": [
    {
      "problem": "길이가 예상과 달라요",
      "possible_causes": ["공백이 포함되어 있음", "보이지 않는 특수문자 존재", "줄바꿈 문자가 포함됨", "앞뒤 공백이 있음"],
      "solutions": [
        "텍스트를 출력해서 정확한 내용 확인",
        "앞뒤 공백을 제거하는 처리 추가",
        "각 문자를 하나씩 확인해보기",
        "변수에 저장해서 정확한 값 확인"
      ]
    },
    {
      "problem": "빈 텍스트인데 길이가 0이 아니에요",
      "possible_causes": ["공백만 있는 텍스트", "보이지 않는 문자 존재", "초기값이 설정되어 있음"],
      "solutions": ["trim 처리로 앞뒤 공백 제거", "변수 초기화 확인", "입력 받기 전 변수 비우기"]
    },
    {
      "problem": "길이를 반복 횟수로 사용할 때 오류",
      "possible_causes": ["길이가 0인 경우", "길이가 너무 큰 경우", "길이 값이 숫자가 아님"],
      "solutions": ["길이가 0보다 큰지 먼저 확인", "최대 반복 횟수 제한 설정", "길이 값이 올바른지 확인"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "SNS 글자 수 제한",
      "explanation": "트위터의 280자 제한처럼 글자 수를 세어 제한하는 기능과 같습니다."
    },
    {
      "analogy": "문자 메시지 요금",
      "explanation": "SMS 문자가 80자를 넘으면 장문으로 요금이 올라가는 것처럼 길이를 확인합니다."
    },
    {
      "analogy": "책의 쪽수",
      "explanation": "책에 몇 글자가 들어있는지 세는 것처럼 텍스트의 전체 크기를 측정합니다."
    },
    {
      "analogy": "줄자로 길이 재기",
      "explanation": "줄자로 물건의 길이를 재는 것처럼 텍스트의 길이를 측정합니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "실제 글자 수 세기",
      "description": "공백을 제외한 실제 문자만 세는 시스템",
      "use_case": "에세이 글자 수 세기, 공백 제외 통계"
    },
    {
      "concept": "단어 수 세기",
      "description": "글자가 아닌 단어 단위로 세는 고급 기능",
      "use_case": "작문 단어 수 제한, 읽기 시간 예측"
    },
    {
      "concept": "문자 종류별 통계",
      "description": "한글, 영문, 숫자, 특수문자를 구분해서 세는 시스템",
      "use_case": "비밀번호 복잡도 검사, 언어 감지"
    },
    {
      "concept": "동적 입력 제한",
      "description": "실시간으로 입력 가능한 남은 글자 수를 표시하는 시스템",
      "use_case": "폼 입력 제한, 실시간 피드백, 프로그레스 바"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "텍스트의 길이를 구하고 간단한 조건 확인을 할 수 있다",
      "example": "글자 수 세기, 빈 입력 확인, 길이 제한 확인"
    },
    {
      "level": "중급",
      "criteria": "길이 정보를 활용해서 텍스트를 처리하고 제어할 수 있다",
      "example": "글자 수 제한 시스템, 타이핑 애니메이션, 비밀번호 강도 확인"
    },
    {
      "level": "고급",
      "criteria": "길이를 기반으로 복잡한 문자열 처리와 분석 시스템을 구현할 수 있다",
      "example": "회문 판별, 텍스트 통계 분석, 동적 입력 제한 시스템"
    }
  ]
}
