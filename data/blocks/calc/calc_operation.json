{
  "id": "calc_operation",
  "category": "calc",
  "name": "[~]의 [제곱근/절댓값/반올림/버림/올림 등] 값",
  "description": "숫자에 다양한 수학 연산(제곱, 제곱근, 절댓값, 반올림, 삼각함수 등)을 적용하는 블록입니다. 고급 수학 계산이나 정밀한 수치 처리가 필요할 때 사용합니다.",

  "educational_context": {
    "learning_objectives": [
      "고급 수학 연산의 프로그래밍 적용 학습",
      "수치 데이터의 정밀한 처리 방법 이해",
      "실생활 문제에서 수학적 모델링 능력 개발",
      "삼각함수와 로그 등 고등 수학의 활용 습득",
      "데이터 정규화와 범위 조정 기법 학습"
    ],
    "key_concepts": [
      {
        "concept": "제곱과 제곱근(Square and Square Root)",
        "explanation": "제곱은 수를 자기 자신과 곱하는 것, 제곱근은 그 역연산으로 거리 계산, 면적 계산 등에 활용"
      },
      {
        "concept": "절댓값(Absolute Value)",
        "explanation": "수의 크기만 나타내고 부호를 제거하는 연산으로, 거리나 차이를 계산할 때 필수적"
      },
      {
        "concept": "반올림 연산(Rounding Operations)",
        "explanation": "반올림, 버림(floor), 올림(ceiling)을 통해 소수점 값을 정수로 변환하거나 원하는 정밀도로 조정"
      },
      {
        "concept": "삼각함수(Trigonometric Functions)",
        "explanation": "sin, cos, tan과 그 역함수들로 각도와 길이의 관계를 계산하여 회전, 진동, 파동 등을 표현"
      },
      {
        "concept": "로그함수(Logarithmic Functions)",
        "explanation": "지수의 역연산으로 지수적 증가/감소 패턴이나 데이터 스케일 조정에 사용"
      },
      {
        "concept": "팩토리얼(Factorial)",
        "explanation": "1부터 n까지의 모든 자연수를 곱한 값으로 순열, 조합 계산에 활용"
      }
    ],
    "difficulty_level": "고급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "기본 사칙연산 이해",
      "중학교 수준의 수학 지식",
      "각도의 개념 (도와 라디안)",
      "변수와 계산 블록 사용 경험"
    ]
  },

  "usage_examples": [
    {
      "title": "거리 계산기",
      "description": "두 점 사이의 직선 거리를 피타고라스 정리로 계산",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'첫 번째 점의 x좌표를 입력하세요' 묻고 기다리기",
        "x1 변수를 (답변)으로 정하기",
        "'첫 번째 점의 y좌표를 입력하세요' 묻고 기다리기",
        "y1 변수를 (답변)으로 정하기",
        "'두 번째 점의 x좌표를 입력하세요' 묻고 기다리기",
        "x2 변수를 (답변)으로 정하기",
        "'두 번째 점의 y좌표를 입력하세요' 묻고 기다리기",
        "y2 변수를 (답변)으로 정하기",
        "x차이 변수를 (x2) - (x1)으로 정하기",
        "y차이 변수를 (y2) - (y1)으로 정하기",
        "거리제곱 변수를 ((x차이)의 제곱 값) + ((y차이)의 제곱 값)으로 정하기",
        "거리 변수를 (거리제곱)의 제곱근 값으로 정하기",
        "'두 점 사이의 거리는 ' + (거리) + '입니다!' 말하기"
      ],
      "explanation": "피타고라스 정리 a² + b² = c²를 사용하여 두 점 사이의 직선 거리를 계산합니다."
    },
    {
      "title": "온도 범위 조정기",
      "description": "온도 값을 적절한 범위로 반올림하여 표시",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "계속 반복하기",
        "  실제온도 변수를 (-10)부터 (40)까지의 무작위 수로 정하기",
        "  표시온도 변수를 (실제온도)의 반올림 값으로 정하기",
        "  '현재 온도: ' + (표시온도) + '°C' 말하기",
        "  2초 기다리기"
      ],
      "explanation": "센서에서 받은 정밀한 온도값을 반올림하여 사용자에게 보기 좋게 표시합니다."
    },
    {
      "title": "원형 운동 시뮬레이션",
      "description": "삼각함수를 사용한 원형 경로 움직임",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "각도 변수를 0으로 정하기",
        "계속 반복하기",
        "  x좌표를 (100) × ((각도)의 cos 값)으로 정하기",
        "  y좌표를 (100) × ((각도)의 sin 값)으로 정하기",
        "  각도 변수를 5만큼 바꾸기",
        "  0.1초 기다리기"
      ],
      "explanation": "삼각함수 sin과 cos를 사용하여 캐릭터가 원형 경로를 따라 움직이도록 합니다."
    },
    {
      "title": "절댓값 차이 게임",
      "description": "두 숫자의 차이를 절댓값으로 계산하는 게임",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "점수 변수를 0으로 정하기",
        "5번 반복하기",
        "  목표값 변수를 (1)부터 (100)까지의 무작위 수로 정하기",
        "  '목표값 ' + (목표값) + '에 가까운 수를 입력하세요' 묻고 기다리기",
        "  입력값 변수를 (답변)으로 정하기",
        "  차이 변수를 ((입력값) - (목표값))의 절댓값으로 정하기",
        "  만약 (차이) < (10) 라면",
        "    점수 변수를 10만큼 바꾸기",
        "    '좋아요! 차이: ' + (차이) 말하기",
        "  아니라면",
        "    '아쉬워요! 차이: ' + (차이) 말하기",
        "'최종 점수: ' + (점수) + '점!' 말하기"
      ],
      "explanation": "목표값과 사용자 입력값의 차이를 절댓값으로 계산하여 정확도를 평가하는 게임입니다."
    },
    {
      "title": "성장률 계산기",
      "description": "지수적 성장을 모델링하는 시뮬레이션",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'초기값을 입력하세요' 묻고 기다리기",
        "초기값 변수를 (답변)으로 정하기",
        "'성장률(%)을 입력하세요' 묻고 기다리기",
        "성장률 변수를 (답변)으로 정하기",
        "시간 변수를 0으로 정하기",
        "10번 반복하기",
        "  현재값 변수를 (초기값) × ((1 + (성장률) / 100)의 (시간) 제곱 값)으로 정하기",
        "  표시값 변수를 (현재값)의 반올림 값으로 정하기",
        "  (시간) + '년 후: ' + (표시값) 말하기",
        "  시간 변수를 1만큼 바꾸기",
        "  1초 기다리기"
      ],
      "explanation": "복리 계산처럼 지수적으로 증가하는 값을 계산하고 시각화합니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "고급 수학 연산을 어떻게 사용하나요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'계산' 카테고리(초록색 계산기 모양 아이콘)를 클릭해보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[~]의 [연산] 값' 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "첫 번째 칸에 숫자를 넣고, 드롭다운에서 원하는 수학 연산을 선택하세요"
        }
      ]
    },
    {
      "situation": "거리를 정확하게 계산하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "피타고라스 정리를 사용해요: 거리 = √((x차이)² + (y차이)²)"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "제곱 연산으로 x차이와 y차이를 각각 제곱한 후 더하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "마지막에 제곱근 연산을 사용해서 최종 거리를 구하세요"
        }
      ]
    },
    {
      "situation": "원형으로 움직이는 애니메이션을 만들고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "삼각함수 sin과 cos를 사용하면 원형 움직임을 만들 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "x = 반지름 × cos(각도), y = 반지름 × sin(각도) 공식을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "각도를 조금씩 증가시키면서 반복하면 원형 경로를 만들 수 있어요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "삼각함수에서 각도 단위를 혼동",
      "why_it_happens": "도(degree)와 라디안(radian) 단위를 구분하지 못함",
      "consequence": "예상과 전혀 다른 결과나 이상한 움직임",
      "solution": "엔트리에서는 각도를 도(degree) 단위로 사용한다는 것을 기억",
      "teaching_moment": "360도 = 2π 라디안이에요. 엔트리에서는 우리가 일상에서 쓰는 도 단위를 사용해요."
    },
    {
      "mistake": "제곱근에 음수 입력",
      "why_it_happens": "실수 범위에서 음수의 제곱근은 정의되지 않는다는 것을 모름",
      "consequence": "오류 발생이나 예상치 못한 결과",
      "solution": "제곱근을 사용하기 전에 값이 0 이상인지 확인하는 조건 추가",
      "teaching_moment": "음수에서는 제곱근을 구할 수 없어요. 거리 계산에서는 절댓값을 먼저 사용하거나 제곱 후 제곱근을 구하세요."
    },
    {
      "mistake": "반올림과 버림, 올림을 구분하지 못함",
      "why_it_happens": "각 연산의 정확한 동작 방식을 이해하지 못함",
      "consequence": "원하지 않는 형태의 결과값",
      "solution": "반올림은 0.5 이상이면 올림, 버림은 항상 아래로, 올림은 항상 위로 간다는 것을 이해",
      "teaching_moment": "3.7을 버림하면 3, 올림하면 4, 반올림하면 4가 나와요. 3.2는 버림 3, 올림 4, 반올림 3이에요."
    },
    {
      "mistake": "팩토리얼에 너무 큰 수 입력",
      "why_it_happens": "팩토리얼이 매우 빠르게 증가한다는 것을 모름",
      "consequence": "계산 시간이 매우 오래 걸리거나 오버플로우 발생",
      "solution": "팩토리얼은 작은 수(보통 10 이하)에서만 사용하고, 큰 수는 미리 제한",
      "teaching_moment": "10! = 3,628,800이고 20!은 이미 천조 단위예요. 팩토리얼은 아주 빠르게 커져요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 블록 찾기",
      "instruction": "블록 팔레트에서 '계산' 카테고리(초록색 계산기 모양)를 클릭하세요.",
      "visual_hint": "초록색 아이콘이고 계산기나 숫자 모양을 하고 있어요."
    },
    {
      "step": 2,
      "title": "수학 연산 블록 선택",
      "instruction": "'[~]의 [연산] 값' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "둥근 모양의 블록으로 드롭다운 메뉴가 있어요."
    },
    {
      "step": 3,
      "title": "입력값 설정",
      "instruction": "첫 번째 빈 칸에 계산할 숫자나 변수를 넣으세요.",
      "visual_hint": "숫자, 변수, 또는 다른 계산 블록을 넣을 수 있어요."
    },
    {
      "step": 4,
      "title": "연산 선택",
      "instruction": "드롭다운에서 원하는 수학 연산을 선택하세요.",
      "visual_hint": "제곱, 제곱근, 절댓값, 반올림, 삼각함수 등 다양한 옵션이 있어요."
    },
    {
      "step": 5,
      "title": "결과 활용",
      "instruction": "완성된 블록을 변수에 저장하거나 다른 계산에 사용하세요.",
      "visual_hint": "둥근 모양의 결과 블록은 숫자가 들어갈 자리에 넣을 수 있어요."
    },
    {
      "step": 6,
      "title": "범위 확인",
      "instruction": "특정 연산(제곱근, 로그 등)은 입력값 범위를 확인하고 사용하세요.",
      "visual_hint": "제곱근은 양수, 로그는 양수, 역삼각함수는 -1~1 범위에서 사용해야 해요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "calc_basic",
      "block_name": "[~] [연산자] [~]",
      "relationship": "기본 연산 확장",
      "explanation": "사칙연산을 넘어선 고급 수학 연산으로 복잡한 계산 구현"
    },
    {
      "block_id": "distance_something",
      "block_name": "[오브젝트/마우스]까지의 거리",
      "relationship": "거리 계산 단순화",
      "explanation": "복잡한 제곱근 계산 없이 바로 거리를 구할 수 있는 편의 블록"
    },
    {
      "block_id": "set_variable",
      "block_name": "[변수]를 [값]으로 정하기",
      "relationship": "계산 결과 저장",
      "explanation": "복잡한 수학 연산 결과를 변수에 저장하여 재사용"
    },
    {
      "block_id": "_if",
      "block_name": "만약 ~라면",
      "relationship": "조건부 계산",
      "explanation": "입력값 범위를 확인한 후 안전하게 수학 연산 수행"
    },
    {
      "block_id": "coordinate_mouse",
      "block_name": "마우스 포인터의 [x/y] 좌표",
      "relationship": "좌표 기반 계산",
      "explanation": "마우스 좌표와 수학 연산을 조합한 인터랙티브 계산"
    },
    {
      "block_id": "repeat_inf",
      "block_name": "계속 반복하기",
      "relationship": "연속 계산",
      "explanation": "삼각함수를 사용한 애니메이션이나 시뮬레이션에서 반복 계산"
    },
    {
      "block_id": "boolean_basic_operator",
      "block_name": "[~] [비교연산자] [~]",
      "relationship": "계산 결과 비교",
      "explanation": "수학 연산 결과를 특정 값과 비교하여 조건 판단"
    }
  ],

  "debugging_tips": [
    {
      "problem": "수학 연산 결과가 이상해요",
      "possible_causes": ["입력값이 해당 연산의 정의 범위를 벗어남", "각도 단위를 잘못 이해함", "연산 순서나 우선순위 문제"],
      "solutions": [
        "제곱근은 양수, 로그는 양수만 입력하는지 확인",
        "삼각함수는 도(degree) 단위 사용 확인",
        "복잡한 계산은 단계별로 나누어서 중간 결과 확인"
      ]
    },
    {
      "problem": "삼각함수로 만든 움직임이 이상해요",
      "possible_causes": ["각도 증가량이 너무 크거나 작음", "반지름이나 중심점 설정 오류", "각도 범위를 제한하지 않음"],
      "solutions": [
        "각도를 작은 값(1~10도)씩 증가시켜서 부드러운 움직임 구현",
        "중심점 좌표와 반지름 값을 명확히 설정",
        "각도가 360도를 넘으면 0으로 초기화하여 순환 구조 만들기"
      ]
    },
    {
      "problem": "반올림 결과가 예상과 달라요",
      "possible_causes": [
        "반올림, 버림, 올림의 차이를 정확히 이해하지 못함",
        "음수에서의 반올림 동작 차이",
        "부동소수점 정밀도 문제"
      ],
      "solutions": [
        "각 연산의 정확한 동작을 간단한 예시로 먼저 테스트",
        "음수와 양수에서 각각 테스트해보기",
        "매우 작은 소수점은 먼저 적절한 배수로 확대 후 연산"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "공학용 계산기",
      "explanation": "과학자나 엔지니어가 사용하는 고급 계산기의 기능들을 프로그래밍에서 활용하는 것과 같습니다."
    },
    {
      "analogy": "건축 설계",
      "explanation": "건물을 설계할 때 삼각함수로 각도를 계산하고, 제곱근으로 거리를 구하는 것처럼 정밀한 계산이 필요합니다."
    },
    {
      "analogy": "게임 물리 엔진",
      "explanation": "게임에서 포물선 운동, 충돌 감지, 회전 등을 구현할 때 다양한 수학 함수를 사용합니다."
    },
    {
      "analogy": "금융 계산",
      "explanation": "복리 계산, 투자 수익률 계산 등에서 지수 함수와 로그 함수를 활용하는 것과 같습니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "물리 시뮬레이션",
      "description": "중력, 포물선 운동, 진동 등 물리 현상을 수학적으로 모델링",
      "use_case": "공 던지기 게임, 진자 운동, 파동 시뮬레이션"
    },
    {
      "concept": "데이터 시각화",
      "description": "수학 함수를 이용한 그래프, 차트, 패턴 생성",
      "use_case": "함수 그래프 그리기, 통계 차트, 프랙탈 패턴"
    },
    {
      "concept": "신호 처리",
      "description": "삼각함수를 활용한 주기적 신호나 파형 생성",
      "use_case": "음성 합성, 음악 생성, 파동 효과"
    },
    {
      "concept": "수치 해석",
      "description": "복잡한 수학 문제를 근사적으로 해결하는 알고리즘",
      "use_case": "방정식 해 구하기, 최적화 문제, 확률 계산"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "기본적인 수학 연산(제곱, 제곱근, 절댓값, 반올림)을 활용할 수 있다",
      "example": "거리 계산기, 온도 반올림, 절댓값 차이 계산"
    },
    {
      "level": "중급",
      "criteria": "삼각함수와 로그를 활용하여 복잡한 계산과 패턴을 구현할 수 있다",
      "example": "원형 운동 애니메이션, 지수적 성장 모델링"
    },
    {
      "level": "고급",
      "criteria": "고급 수학을 활용한 시뮬레이션과 과학적 모델링을 설계할 수 있다",
      "example": "물리 시뮬레이션, 신호 처리, 수치 해석 알고리즘"
    }
  ]
}
