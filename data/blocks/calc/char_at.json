{
  "id": "char_at",
  "category": "calc",
  "name": "[문자]에서 [번호]번째 글자",
  "description": "문자열에서 지정한 위치에 있는 글자 하나를 추출하는 블록입니다. 문자열의 첫 번째 글자는 1번이며, 지정한 번호 위치의 글자만 반환합니다.",

  "educational_context": {
    "learning_objectives": [
      "문자열의 인덱스와 위치 개념 이해",
      "문자열을 개별 문자로 분해하는 방법 학습",
      "순서와 위치를 활용한 데이터 접근 방법 습득",
      "문자열 탐색과 분석 기술 체험",
      "프로그래밍에서 배열과 인덱스의 기본 원리 이해"
    ],
    "key_concepts": [
      {
        "concept": "문자열 인덱스(String Index)",
        "explanation": "문자열에서 각 글자의 위치를 나타내는 번호로, 첫 번째 글자부터 1, 2, 3... 순서로 매겨짐"
      },
      {
        "concept": "문자 추출(Character Extraction)",
        "explanation": "긴 문자열에서 특정 위치의 글자만을 선택적으로 가져오는 문자열 처리 기법"
      },
      {
        "concept": "배열 접근(Array Access)",
        "explanation": "순서가 있는 데이터에서 특정 위치의 요소에 접근하는 프로그래밍의 기본 개념"
      },
      {
        "concept": "경계 검사(Boundary Check)",
        "explanation": "문자열의 길이를 벗어난 위치에 접근하지 않도록 하는 안전한 프로그래밍 방법"
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": ["기본적인 문자열 개념 이해", "숫자와 순서 개념 파악", "문자열 길이 블록 사용 경험", "반복문과 변수 사용법"]
  },

  "usage_examples": [
    {
      "title": "문자열 분석하기",
      "description": "단어의 각 글자를 하나씩 확인",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('단어를 입력하세요')",
        "set_variable('단어', (답변))",
        "set_variable('길이', length_of_string((단어)))",
        "set_variable('위치', 1)",
        "repeat_basic((길이))",
        "  set_variable('글자', char_at((단어), (위치)))",
        "  dialog((위치) + '번째 글자: ' + (글자))",
        "  wait_second(1)",
        "  set_variable('위치', (위치) + 1)"
      ],
      "explanation": "사용자가 입력한 단어의 각 글자를 순서대로 하나씩 보여주는 프로그램입니다."
    },
    {
      "title": "특정 글자 찾기",
      "description": "문자열에서 원하는 글자가 몇 번째에 있는지 찾기",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('문장을 입력하세요')",
        "set_variable('문장', (답변))",
        "ask_and_wait('찾을 글자를 입력하세요')",
        "set_variable('찾을글자', (답변))",
        "set_variable('길이', length_of_string((문장)))",
        "set_variable('위치', 1)",
        "set_variable('찾음', '아니오')",
        "repeat_basic((길이))",
        "  if_condition(char_at((문장), (위치)) = (찾을글자))",
        "    dialog('찾았습니다! ' + (위치) + '번째에 있어요.')",
        "    set_variable('찾음', '예')",
        "    stop_repeat",
        "  set_variable('위치', (위치) + 1)",
        "if_condition((찾음) = '아니오')",
        "  dialog('찾는 글자가 없습니다.')"
      ],
      "explanation": "문장에서 특정 글자를 찾아서 몇 번째 위치에 있는지 알려주는 검색 프로그램입니다."
    },
    {
      "title": "문자 분류 게임",
      "description": "글자 종류에 따라 다른 동작 수행",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('영어 단어를 입력하세요')",
        "set_variable('단어', (답변))",
        "set_variable('모음개수', 0)",
        "set_variable('자음개수', 0)",
        "set_variable('길이', length_of_string((단어)))",
        "set_variable('위치', 1)",
        "repeat_basic((길이))",
        "  set_variable('글자', char_at((단어), (위치)))",
        "  if_condition(((글자) = 'a') 또는 ((글자) = 'e') 또는 ((글자) = 'i') 또는 ((글자) = 'o') 또는 ((글자) = 'u'))",
        "    set_variable('모음개수', (모음개수) + 1)",
        "  else",
        "    set_variable('자음개수', (자음개수) + 1)",
        "  set_variable('위치', (위치) + 1)",
        "dialog('모음: ' + (모음개수) + '개, 자음: ' + (자음개수) + '개')"
      ],
      "explanation": "영어 단어에서 각 글자를 검사하여 모음과 자음의 개수를 세는 프로그램입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "몇 번째 글자부터 시작하는지 헷갈려요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "엔트리에서는 첫 번째 글자가 1번이에요. 0번이 아니라 1번부터 시작해요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'Hello'라는 단어에서 1번째는 'H', 2번째는 'e', 3번째는 'l'이에요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "사람이 세는 방식과 같아요. 첫 번째, 두 번째, 세 번째..."
        }
      ]
    },
    {
      "situation": "문자열 길이를 벗어나면 어떻게 되나요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "문자열 길이보다 큰 번호나 0보다 작은 번호를 사용하면 오류가 발생해요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'문자의 길이' 블록으로 먼저 문자열 길이를 확인하고 그 범위 안에서 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "조건 블록으로 범위를 확인한 후에 글자를 추출하면 안전해요"
        }
      ]
    },
    {
      "situation": "추출한 글자를 어떻게 활용해야 할지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "추출한 글자는 하나의 문자로, 다른 문자와 비교하거나 합치거나 변수에 저장할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "조건 블록에서 특정 글자와 비교하거나, 문자 합치기 블록으로 새로운 단어를 만들 수 있어요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "반복문과 함께 사용하면 문자열의 모든 글자를 하나씩 처리할 수 있어요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "0번째 글자부터 시작한다고 생각",
      "why_it_happens": "다른 프로그래밍 언어의 0-based 인덱스에 익숙하거나 혼동",
      "consequence": "첫 번째 글자를 놓치거나 오류 발생",
      "solution": "엔트리에서는 1번째부터 시작한다는 것을 기억하고 사용",
      "teaching_moment": "사람이 순서를 셀 때와 같아요. 첫 번째, 두 번째, 세 번째... 이렇게 1부터 시작해요."
    },
    {
      "mistake": "문자열 길이를 초과하는 위치 지정",
      "why_it_happens": "문자열의 실제 길이를 확인하지 않고 임의의 큰 숫자 사용",
      "consequence": "프로그램 오류 발생 및 중단",
      "solution": "문자열 길이 블록으로 먼저 길이를 확인하고 그 범위 내에서 사용",
      "teaching_moment": "책에서 100페이지밖에 없는데 200페이지를 펼칠 수 없는 것처럼, 문자열도 범위가 있어요."
    },
    {
      "mistake": "추출한 글자를 저장하지 않고 사용",
      "why_it_happens": "블록의 결과를 변수에 저장하지 않고 바로 사용하려고 시도",
      "consequence": "같은 위치의 글자를 반복해서 추출하게 되어 비효율적",
      "solution": "추출한 글자를 변수에 저장해서 재사용하거나 바로 다른 블록에서 활용",
      "teaching_moment": "중요한 것은 메모해두는 것처럼, 추출한 글자도 변수에 저장해두면 편해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 블록 카테고리 선택",
      "instruction": "블록 팔레트에서 '계산' 카테고리를 클릭하세요.",
      "visual_hint": "초록색 계산기 모양 아이콘을 찾아보세요."
    },
    {
      "step": 2,
      "title": "글자 추출 블록 찾기",
      "instruction": "'[문자]에서 [번호]번째 글자' 블록을 찾아서 드래그하세요.",
      "visual_hint": "문자열 관련 블록들이 모여있는 부분에서 찾을 수 있어요."
    },
    {
      "step": 3,
      "title": "대상 문자열 입력",
      "instruction": "첫 번째 칸에 글자를 추출할 문자열이나 변수를 입력하세요.",
      "visual_hint": "직접 텍스트를 입력하거나 다른 블록을 연결할 수 있어요."
    },
    {
      "step": 4,
      "title": "위치 번호 입력",
      "instruction": "두 번째 칸에 추출하고 싶은 글자의 위치 번호를 입력하세요.",
      "visual_hint": "1번이 첫 번째 글자이고, 문자열 길이를 벗어나지 않게 주의하세요."
    },
    {
      "step": 5,
      "title": "결과 활용",
      "instruction": "추출된 글자를 변수에 저장하거나 다른 블록에서 바로 사용하세요.",
      "visual_hint": "결과는 한 글자짜리 문자열이에요."
    },
    {
      "step": 6,
      "title": "테스트 및 확인",
      "instruction": "프로그램을 실행해보고 원하는 위치의 글자가 추출되는지 확인하세요.",
      "visual_hint": "간단한 단어로 먼저 테스트해보세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "length_of_string",
      "relationship": "문자열 길이 확인",
      "explanation": "글자를 추출하기 전에 문자열의 전체 길이를 확인하여 안전한 범위 설정"
    },
    {
      "block_id": "substring",
      "relationship": "여러 글자 추출",
      "explanation": "한 글자가 아닌 여러 글자를 연속으로 추출할 때 사용하는 확장 기능"
    },
    {
      "block_id": "combine_something",
      "relationship": "글자 조합",
      "explanation": "추출한 여러 글자들을 다시 합쳐서 새로운 문자열 생성"
    },
    {
      "block_id": "repeat_basic",
      "relationship": "순차 처리",
      "explanation": "문자열의 모든 글자를 하나씩 순서대로 처리할 때 함께 사용"
    },
    {
      "block_id": "_if",
      "relationship": "조건부 처리",
      "explanation": "추출한 글자가 특정 조건을 만족할 때만 특별한 처리 수행"
    }
  ],

  "debugging_tips": [
    {
      "problem": "오류가 발생하면서 프로그램이 멈춰요",
      "possible_causes": ["문자열 길이를 벗어난 위치 지정", "0이나 음수 위치 사용", "빈 문자열에서 글자 추출 시도"],
      "solutions": ["문자열 길이 블록으로 먼저 길이 확인", "1부터 시작하는 양수만 사용", "문자열이 비어있지 않은지 먼저 확인"]
    },
    {
      "problem": "원하는 글자가 나오지 않아요",
      "possible_causes": ["위치 번호를 잘못 계산", "문자열의 시작 위치 혼동", "변수에 다른 값이 저장됨"],
      "solutions": ["1번부터 시작한다는 것을 기억하고 위치 재계산", "간단한 예시로 먼저 테스트해보기", "변수 값을 출력해서 확인"]
    },
    {
      "problem": "반복문에서 모든 글자가 처리되지 않아요",
      "possible_causes": ["반복 횟수와 문자열 길이 불일치", "위치 변수가 제대로 증가하지 않음", "반복문 중간에 예기치 않은 중단"],
      "solutions": [
        "문자열 길이만큼 정확히 반복하도록 설정",
        "위치 변수를 매번 1씩 증가시키기",
        "각 단계를 출력해서 진행 상황 확인"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "책의 페이지 넘기기",
      "explanation": "책에서 특정 페이지를 펼쳐보는 것처럼, 문자열에서 특정 위치의 글자를 찾아보는 과정입니다."
    },
    {
      "analogy": "주소 찾기",
      "explanation": "아파트에서 특정 동, 호수를 찾아가는 것처럼 문자열에서 특정 위치의 글자를 정확히 찾아가는 것입니다."
    },
    {
      "analogy": "악보 읽기",
      "explanation": "악보에서 특정 마디의 음표를 하나씩 읽는 것처럼, 문자열에서 각 위치의 글자를 하나씩 읽어내는 과정입니다."
    },
    {
      "analogy": "DNA 염기서열 분석",
      "explanation": "생물학에서 DNA의 특정 위치에 있는 염기를 확인하는 것처럼, 문자열의 특정 위치 글자를 분석하는 과정입니다."
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "문자열에서 지정한 위치의 글자를 올바르게 추출하고, 1번부터 시작하는 인덱스 체계를 이해할 수 있다"
    },
    {
      "level": "중급",
      "criteria": "반복문과 조건문을 활용하여 문자열의 모든 글자를 순차적으로 처리하고, 특정 조건에 맞는 글자만 선별할 수 있다"
    },
    {
      "level": "고급",
      "criteria": "문자열 분석, 검색, 변환 등의 복합적인 텍스트 처리 알고리즘을 구현하고, 안전한 범위 검사를 포함한 견고한 프로그램을 작성할 수 있다"
    }
  ]
}
