{
  "id": "calc_basic",
  "category": "calc",
  "name": "[~] [연산자] [~]",
  "description": "두 개의 숫자 값에 대해 사칙연산(덧셈, 뺄셈, 곱셈, 나눗셈)을 수행하는 기본 계산 블록입니다. 프로그래밍에서 수학적 계산을 위한 핵심 블록입니다.",

  "educational_context": {
    "learning_objectives": [
      "기본 사칙연산의 프로그래밍적 표현 학습",
      "수학적 계산을 통한 논리적 사고력 개발",
      "변수와 계산 결과의 관계 이해",
      "실생활 문제를 수학적으로 모델링하는 능력 향상",
      "프로그래밍에서 수치 데이터 처리 기초 습득"
    ],
    "key_concepts": [
      {
        "concept": "사칙연산(Four Basic Operations)",
        "explanation": "덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)의 네 가지 기본 수학 연산으로, 모든 수학적 계산의 기초가 되는 개념"
      },
      {
        "concept": "연산자(Operator)",
        "explanation": "계산을 수행하는 기호로, 프로그래밍에서 수학적 연산을 컴퓨터가 이해할 수 있는 형태로 표현하는 방법"
      },
      {
        "concept": "피연산자(Operand)",
        "explanation": "연산의 대상이 되는 값으로, 숫자, 변수, 또는 다른 계산 블록의 결과가 될 수 있음"
      },
      {
        "concept": "연산 우선순위",
        "explanation": "여러 연산이 함께 사용될 때 어떤 연산을 먼저 수행할지 정하는 규칙(곱셈, 나눗셈이 덧셈, 뺄셈보다 우선)"
      },
      {
        "concept": "수식(Mathematical Expression)",
        "explanation": "숫자와 연산자를 조합하여 하나의 값을 계산하는 표현식"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "숫자와 변수의 개념 이해",
      "기본 사칙연산 수학 지식",
      "블록 조립 및 연결 방법"
    ]
  },

  "usage_examples": [
    {
      "title": "기본 덧셈 계산",
      "description": "두 숫자를 더해서 결과 출력",
      "blocks": ["시작 버튼을 클릭했을 때", "결과 변수를 (10) + (5)로 정하기", "(결과) 말하기"],
      "explanation": "10과 5를 더한 결과인 15를 계산하여 변수에 저장하고 출력합니다."
    },
    {
      "title": "사용자 입력 계산기",
      "description": "사용자가 입력한 두 숫자를 계산",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'첫 번째 숫자를 입력하세요' 묻고 기다리기",
        "첫번째 변수를 (답변)으로 정하기",
        "'두 번째 숫자를 입력하세요' 묻고 기다리기",
        "두번째 변수를 (답변)으로 정하기",
        "덧셈결과 변수를 (첫번째) + (두번째)로 정하기",
        "뺄셈결과 변수를 (첫번째) - (두번째)로 정하기",
        "곱셈결과 변수를 (첫번째) × (두번째)로 정하기",
        "나눗셈결과 변수를 (첫번째) ÷ (두번째)로 정하기",
        "'덧셈: ' + (덧셈결과) 말하기",
        "'뺄셈: ' + (뺄셈결과) 말하기",
        "'곱셈: ' + (곱셈결과) 말하기",
        "'나눗셈: ' + (나눗셈결과) 말하기"
      ],
      "explanation": "사용자가 입력한 두 숫자로 사칙연산을 모두 수행하여 결과를 보여주는 계산기입니다."
    },
    {
      "title": "캐릭터 이동 거리 계산",
      "description": "이동 시간과 속도를 이용한 거리 계산",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "속도 변수를 50으로 정하기",
        "시간 변수를 3으로 정하기",
        "거리 변수를 (속도) × (시간)으로 정하기",
        "'총 이동 거리: ' + (거리) + 'px' 말하기",
        "(거리)만큼 움직이기"
      ],
      "explanation": "속도와 시간을 곱해서 이동할 거리를 계산하고, 그만큼 캐릭터를 이동시킵니다."
    },
    {
      "title": "점수 계산 시스템",
      "description": "게임에서 다양한 방식으로 점수 계산",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "기본점수 변수를 100으로 정하기",
        "보너스점수 변수를 50으로 정하기",
        "곱하기배율 변수를 2로 정하기",
        "최종점수 변수를 ((기본점수) + (보너스점수)) × (곱하기배율)로 정하기",
        "'최종 점수: ' + (최종점수) + '점!' 말하기"
      ],
      "explanation": "기본 점수에 보너스를 더하고 배율을 곱해서 최종 점수를 계산하는 게임 시스템입니다."
    },
    {
      "title": "원의 넓이 계산",
      "description": "반지름을 입력받아 원의 넓이 계산",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'원의 반지름을 입력하세요' 묻고 기다리기",
        "반지름 변수를 (답변)으로 정하기",
        "파이 변수를 3.14로 정하기",
        "넓이 변수를 (파이) × (반지름) × (반지름)으로 정하기",
        "'원의 넓이는 ' + (넓이) + '입니다' 말하기"
      ],
      "explanation": "사용자가 입력한 반지름으로 원의 넓이(π × r²)를 계산하는 수학 프로그램입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "계산 블록을 어떻게 사용하는지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'계산' 카테고리(초록색 계산기 모양 아이콘)를 클릭해보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[~] [연산자] [~]' 블록을 찾아보세요. 둥근 모양의 블록이에요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "왼쪽과 오른쪽에 숫자를 넣고, 가운데 드롭다운에서 +, -, ×, ÷ 중 선택하세요"
        }
      ]
    },
    {
      "situation": "계산 결과를 어떻게 저장하고 사용하나요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'자료' 카테고리에서 변수를 만들어보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[변수]를 [값]으로 정하기' 블록의 값 자리에 계산 블록을 넣으세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "계산 블록을 직접 다른 블록의 입력 자리에 넣어서 바로 사용할 수도 있어요"
        }
      ]
    },
    {
      "situation": "복잡한 계산을 어떻게 하나요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "계산 블록 안에 또 다른 계산 블록을 넣어서 복잡한 수식을 만들 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "(A + B) × C 같은 계산은 ((A) + (B)) × (C) 형태로 블록을 중첩해서 만드세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "복잡한 계산은 단계별로 나누어서 중간 결과를 변수에 저장하는 것이 좋아요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "문자열과 숫자를 구분하지 않고 계산하려고 함",
      "why_it_happens": "사용자 입력이나 텍스트가 문자열 형태라는 것을 인식하지 못함",
      "consequence": "예상과 다른 결과가 나오거나 계산이 제대로 되지 않음",
      "solution": "숫자가 필요한 곳에는 숫자 블록이나 숫자 변수를 사용하고, 사용자 입력은 숫자로 변환해서 사용",
      "teaching_moment": "컴퓨터는 '3'(문자)과 3(숫자)을 다르게 봐요. 계산할 때는 항상 숫자를 사용해야 해요."
    },
    {
      "mistake": "0으로 나누기 시도",
      "why_it_happens": "나눗셈에서 분모가 0이 되는 경우를 고려하지 않음",
      "consequence": "프로그램 오류나 예상치 못한 결과 발생",
      "solution": "나눗셈하기 전에 분모가 0인지 확인하는 조건 블록 추가",
      "teaching_moment": "수학에서 0으로 나누는 것은 불가능해요. 프로그램에서도 미리 확인해야 해요."
    },
    {
      "mistake": "연산 우선순위를 잘못 이해",
      "why_it_happens": "수학의 연산 우선순위 규칙을 모르거나 블록의 중첩 구조를 잘못 구성",
      "consequence": "의도한 것과 다른 계산 결과",
      "solution": "괄호의 개념처럼 블록을 중첩해서 명확한 계산 순서 지정",
      "teaching_moment": "수학에서 곱셈과 나눗셈이 덧셈과 뺄셈보다 먼저 계산되는 것처럼, 블록도 안쪽부터 계산돼요."
    },
    {
      "mistake": "소수점 계산 결과에 대한 이해 부족",
      "why_it_happens": "정수 나눗셈에서 소수점 결과가 나온다는 것을 예상하지 못함",
      "consequence": "예상보다 긴 소수점 결과나 반올림 오차에 대한 혼란",
      "solution": "반올림, 버림, 올림 블록을 활용해서 원하는 형태로 결과 가공",
      "teaching_moment": "컴퓨터는 아주 정확하게 계산하지만, 때로는 우리가 원하는 형태로 결과를 정리해야 해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 블록 찾기",
      "instruction": "블록 팔레트에서 '계산' 카테고리(초록색 계산기 모양)를 클릭하세요.",
      "visual_hint": "초록색 아이콘이고 계산기나 숫자 모양을 하고 있어요."
    },
    {
      "step": 2,
      "title": "기본 계산 블록 선택",
      "instruction": "'[~] [연산자] [~]' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "둥근 모양의 블록으로 가운데에 +, -, ×, ÷ 선택 버튼이 있어요."
    },
    {
      "step": 3,
      "title": "연산자 선택",
      "instruction": "가운데 드롭다운을 클릭해서 원하는 연산자(+, -, ×, ÷)를 선택하세요.",
      "visual_hint": "드롭다운을 클릭하면 네 가지 연산자가 나타나요."
    },
    {
      "step": 4,
      "title": "첫 번째 숫자 입력",
      "instruction": "왼쪽 빈 칸에 첫 번째 숫자나 변수를 넣으세요.",
      "visual_hint": "숫자를 직접 입력하거나 숫자 블록, 변수 블록을 드래그해서 넣을 수 있어요."
    },
    {
      "step": 5,
      "title": "두 번째 숫자 입력",
      "instruction": "오른쪽 빈 칸에 두 번째 숫자나 변수를 넣으세요.",
      "visual_hint": "첫 번째와 마찬가지로 숫자나 블록을 넣을 수 있어요."
    },
    {
      "step": 6,
      "title": "계산 결과 활용",
      "instruction": "완성된 계산 블록을 다른 블록의 입력 자리에 넣거나 변수에 저장하세요.",
      "visual_hint": "둥근 모양의 계산 블록은 둥근 입력 자리에 들어가요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "set_variable",
      "block_name": "[변수]를 [값]으로 정하기",
      "relationship": "계산 결과 저장",
      "explanation": "계산 블록의 결과를 변수에 저장하여 나중에 사용할 수 있게 함"
    },
    {
      "block_id": "change_variable",
      "block_name": "[변수]를 [값]만큼 바꾸기",
      "relationship": "누적 계산",
      "explanation": "기존 변수 값에 계산 결과를 더하거나 빼서 누적 계산 구현"
    },
    {
      "block_id": "ask_and_wait",
      "block_name": "묻고 기다리기",
      "relationship": "계산 입력 수집",
      "explanation": "사용자로부터 계산에 필요한 숫자 입력을 받음"
    },
    {
      "block_id": "get_canvas_input_value",
      "block_name": "답변",
      "relationship": "사용자 입력값 전달",
      "explanation": "사용자가 입력한 답변을 계산 블록의 피연산자로 사용"
    },
    {
      "block_id": "calc_operation",
      "block_name": "[~]의 [제곱근/절댓값/반올림 등] 값",
      "relationship": "고급 계산 연산",
      "explanation": "사칙연산 외의 수학 함수들을 사용한 더 복잡한 계산"
    },
    {
      "block_id": "boolean_basic_operator",
      "block_name": "[~] [비교연산자] [~]",
      "relationship": "계산 결과 비교",
      "explanation": "계산 결과를 다른 값과 비교하여 조건문에서 사용"
    },
    {
      "block_id": "combine_something",
      "block_name": "[문자]와(과) [문자] 합치기",
      "relationship": "결과 출력 조합",
      "explanation": "계산 결과를 문자와 합쳐서 의미 있는 메시지로 출력"
    }
  ],

  "debugging_tips": [
    {
      "problem": "계산 결과가 예상과 달라요",
      "possible_causes": ["연산자를 잘못 선택함", "피연산자에 문자열이 들어감", "연산 우선순위를 잘못 이해함"],
      "solutions": [
        "각 피연산자의 값을 별도로 화면에 출력해서 확인하기",
        "연산자가 의도한 것과 맞는지 다시 확인하기",
        "복잡한 계산은 단계별로 나누어서 중간 결과 확인하기"
      ]
    },
    {
      "problem": "나눗셈에서 오류가 발생해요",
      "possible_causes": ["0으로 나누기 시도", "나누는 수가 변수인데 값이 0이 됨"],
      "solutions": [
        "나눗셈 전에 분모가 0인지 확인하는 조건 블록 추가",
        "분모가 될 변수의 값을 미리 화면에 출력해서 확인",
        "'만약 (분모) = (0) 라면' 조건으로 예외 처리 추가"
      ]
    },
    {
      "problem": "소수점이 너무 길게 나와요",
      "possible_causes": ["나눗셈 결과에서 무한소수나 긴 소수점 발생", "부동소수점 연산의 특성"],
      "solutions": [
        "'[~]의 반올림 값' 블록을 사용해서 소수점 정리",
        "정수 결과만 필요하면 '[~]의 버림 값' 사용",
        "원하는 자릿수로 반올림하는 계산식 적용"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "계산기",
      "explanation": "일상에서 사용하는 계산기와 똑같이 숫자를 입력하고 연산자를 선택해서 계산하는 과정입니다."
    },
    {
      "analogy": "요리 레시피",
      "explanation": "재료의 양을 늘리거나 줄일 때 비율 계산을 하는 것처럼, 프로그램에서도 값들을 계산해서 원하는 결과를 만듭니다."
    },
    {
      "analogy": "쇼핑 계산",
      "explanation": "물건 가격과 개수를 곱해서 총 금액을 구하거나, 할인율을 계산하는 것과 같은 실생활 계산입니다."
    },
    {
      "analogy": "건축 설계",
      "explanation": "건물의 면적이나 필요한 자재의 양을 계산하는 것처럼, 정확한 수치 계산이 중요한 모든 분야에서 사용됩니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "복합 수식 계산",
      "description": "여러 연산을 조합해서 복잡한 수학 공식을 구현",
      "use_case": "이차방정식 계산, 물리 공식 적용, 통계 계산"
    },
    {
      "concept": "실시간 계산 시스템",
      "description": "사용자 입력이나 게임 상황에 따라 실시간으로 값을 계산하고 업데이트",
      "use_case": "점수 시스템, 체력 계산, 경험치 시스템"
    },
    {
      "concept": "데이터 분석 도구",
      "description": "여러 데이터의 평균, 합계, 비율 등을 계산하는 분석 프로그램",
      "use_case": "성적 분석기, 설문조사 결과 분석, 예산 관리"
    },
    {
      "concept": "시뮬레이션 프로그램",
      "description": "물리 법칙이나 수학적 모델을 계산을 통해 시각화",
      "use_case": "포물선 운동, 복리 계산, 인구 증가 모델"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "기본 사칙연산을 사용해서 간단한 계산을 할 수 있다",
      "example": "두 숫자 더하기, 곱셈표 만들기, 간단한 계산기"
    },
    {
      "level": "중급",
      "criteria": "복합 계산과 변수를 활용해서 실용적인 계산 프로그램을 만들 수 있다",
      "example": "원의 넓이 계산기, 할인가격 계산, 평균 점수 계산"
    },
    {
      "level": "고급",
      "criteria": "복잡한 수학 공식을 구현하고 실시간 계산 시스템을 설계할 수 있다",
      "example": "복리 계산기, 물리 시뮬레이션, 데이터 분석 도구"
    }
  ]
}
