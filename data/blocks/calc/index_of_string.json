{
  "id": "index_of_string",
  "category": "calc",
  "name": "[텍스트1]에서 [텍스트2]의 시작 위치",
  "description": "첫 번째 텍스트에서 두 번째 텍스트가 처음 나타나는 위치를 반환하는 값 블록입니다. 위치는 1부터 시작하며, 찾지 못한 경우 0을 반환합니다. 텍스트 검색과 문자열 처리에 활용합니다.",

  "educational_context": {
    "learning_objectives": [
      "문자열 검색과 위치 찾기의 개념 이해",
      "텍스트 처리와 분석 방법 학습",
      "인덱스와 위치 값의 활용법 익히기",
      "패턴 매칭과 문자열 조작 기초 습득",
      "조건 블록과 연계한 텍스트 검증 방법 이해"
    ],
    "key_concepts": [
      {
        "concept": "문자열 인덱스",
        "explanation": "텍스트에서 각 문자의 위치를 나타내는 번호로, 엔트리에서는 1부터 시작합니다."
      },
      {
        "concept": "부분 문자열 검색",
        "explanation": "큰 텍스트 안에서 작은 텍스트 조각을 찾는 기능으로, 텍스트 분석의 기본이 됩니다."
      },
      {
        "concept": "시작 위치",
        "explanation": "찾고자 하는 텍스트가 처음 시작되는 위치를 나타내며, 여러 개가 있어도 첫 번째 위치만 반환합니다."
      },
      {
        "concept": "검색 실패 처리",
        "explanation": "찾는 텍스트가 없을 때 0을 반환하므로, 이를 활용해 존재 여부를 확인할 수 있습니다."
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": ["문자열과 텍스트 개념 이해", "변수 사용 경험", "조건 블록 활용 능력", "기본 연산 블록 사용법"]
  },

  "usage_examples": [
    {
      "title": "단어 찾기 게임",
      "description": "문장에서 특정 단어의 위치 찾기",
      "blocks": [
        "when_run_button_click",
        "set_variable('문장', '엔트리는 재미있는 코딩 플랫폼입니다')",
        "ask_and_wait('어떤 단어를 찾을까요?')",
        "set_variable('위치', <index_of_string(<get_variable('문장')>, <get_variable('답변')>)>)",
        "if_condition(<get_variable('위치') > 0>)",
        "  speak_something(<join_something(<get_variable('답변')>, '은(는) ')>, <join_something(<get_variable('위치')>, '번째 위치에 있어요!')>)",
        "else",
        "  speak_something('그 단어는 문장에 없어요!')"
      ],
      "explanation": "사용자가 입력한 단어가 문장의 어느 위치에 있는지 찾아서 알려주는 단어 찾기 게임입니다."
    },
    {
      "title": "이메일 유효성 검사",
      "description": "@기호가 있는지 확인하여 이메일 형식 검증",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('이메일 주소를 입력하세요')",
        "set_variable('골뱅이_위치', <index_of_string(<get_variable('답변')>, '@')>)",
        "set_variable('점_위치', <index_of_string(<get_variable('답변')>, '.')>)",
        "if_condition(<calc_operation(<get_variable('골뱅이_위치')>, '>', 0)> and <calc_operation(<get_variable('점_위치')>, '>', <get_variable('골뱅이_위치')>)>)",
        "  set_text('올바른 이메일 형식입니다!')",
        "else",
        "  set_text('이메일 형식이 잘못되었어요')"
      ],
      "explanation": "@와 .의 위치를 확인하여 간단한 이메일 형식 검증을 수행합니다."
    },
    {
      "title": "금지어 필터링",
      "description": "부적절한 단어 포함 여부 확인",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('메시지를 입력하세요')",
        "set_variable('금지어_목록', '나쁜말,욕설,비속어')",
        "set_variable('안전한_메시지', 1)",
        "repeat_basic(3)",
        "  set_variable('금지어', <get_list_item('금지어_목록', <get_variable('i')>)>)",
        "  if_condition(<index_of_string(<get_variable('답변')>, <get_variable('금지어')>) > 0>)",
        "    set_variable('안전한_메시지', 0)",
        "    break",
        "if_condition(<get_variable('안전한_메시지') = 1>)",
        "  set_text('메시지가 전송되었습니다!')",
        "else",
        "  set_text('부적절한 단어가 포함되어 있어요')"
      ],
      "explanation": "메시지에 금지어가 포함되어 있는지 검사하는 필터링 시스템입니다."
    },
    {
      "title": "URL 파싱",
      "description": "웹 주소에서 도메인 추출",
      "blocks": [
        "when_run_button_click",
        "set_variable('URL', 'https://playentry.org/learn')",
        "set_variable('프로토콜_끝', <index_of_string(<get_variable('URL')>, '//')>)",
        "set_variable('도메인_시작', <calc_operation(<get_variable('프로토콜_끝')>, '+', 2)>)",
        "set_variable('경로_시작', <index_of_string(<substring(<get_variable('URL')>, <get_variable('도메인_시작')>, <length_of_string(<get_variable('URL')>)>)>, '/')>)",
        "set_variable('도메인', <substring(<get_variable('URL')>, <get_variable('도메인_시작')>, <calc_operation(<get_variable('도메인_시작')>, '+', <get_variable('경로_시작')>, '-', 1)>)>)",
        "set_text(<join_something('도메인: ', <get_variable('도메인')>)>)"
      ],
      "explanation": "URL에서 프로토콜과 경로를 제외한 도메인 부분만 추출하는 텍스트 파싱 예제입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "텍스트에서 특정 단어의 위치를 찾고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'계산' 카테고리에서 문자열 관련 블록들을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'[텍스트1]에서 [텍스트2]의 시작 위치' 블록을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "첫 번째 자리에 전체 텍스트를, 두 번째 자리에 찾을 텍스트를 넣으면 위치를 알려줘요"
        }
      ]
    },
    {
      "situation": "단어가 있는지 없는지 확인하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "위치 값이 0보다 크면 단어가 있고, 0이면 없는 거예요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'흐름' 카테고리의 조건 블록과 함께 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "위치 > 0 조건으로 단어의 존재 여부를 확인해보세요"
        }
      ]
    },
    {
      "situation": "여러 단어를 순서대로 찾고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "각 단어의 위치를 구하고 순서를 비교할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "변수에 각 위치를 저장하고 '계산' 카테고리의 비교 블록을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "첫 번째 단어 위치 < 두 번째 단어 위치로 순서를 확인해보세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "위치가 0부터 시작한다고 생각",
      "why_it_happens": "다른 프로그래밍 언어의 인덱스 방식과 혼동",
      "consequence": "위치 값을 잘못 해석하거나 계산 오류 발생",
      "solution": "엔트리에서는 위치가 1부터 시작한다는 것을 기억하기",
      "teaching_moment": "엔트리는 사람이 세는 것처럼 1부터 시작해요. 첫 번째 글자의 위치는 1이에요."
    },
    {
      "mistake": "대소문자를 구분하지 못함",
      "why_it_happens": "대소문자 구분의 중요성을 모름",
      "consequence": "'Hello'에서 'hello'를 찾지 못함",
      "solution": "정확한 대소문자로 검색하거나 모두 소문자/대문자로 변환 후 검색",
      "teaching_moment": "컴퓨터는 'A'와 'a'를 다른 문자로 인식해요."
    },
    {
      "mistake": "찾지 못했을 때 0을 처리하지 않음",
      "why_it_happens": "검색 실패 경우를 고려하지 않음",
      "consequence": "프로그램이 예상과 다르게 동작하거나 오류 발생",
      "solution": "항상 위치가 0인지 확인하는 조건 블록 추가",
      "teaching_moment": "찾는 것이 없을 수도 있으니 항상 그 경우를 생각해야 해요."
    },
    {
      "mistake": "여러 개 중 첫 번째만 찾는다는 것을 모름",
      "why_it_happens": "블록이 모든 위치를 찾을 것으로 기대",
      "consequence": "두 번째, 세 번째 위치를 찾지 못함",
      "solution": "첫 번째 이후를 찾으려면 부분 문자열을 만들어서 추가 검색",
      "teaching_moment": "이 블록은 처음 나타나는 위치만 알려줘요. 모두 찾으려면 반복이 필요해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 카테고리 찾기",
      "instruction": "블록 팔레트에서 초록색 '계산' 카테고리를 클릭하세요.",
      "visual_hint": "계산기 모양의 아이콘이 있는 초록색 카테고리입니다."
    },
    {
      "step": 2,
      "title": "위치 찾기 블록 선택",
      "instruction": "'[텍스트1]에서 [텍스트2]의 시작 위치' 블록을 찾아서 드래그하세요.",
      "visual_hint": "두 개의 텍스트 입력 자리가 있는 둥근 값 블록입니다."
    },
    {
      "step": 3,
      "title": "텍스트 입력",
      "instruction": "첫 번째 자리에 전체 텍스트를, 두 번째 자리에 찾을 텍스트를 입력하세요.",
      "visual_hint": "변수나 직접 입력한 텍스트를 넣을 수 있습니다."
    },
    {
      "step": 4,
      "title": "결과 저장 또는 사용",
      "instruction": "반환된 위치 값을 변수에 저장하거나 조건 블록에서 직접 사용하세요.",
      "visual_hint": "0보다 큰지 확인하여 텍스트 존재 여부를 판단합니다."
    },
    {
      "step": 5,
      "title": "조건 처리 추가",
      "instruction": "위치가 0일 때와 0보다 클 때를 구분하여 적절한 동작을 추가하세요.",
      "visual_hint": "조건 블록으로 찾기 성공/실패에 따른 처리를 구현합니다."
    }
  ],

  "related_blocks": [
    {
      "block_id": "substring",
      "relationship": "부분 문자열 추출",
      "explanation": "찾은 위치를 기준으로 텍스트의 일부를 잘라낼 때 함께 사용"
    },
    {
      "block_id": "length_of_string",
      "relationship": "문자열 길이",
      "explanation": "텍스트의 전체 길이를 구해서 위치 계산에 활용"
    },
    {
      "block_id": "join_something",
      "relationship": "문자열 결합",
      "explanation": "찾은 결과를 다른 텍스트와 합쳐서 메시지를 만들 때 사용"
    },
    {
      "block_id": "replace_string",
      "relationship": "텍스트 치환",
      "explanation": "찾은 텍스트를 다른 텍스트로 바꿀 때 위치 정보와 함께 활용"
    },
    {
      "block_id": "if_condition",
      "relationship": "존재 여부 확인",
      "explanation": "위치 값이 0인지 확인하여 텍스트 존재 여부를 판단할 때 사용"
    },
    {
      "block_id": "calc_operation",
      "relationship": "위치 계산",
      "explanation": "찾은 위치를 기준으로 다른 위치를 계산할 때 사용"
    }
  ],

  "debugging_tips": [
    {
      "problem": "항상 0이 나와요",
      "possible_causes": [
        "찾는 텍스트가 실제로 없음",
        "대소문자가 정확히 일치하지 않음",
        "공백이나 특수문자 차이",
        "텍스트 입력 순서가 바뀜"
      ],
      "solutions": [
        "찾을 텍스트가 정확히 포함되어 있는지 확인",
        "대소문자를 정확히 맞추거나 모두 통일",
        "불필요한 공백 제거 후 다시 시도",
        "첫 번째 자리에 전체 텍스트, 두 번째 자리에 찾을 텍스트 확인"
      ]
    },
    {
      "problem": "위치가 예상과 달라요",
      "possible_causes": ["위치가 1부터 시작한다는 것을 잊음", "공백도 한 글자로 계산됨", "여러 개 중 첫 번째 위치만 반환"],
      "solutions": [
        "위치는 1부터 시작한다는 것을 기억",
        "공백도 글자로 포함해서 위치 계산",
        "처음이 아닌 다른 위치를 찾으려면 추가 처리 필요"
      ]
    },
    {
      "problem": "특수문자를 찾지 못해요",
      "possible_causes": ["특수문자가 제대로 입력되지 않음", "이스케이프 문자 처리 문제", "인코딩 차이"],
      "solutions": [
        "특수문자를 정확히 복사해서 붙여넣기",
        "변수에 저장해서 사용하기",
        "간단한 문자로 먼저 테스트 후 특수문자 시도"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "책에서 단어 찾기",
      "explanation": "책에서 특정 단어가 몇 페이지 몇 번째 줄에 있는지 찾는 것과 같습니다."
    },
    {
      "analogy": "주소에서 동 찾기",
      "explanation": "전체 주소에서 '동'이나 '아파트'가 어디에 있는지 찾는 것과 비슷합니다."
    },
    {
      "analogy": "웹브라우저의 찾기 기능",
      "explanation": "Ctrl+F로 웹페이지에서 단어를 찾는 기능과 같은 원리입니다."
    },
    {
      "analogy": "바코드 스캔",
      "explanation": "바코드에서 특정 패턴의 위치를 찾아 정보를 읽는 것과 유사합니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "모든 위치 찾기",
      "description": "반복문을 사용해서 텍스트에 포함된 모든 위치를 찾는 시스템",
      "use_case": "단어 빈도 분석, 패턴 매칭, 텍스트 하이라이트"
    },
    {
      "concept": "대소문자 무시 검색",
      "description": "모든 텍스트를 소문자나 대문자로 변환 후 검색하는 방법",
      "use_case": "사용자 입력 검색, 유연한 텍스트 매칭"
    },
    {
      "concept": "정규 표현식 흉내",
      "description": "여러 패턴을 조합해서 복잡한 텍스트 패턴을 찾는 시스템",
      "use_case": "이메일 검증, 전화번호 형식 확인, URL 파싱"
    },
    {
      "concept": "텍스트 분석 도구",
      "description": "위치 정보를 활용한 고급 텍스트 분석 시스템",
      "use_case": "키워드 추출, 문장 구조 분석, 자동 요약"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "텍스트에서 특정 단어의 위치를 찾고 존재 여부를 확인할 수 있다",
      "example": "문장에서 단어 찾기, 찾기 성공/실패 메시지 표시"
    },
    {
      "level": "중급",
      "criteria": "위치 정보를 활용해서 텍스트를 분석하고 처리할 수 있다",
      "example": "이메일 형식 검증, 금지어 필터링, URL에서 도메인 추출"
    },
    {
      "level": "고급",
      "criteria": "복잡한 텍스트 처리 시스템을 구현하고 패턴 매칭을 활용할 수 있다",
      "example": "모든 위치 찾기, 텍스트 파서 구현, 자동 텍스트 분석 도구"
    }
  ]
}
