{
  "id": "get_project_timer_value",
  "category": "calc",
  "name": "타이머 값",
  "description": "프로젝트의 내장 타이머가 시작된 후 경과된 시간을 초 단위로 반환하는 블록입니다. 시간 기반 게임이나 시간 제한 활동, 속도 측정 등에 활용됩니다.",

  "educational_context": {
    "learning_objectives": [
      "시간 개념과 시간 측정 방법 이해",
      "타이머를 활용한 시간 기반 프로그래밍 학습",
      "게임과 활동에서 시간 제약 조건 구현",
      "실시간 데이터 처리와 시간 동기화 개념 습득",
      "성능 측정과 효율성 평가 기초 학습"
    ],
    "key_concepts": [
      {
        "concept": "타이머(Timer)",
        "explanation": "특정 시점부터 시간을 측정하여 경과 시간을 추적하는 도구로, 프로그래밍에서 시간 기반 로직 구현의 핵심 요소"
      },
      {
        "concept": "시간 기반 프로그래밍",
        "explanation": "경과 시간에 따라 프로그램의 동작이 달라지는 프로그래밍 패턴으로, 게임, 애니메이션, 시뮬레이션에서 핵심적 역할"
      },
      {
        "concept": "실시간 처리(Real-time Processing)",
        "explanation": "프로그램이 실행되는 동안 지속적으로 변하는 시간 정보를 활용하여 즉각적인 반응을 구현하는 방법"
      },
      {
        "concept": "시간 동기화",
        "explanation": "여러 이벤트나 동작을 특정 시간에 맞춰 조율하여 일관된 시간 흐름을 만드는 기법"
      },
      {
        "concept": "성능 측정(Performance Measurement)",
        "explanation": "작업 완료 시간, 반응 속도 등을 측정하여 효율성을 평가하고 개선하는 방법"
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "변수 사용 방법",
      "조건문과 반복문 기본 사용법",
      "기본 수학 연산(비교, 계산)",
      "시간의 단위(초, 분) 개념"
    ]
  },

  "usage_examples": [
    {
      "title": "반응 속도 측정 게임",
      "description": "사용자의 반응 시간을 측정하는 게임",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'준비... 초록색이 나타나면 클릭하세요!' 말하기",
        "(1)부터 (5)까지의 무작위 수초 기다리기",
        "타이머 시작하기",
        "모양을 [초록색원] 으로 바꾸기",
        "마우스를 클릭했을 때까지 기다리기",
        "타이머 정지하기",
        "반응시간 변수를 (타이머 값)으로 정하기",
        "'반응 시간: ' + (반응시간) + '초!' 말하기"
      ],
      "explanation": "초록색이 나타난 후 클릭할 때까지의 시간을 측정하여 반응 속도를 평가합니다."
    },
    {
      "title": "시간 제한 퀴즈",
      "description": "제한 시간 내에 문제를 풀어야 하는 퀴즈",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "점수 변수를 0으로 정하기",
        "타이머 시작하기",
        "계속 반복하기",
        "  만약 (타이머 값) > (30) 라면",
        "    '시간 종료! 최종 점수: ' + (점수) + '점' 말하기",
        "    반복 중단하기",
        "  아니라면",
        "    '남은 시간: ' + ((30) - (타이머 값)의 반올림 값) + '초' 말하기",
        "    문제1 변수를 (1)부터 (10)까지의 무작위 수로 정하기",
        "    문제2 변수를 (1)부터 (10)까지의 무작위 수로 정하기",
        "    (문제1) + ' + ' + (문제2) + ' = ?' 묻고 기다리기",
        "    만약 (답변) = ((문제1) + (문제2)) 라면",
        "      점수 변수를 10만큼 바꾸기",
        "      '정답!' 말하기"
      ],
      "explanation": "30초 제한 시간 내에 덧셈 문제를 최대한 많이 맞히는 퀴즈 게임입니다."
    },
    {
      "title": "운동 타이머",
      "description": "운동 시간을 측정하고 격려하는 프로그램",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'운동을 시작하세요! 스페이스바로 종료' 말하기",
        "타이머 시작하기",
        "스페이스 키를 눌렀을 때까지 기다리기",
        "운동시간 변수를 (타이머 값)으로 정하기",
        "분 변수를 (운동시간)을 (60)으로 나눈 몫으로 정하기",
        "초 변수를 (운동시간)을 (60)으로 나눈 나머지의 반올림 값으로 정하기",
        "'운동 시간: ' + (분) + '분 ' + (초) + '초' 말하기",
        "만약 (운동시간) > (300) 라면",
        "  '훌륭해요! 5분 이상 운동했네요!' 말하기",
        "아니라면",
        "  '좋아요! 내일은 더 오래 해봐요!' 말하기"
      ],
      "explanation": "운동 시간을 측정하고 분:초 형태로 표시하며 격려 메시지를 제공합니다."
    },
    {
      "title": "타이밍 게임",
      "description": "정확한 타이밍에 멈춰야 하는 게임",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'정확히 5초에 맞춰 클릭하세요!' 말하기",
        "타이머 시작하기",
        "계속 반복하기",
        "  현재시간 변수를 (타이머 값)의 반올림 값으로 정하기",
        "  (현재시간) + '초...' 말하기",
        "  만약 (마우스를 클릭했는가?) 라면",
        "    차이 변수를 ((타이머 값) - (5))의 절댓값으로 정하기",
        "    만약 (차이) < (0.5) 라면",
        "      '완벽해요! 차이: ' + (차이) + '초' 말하기",
        "    아니라면",
        "      '아쉬워요! 차이: ' + (차이) + '초' 말하기",
        "    반복 중단하기",
        "  0.1초 기다리기"
      ],
      "explanation": "정확히 5초에 맞춰 클릭하는 타이밍 게임으로 정밀도를 평가합니다."
    },
    {
      "title": "속도 기록 측정",
      "description": "특정 작업의 완료 속도를 기록하는 프로그램",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "기록들 리스트를 만들기",
        "3번 반복하기",
        "  (횟수) + '번째 도전! 10부터 1까지 세어보세요!' 말하기",
        "  타이머 시작하기",
        "  10부터 1까지 반복하기",
        "    (횟수2) 말하기",
        "    0.5초 기다리기",
        "  현재기록 변수를 (타이머 값)으로 정하기",
        "  기록들 리스트에 (현재기록) 추가하기",
        "  '이번 기록: ' + (현재기록) + '초' 말하기",
        "'최고 기록을 찾는 중...' 말하기",
        "최고기록 변수를 (기록들) 리스트의 (1)번째로 정하기",
        "2부터 3까지 반복하기",
        "  만약 ((기록들) 리스트의 (횟수)번째) < (최고기록) 라면",
        "    최고기록 변수를 ((기록들) 리스트의 (횟수)번째)으로 정하기",
        "'최고 기록: ' + (최고기록) + '초!' 말하기"
      ],
      "explanation": "같은 작업을 여러 번 수행하여 속도를 측정하고 최고 기록을 찾는 프로그램입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "타이머 값을 어떻게 사용하나요?",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'계산' 카테고리(초록색 계산기 모양 아이콘)를 클릭해보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'타이머 값' 블록을 찾아보세요. 이 블록은 현재 타이머 시간을 초 단위로 알려줘요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "타이머를 먼저 시작한 후에 타이머 값을 확인해야 해요"
        }
      ]
    },
    {
      "situation": "시간 제한 게임을 만들고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "게임 시작 시 타이머를 시작하고, 계속 반복하면서 타이머 값을 확인하세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'만약 (타이머 값) > (제한시간) 라면' 조건으로 시간 초과를 확인하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "남은 시간 표시는 '(제한시간) - (타이머 값)'으로 계산할 수 있어요"
        }
      ]
    },
    {
      "situation": "반응 속도를 정확히 측정하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "측정 시작점에서 타이머를 시작하고, 반응이 일어난 순간에 타이머 값을 확인하세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "정확한 측정을 위해 타이머를 초기화한 후 바로 시작하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "측정 후에는 타이머를 정지시켜서 값이 더 증가하지 않도록 하세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "타이머를 시작하지 않고 타이머 값 확인",
      "why_it_happens": "타이머는 명시적으로 시작해야 한다는 것을 모름",
      "consequence": "항상 0이 나오거나 예상과 다른 값",
      "solution": "'타이머 시작하기' 블록을 먼저 사용한 후 타이머 값 확인",
      "teaching_moment": "스톱워치도 시작 버튼을 눌러야 시간이 측정되는 것처럼, 타이머도 시작해야 해요."
    },
    {
      "mistake": "타이머 값을 한 번만 확인하고 저장해서 계속 사용",
      "why_it_happens": "타이머 값이 실시간으로 계속 변한다는 것을 이해하지 못함",
      "consequence": "시간이 흐르는 것이 반영되지 않은 고정된 값만 사용",
      "solution": "타이머 값이 필요할 때마다 매번 새로 확인하거나 반복문에서 지속적으로 업데이트",
      "teaching_moment": "시계는 계속 시간이 변하는 것처럼, 타이머 값도 매번 확인할 때마다 달라져요."
    },
    {
      "mistake": "시간 단위를 잘못 이해해서 계산 오류",
      "why_it_happens": "타이머 값이 초 단위라는 것을 모르고 다른 단위로 생각",
      "consequence": "분이나 시간 계산에서 잘못된 결과",
      "solution": "타이머 값은 초 단위이므로 분으로 바꾸려면 60으로 나누기",
      "teaching_moment": "60초 = 1분, 3600초 = 1시간이에요. 타이머는 초 단위로 시간을 알려줘요."
    },
    {
      "mistake": "여러 개의 타이머가 있다고 생각해서 혼동",
      "why_it_happens": "프로젝트에는 하나의 공용 타이머만 있다는 것을 모름",
      "consequence": "타이머 관리가 복잡해지고 예상과 다른 결과",
      "solution": "프로젝트 전체에서 하나의 타이머를 공유한다는 것을 이해하고 적절히 초기화",
      "teaching_moment": "교실에 시계가 하나 있어서 모든 학생이 같은 시계를 보는 것처럼, 프로젝트에도 타이머가 하나예요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "계산 블록 찾기",
      "instruction": "블록 팔레트에서 '계산' 카테고리(초록색 계산기 모양)를 클릭하세요.",
      "visual_hint": "초록색 아이콘이고 계산기나 숫자 모양을 하고 있어요."
    },
    {
      "step": 2,
      "title": "타이머 값 블록 선택",
      "instruction": "'타이머 값' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "둥근 모양의 블록으로 '타이머 값'이라고 적혀있어요."
    },
    {
      "step": 3,
      "title": "타이머 시작하기",
      "instruction": "타이머 값을 확인하기 전에 '타이머 시작하기' 블록을 먼저 사용하세요.",
      "visual_hint": "타이머가 시작되어야 시간 측정이 가능해요."
    },
    {
      "step": 4,
      "title": "타이머 값 활용",
      "instruction": "타이머 값 블록을 변수에 저장하거나 조건문에서 비교하세요.",
      "visual_hint": "둥근 모양의 타이머 값 블록은 숫자가 들어갈 자리에 넣을 수 있어요."
    },
    {
      "step": 5,
      "title": "실시간 확인 설정",
      "instruction": "시간이 계속 변해야 한다면 반복문 안에서 타이머 값을 확인하세요.",
      "visual_hint": "타이머는 실시간으로 변하므로 필요할 때마다 새로 확인해야 해요."
    },
    {
      "step": 6,
      "title": "타이머 관리",
      "instruction": "필요에 따라 타이머를 정지하거나 초기화하여 정확한 측정을 하세요.",
      "visual_hint": "측정이 끝나면 타이머를 정지시켜서 값이 더 변하지 않도록 할 수 있어요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "choose_project_timer_action",
      "block_name": "타이머 [시작/정지/초기화] 하기",
      "relationship": "타이머 제어",
      "explanation": "타이머를 시작, 정지, 초기화하여 정확한 시간 측정 환경 구성"
    },
    {
      "block_id": "set_visible_project_timer",
      "block_name": "타이머 [보이기/숨기기]",
      "relationship": "타이머 표시",
      "explanation": "화면에 타이머를 표시하거나 숨겨서 사용자에게 시간 정보 제공"
    },
    {
      "block_id": "boolean_basic_operator",
      "block_name": "[~] [비교연산자] [~]",
      "relationship": "시간 조건 판단",
      "explanation": "타이머 값을 특정 시간과 비교하여 시간 제한이나 조건 확인"
    },
    {
      "block_id": "_if",
      "block_name": "만약 ~라면",
      "relationship": "시간 기반 조건 실행",
      "explanation": "타이머 값에 따라 다른 동작을 수행하는 시간 기반 조건문"
    },
    {
      "block_id": "calc_operation",
      "block_name": "[~]의 [반올림] 값",
      "relationship": "시간 값 정리",
      "explanation": "소수점이 있는 타이머 값을 반올림하여 정수 초로 표시"
    },
    {
      "block_id": "quotient_and_mod",
      "block_name": "[~]를 [~]로 나눈 [몫/나머지]",
      "relationship": "시간 단위 변환",
      "explanation": "초를 분과 초로 분할하거나 다른 시간 단위로 변환"
    },
    {
      "block_id": "set_variable",
      "block_name": "[변수]를 [값]으로 정하기",
      "relationship": "시간 기록 저장",
      "explanation": "측정된 시간을 변수에 저장하여 나중에 비교하거나 분석"
    }
  ],

  "debugging_tips": [
    {
      "problem": "타이머 값이 항상 0이 나와요",
      "possible_causes": ["타이머를 시작하지 않음", "타이머를 시작하자마자 바로 값을 확인함", "타이머가 초기화된 상태"],
      "solutions": [
        "'타이머 시작하기' 블록을 먼저 사용했는지 확인",
        "타이머 시작 후 약간의 시간이 지난 후 값 확인",
        "타이머 초기화 여부를 확인하고 필요시 다시 시작"
      ]
    },
    {
      "problem": "시간 계산이 이상해요",
      "possible_causes": ["타이머 값의 단위(초)를 잘못 이해함", "분, 시간 변환 계산 오류", "소수점 처리 문제"],
      "solutions": [
        "타이머 값이 초 단위라는 것을 확인하고 필요시 단위 변환",
        "60초 = 1분, 3600초 = 1시간 공식 사용",
        "반올림이나 버림을 사용해서 정수로 변환"
      ]
    },
    {
      "problem": "여러 곳에서 타이머를 사용할 때 충돌해요",
      "possible_causes": ["하나의 타이머를 여러 용도로 동시 사용", "타이머 시작/정지 시점이 겹침", "타이머 상태 관리 부족"],
      "solutions": [
        "각각의 용도별로 타이머 사용 시점을 명확히 분리",
        "하나의 측정이 끝난 후 다음 측정 시작",
        "변수를 사용해서 타이머 값을 저장하고 관리"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "스톱워치",
      "explanation": "운동 경기에서 사용하는 스톱워치처럼 정확한 시간을 측정하여 기록하고 비교할 수 있습니다."
    },
    {
      "analogy": "요리 타이머",
      "explanation": "요리할 때 사용하는 타이머처럼 정해진 시간이 지나면 알람을 주거나 다음 단계로 넘어갑니다."
    },
    {
      "analogy": "시험 시간",
      "explanation": "시험을 볼 때 제한 시간을 확인하며 문제를 푸는 것처럼 시간 압박 상황을 시뮬레이션할 수 있습니다."
    },
    {
      "analogy": "교통신호",
      "explanation": "신호등이 일정 시간마다 바뀌는 것처럼 시간에 따라 프로그램의 상태나 동작을 변화시킬 수 있습니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "다중 타이머 시스템",
      "description": "변수를 활용하여 여러 개의 독립적인 타이머 기능 구현",
      "use_case": "복잡한 게임에서 여러 이벤트의 시간 추적"
    },
    {
      "concept": "성능 벤치마크",
      "description": "다양한 작업의 수행 시간을 측정하여 효율성 비교 분석",
      "use_case": "알고리즘 성능 테스트, 작업 속도 개선"
    },
    {
      "concept": "시간 기반 애니메이션",
      "description": "경과 시간에 따라 부드럽게 변화하는 시각적 효과 구현",
      "use_case": "시간에 따른 색상 변화, 움직임 패턴"
    },
    {
      "concept": "실시간 시뮬레이션",
      "description": "현실 시간과 동기화된 가상 환경이나 상황 모델링",
      "use_case": "시간대별 변화 시뮬레이션, 실시간 데이터 처리"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "타이머의 기본 사용법을 이해하고 간단한 시간 측정을 할 수 있다",
      "example": "반응 속도 측정, 기본적인 시간 제한 게임"
    },
    {
      "level": "중급",
      "criteria": "타이머를 활용한 복잡한 시간 기반 로직과 게임을 구현할 수 있다",
      "example": "다단계 시간 제한 시스템, 성능 측정 도구"
    },
    {
      "level": "고급",
      "criteria": "정밀한 시간 관리와 고급 시간 기반 알고리즘을 설계할 수 있다",
      "example": "실시간 시뮬레이션, 다중 타이머 시스템"
    }
  ]
}
