{
  "id": "distance_something",
  "category": "calc",
  "name": "[오브젝트/마우스]까지의 거리",
  "description": "현재 오브젝트에서 다른 오브젝트 또는 마우스까지의 직선 거리를 픽셀 단위로 계산하여 반환합니다.",

  "educational_context": {
    "learning_objectives": [
      "좌표계와 거리 개념 이해",
      "피타고라스 정리의 실제 활용",
      "게임에서의 충돌 감지와 범위 계산",
      "수학과 프로그래밍의 연결"
    ],
    "key_concepts": [
      {
        "concept": "유클리드 거리",
        "explanation": "두 점 사이의 직선 거리를 계산하는 방법으로 √((x₂-x₁)² + (y₂-y₁)²) 공식 사용"
      },
      {
        "concept": "좌표계",
        "explanation": "Entry의 무대는 x축과 y축으로 이루어진 2차원 좌표계를 사용"
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": ["좌표 개념 이해", "연산 블록 사용법", "오브젝트 이동 경험"]
  },

  "usage_examples": [
    {
      "scenario": "충돌 감지",
      "blocks": [
        "when_run_button_click",
        "repeat_inf",
        "  if_condition(distance_something('적') < 50)",
        "    speak_something('적이 가까이 있어요!')"
      ],
      "explanation": "적 오브젝트가 50픽셀 이내로 다가오면 경고 메시지 출력"
    },
    {
      "scenario": "마우스 따라가기",
      "blocks": [
        "when_run_button_click",
        "repeat_inf",
        "  if_condition(distance_something('마우스') > 30)",
        "    locate('마우스')"
      ],
      "explanation": "마우스와의 거리가 30픽셀보다 멀면 마우스 위치로 이동"
    },
    {
      "scenario": "점수 계산",
      "blocks": [
        "when_run_button_click",
        "set_variable('거리', distance_something('목표')),",
        "set_variable('점수', calc_basic(100, '-', '거리'))",
        "speak_something(combine_something('점수: ', '점수'))"
      ],
      "explanation": "목표까지의 거리에 따라 점수를 계산하여 가까울수록 높은 점수"
    }
  ],

  "progressive_hints": [
    {
      "situation": "거리를 어떻게 활용할지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "게임에서 적이 가까이 오면 공격하거나, 아이템에 닿으면 획득하는 것처럼 거리로 상호작용을 만들어요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'연산' 카테고리에서 거리 계산 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "조건 블록과 함께 사용해서 '거리가 00보다 작으면' 같은 조건을 만들어보세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "거리 단위를 잘못 이해",
      "solution": "Entry에서 거리는 픽셀 단위이므로 무대 크기(480x360)를 고려해서 적절한 값 설정",
      "teaching_moment": "화면에서 1cm가 대략 몇 픽셀인지 감각을 기르는 것이 중요해요"
    },
    {
      "mistake": "대각선 거리를 직선 거리로 착각",
      "solution": "실제로는 피타고라스 정리를 사용한 직선 거리이므로 x좌표 차이나 y좌표 차이보다 작을 수 있음",
      "teaching_moment": "지도에서 직선거리와 도로거리가 다른 것처럼, 좌표 차이와 실제 거리는 달라요"
    }
  ],

  "related_blocks": [
    {
      "block_name": "coordinate_object",
      "relationship": "위치 확인",
      "explanation": "x, y 좌표를 개별적으로 확인할 때 사용"
    },
    {
      "block_name": "_if",
      "relationship": "조건부 실행",
      "explanation": "거리 조건에 따른 다른 동작 구현"
    },
    {
      "block_name": "reach_something",
      "relationship": "충돌 감지",
      "explanation": "정확한 접촉 여부 확인"
    }
  ],

  "debugging_tips": [
    {
      "problem": "거리가 예상과 달라요",
      "solutions": [
        "coordinate_object 블록으로 각 오브젝트의 정확한 x, y 좌표 확인",
        "거리 값을 변수에 저장해서 말하기 블록으로 출력해보기",
        "간단한 위치(예: (0,0)과 (100,0))에서 테스트해보기"
      ]
    },
    {
      "problem": "마우스 거리가 이상해요",
      "solutions": ["마우스 좌표를 coordinate_mouse 블록으로 확인", "오브젝트 위치도 함께 확인해서 계산이 맞는지 검증"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "GPS 네비게이션",
      "explanation": "현재 위치에서 목적지까지의 직선거리 계산과 같은 원리"
    },
    {
      "analogy": "레이더 시스템",
      "explanation": "비행기나 선박에서 다른 물체까지의 거리를 측정하는 것과 동일"
    }
  ]
}
