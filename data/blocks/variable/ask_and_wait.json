{
  "id": "ask_and_wait",
  "category": "variable",
  "name": "[질문] 묻고 대답 기다리기",
  "description": "사용자에게 질문을 표시하고 입력을 기다리는 블록입니다. 사용자가 입력창에 답변을 입력하고 엔터키를 누르거나 확인 버튼을 클릭할 때까지 프로그램이 일시 정지됩니다. 입력받은 답변은 '대답' 변수에 저장됩니다.",

  "educational_context": {
    "learning_objectives": [
      "사용자 입력과 상호작용 프로그래밍 이해",
      "동기적 입력 처리 방식 학습",
      "대화형 프로그램 제작 능력 개발",
      "입력 데이터 검증과 처리 방법 습득",
      "변수를 활용한 입력값 저장과 활용"
    ],
    "key_concepts": [
      {
        "concept": "사용자 입력(User Input)",
        "explanation": "프로그램 실행 중 사용자로부터 텍스트나 숫자 등의 데이터를 받아들이는 과정"
      },
      {
        "concept": "동기적 처리(Synchronous Processing)",
        "explanation": "입력을 받을 때까지 프로그램 실행을 멈추고 기다리는 처리 방식"
      },
      {
        "concept": "대답 변수",
        "explanation": "사용자가 입력한 내용이 자동으로 저장되는 시스템 변수로, 다른 블록에서 활용 가능"
      },
      {
        "concept": "입력 검증(Input Validation)",
        "explanation": "사용자가 입력한 내용이 올바른 형식인지 확인하고 처리하는 과정"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": ["변수의 개념 이해", "조건 블록 사용 경험", "기본적인 출력 블록(말하기) 사용법"]
  },

  "usage_examples": [
    {
      "title": "이름 묻기",
      "description": "사용자의 이름을 입력받아 인사하기",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'이름이 뭐예요?' 묻고 대답 기다리기",
        "이름 변수를 (대답)으로 정하기",
        "'안녕하세요, ' + (이름) + '님!' 2초 동안 말하기",
        "'반갑습니다!' 2초 동안 말하기"
      ],
      "explanation": "사용자의 이름을 입력받아 변수에 저장하고, 개인화된 인사말을 표시합니다."
    },
    {
      "title": "수학 퀴즈",
      "description": "덧셈 문제를 내고 답 확인하기",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "숫자1 변수를 (1)부터 (10)까지의 무작위 수로 정하기",
        "숫자2 변수를 (1)부터 (10)까지의 무작위 수로 정하기",
        "정답 변수를 (숫자1) + (숫자2)로 정하기",
        "(숫자1) + ' + ' + (숫자2) + ' = ?' 묻고 대답 기다리기",
        "만약 (대답) = (정답) 라면",
        "  '정답입니다!' 2초 동안 말하기",
        "  점수 변수를 10만큼 바꾸기",
        "아니라면",
        "  '아쉬워요. 정답은 ' + (정답) + '입니다.' 3초 동안 말하기"
      ],
      "explanation": "무작위 덧셈 문제를 생성하고, 사용자의 답변을 확인하여 피드백을 제공합니다."
    },
    {
      "title": "비밀번호 확인",
      "description": "올바른 비밀번호 입력 시에만 진행",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "비밀번호 변수를 '1234'로 정하기",
        "시도횟수 변수를 0으로 정하기",
        "통과 변수를 거짓으로 정하기",
        "(시도횟수) < 3 그리고 (통과) = 거짓일 때까지 반복하기",
        "  '비밀번호를 입력하세요' 묻고 대답 기다리기",
        "  시도횟수 변수를 1만큼 바꾸기",
        "  만약 (대답) = (비밀번호) 라면",
        "    통과 변수를 참으로 정하기",
        "    '접근 허가!' 말하기",
        "  아니라면",
        "    '틀렸습니다. 남은 기회: ' + (3 - (시도횟수)) 말하기",
        "만약 (통과) = 거짓 라면",
        "  '접근 거부되었습니다.' 말하기",
        "  모든 코드 멈추기"
      ],
      "explanation": "비밀번호를 3회까지 입력받아 확인하는 보안 시스템입니다."
    },
    {
      "title": "대화형 스토리",
      "description": "선택지를 입력받아 스토리 진행",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "'모험을 떠나시겠습니까? (예/아니오)' 묻고 대답 기다리기",
        "만약 (대답) = '예' 라면",
        "  '용감한 선택입니다!' 2초 동안 말하기",
        "  '어느 길로 가시겠습니까? (왼쪽/오른쪽)' 묻고 대답 기다리기",
        "  만약 (대답) = '왼쪽' 라면",
        "    '숲으로 들어갑니다...' 말하기",
        "    배경을 '숲'으로 바꾸기",
        "  아니라면 만약 (대답) = '오른쪽' 라면",
        "    '성으로 향합니다...' 말하기",
        "    배경을 '성'으로 바꾸기",
        "  아니라면",
        "    '알 수 없는 길입니다.' 말하기",
        "아니라면",
        "  '안전한 선택입니다.' 말하기"
      ],
      "explanation": "사용자의 선택에 따라 다르게 진행되는 인터랙티브 스토리입니다."
    },
    {
      "title": "계산기",
      "description": "연속적으로 계산 수행하기",
      "blocks": [
        "시작 버튼을 클릭했을 때",
        "결과 변수를 0으로 정하기",
        "계속 반복하기",
        "  '숫자를 입력하세요 (종료: 끝)' 묻고 대답 기다리기",
        "  만약 (대답) = '끝' 라면",
        "    '최종 결과: ' + (결과) 말하기",
        "    모든 코드 멈추기",
        "  '연산자를 입력하세요 (+, -, *, /)' 묻고 대답 기다리기",
        "  연산자 변수를 (대답)으로 정하기",
        "  '두 번째 숫자를 입력하세요' 묻고 대답 기다리기",
        "  숫자2 변수를 (대답)으로 정하기",
        "  만약 (연산자) = '+' 라면",
        "    결과 변수를 (결과) + (숫자2)로 정하기",
        "  아니라면 만약 (연산자) = '-' 라면",
        "    결과 변수를 (결과) - (숫자2)로 정하기",
        "  '현재 결과: ' + (결과) 2초 동안 말하기"
      ],
      "explanation": "연속적으로 계산을 수행할 수 있는 간단한 계산기 프로그램입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "입력창이 나타나지 않아요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'감지' 카테고리에서 묻고 대답 기다리기 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "concept",
          "content": "블록이 시작 이벤트와 연결되어 있는지 확인하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "실행 버튼을 클릭했는지 확인하고, 팝업 차단이 되어있지 않은지 확인하세요"
        }
      ]
    },
    {
      "situation": "입력한 답변을 사용할 수 없어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "입력한 답변은 자동으로 '대답' 변수에 저장돼요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'대답' 블록을 감지 카테고리에서 찾아 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "다른 변수에 저장하려면 '[변수]를 (대답)으로 정하기' 블록을 사용하세요"
        }
      ]
    },
    {
      "situation": "숫자를 입력받아 계산하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "입력받은 답변은 텍스트로 저장되지만 자동으로 숫자로 변환돼요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "계산 블록에 (대답)을 직접 넣어서 사용할 수 있어요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "숫자가 아닌 값을 입력하면 0으로 처리되니 조건문으로 검증하세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "대답 변수를 만들려고 시도",
      "why_it_happens": "'대답'이 시스템 변수임을 모름",
      "consequence": "변수 이름 충돌이나 오류 발생",
      "solution": "'대답'은 자동으로 제공되는 시스템 변수이므로 직접 만들 필요 없음",
      "teaching_moment": "전화기의 마지막 통화 기록처럼, '대답'은 항상 가장 최근 입력값을 자동 저장해요."
    },
    {
      "mistake": "여러 질문의 답을 동시에 저장하려고 함",
      "why_it_happens": "'대답' 변수가 매번 덮어쓰기 된다는 것을 모름",
      "consequence": "이전 답변이 사라지고 마지막 답변만 남음",
      "solution": "각 답변을 별도의 변수에 즉시 저장",
      "teaching_moment": "칠판에 쓰고 지우는 것처럼, 새로운 답변은 이전 답변을 덮어써요."
    },
    {
      "mistake": "입력 대기 없이 바로 대답 사용",
      "why_it_happens": "비동기 처리로 착각",
      "consequence": "빈 값이나 이전 값이 사용됨",
      "solution": "묻고 대답 기다리기 블록 직후에 대답 변수 사용",
      "teaching_moment": "질문하고 대답을 듣기 전에는 답을 알 수 없는 것처럼, 순서가 중요해요."
    },
    {
      "mistake": "반복문 안에서 연속 질문 시 문제",
      "why_it_happens": "입력 대기가 프로그램을 멈추는 것을 고려하지 않음",
      "consequence": "의도하지 않은 동작이나 무한 대기",
      "solution": "반복 조건과 입력 처리 로직을 신중히 설계",
      "teaching_moment": "줄을 서서 차례를 기다리는 것처럼, 한 번에 하나씩 처리해야 해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "감지 카테고리 선택",
      "instruction": "블록 팔레트에서 '감지' 카테고리를 클릭하세요.",
      "visual_hint": "하늘색 카테고리를 찾아보세요."
    },
    {
      "step": 2,
      "title": "묻고 대답 기다리기 블록 찾기",
      "instruction": "'[ ] 묻고 대답 기다리기' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "말풍선 모양이 있는 블록이에요."
    },
    {
      "step": 3,
      "title": "질문 입력",
      "instruction": "블록의 텍스트 입력란에 질문을 입력하세요.",
      "visual_hint": "클릭해서 직접 타이핑하거나, 변수를 넣을 수도 있어요."
    },
    {
      "step": 4,
      "title": "이벤트와 연결",
      "instruction": "시작 블록이나 다른 이벤트 블록 아래에 연결하세요.",
      "visual_hint": "블록들이 퍼즐처럼 연결되어야 해요."
    },
    {
      "step": 5,
      "title": "대답 활용",
      "instruction": "감지 카테고리에서 '대답' 블록을 찾아 활용하세요.",
      "visual_hint": "둥근 모양의 '대답' 블록을 조건문이나 변수에 사용해요."
    },
    {
      "step": 6,
      "title": "테스트",
      "instruction": "프로그램을 실행하고 질문에 답변을 입력해보세요.",
      "visual_hint": "입력창에 답을 쓰고 엔터키나 확인 버튼을 누르세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "answer",
      "block_name": "대답",
      "relationship": "입력값 저장",
      "explanation": "사용자가 입력한 최근 답변이 저장되는 시스템 변수"
    },
    {
      "block_id": "say",
      "block_name": "[ ] 말하기",
      "relationship": "출력 표시",
      "explanation": "질문하기 전이나 답변 후 메시지를 표시할 때 사용"
    },
    {
      "block_id": "set_variable",
      "block_name": "[변수]를 [값]으로 정하기",
      "relationship": "답변 저장",
      "explanation": "대답을 다른 변수에 저장하여 나중에 사용"
    },
    {
      "block_id": "if_condition",
      "block_name": "만약 ~라면",
      "relationship": "답변 검증",
      "explanation": "입력받은 답변을 조건에 따라 다르게 처리"
    },
    {
      "block_id": "join",
      "block_name": "[ ]와(과) [ ] 결합하기",
      "relationship": "문자열 조합",
      "explanation": "답변을 다른 텍스트와 결합하여 메시지 생성"
    }
  ],

  "debugging_tips": [
    {
      "problem": "입력창이 안 나타나요",
      "possible_causes": ["블록이 실행되지 않음", "브라우저 팝업 차단", "이미 다른 입력창이 열려있음", "프로그램이 멈춤 상태"],
      "solutions": [
        "블록이 이벤트와 제대로 연결되었는지 확인",
        "브라우저 팝업 허용 설정 확인",
        "이전 입력창을 닫고 다시 실행",
        "정지 버튼 누르고 다시 시작"
      ]
    },
    {
      "problem": "답변이 저장되지 않아요",
      "possible_causes": ["대답 변수를 잘못 사용", "입력 전에 대답 변수 사용", "다른 질문이 덮어씀"],
      "solutions": ["감지 카테고리의 '대답' 블록 사용", "묻고 대답 기다리기 직후에 사용", "각 답변을 별도 변수에 즉시 저장"]
    },
    {
      "problem": "숫자 계산이 안 돼요",
      "possible_causes": ["문자와 숫자 혼용", "잘못된 연산자 사용", "빈 값 입력"],
      "solutions": ["숫자만 입력하도록 안내", "입력값 검증 로직 추가", "기본값 설정하기"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "ATM 비밀번호 입력",
      "explanation": "ATM에서 비밀번호를 입력하고 확인 버튼을 누르는 것과 같은 방식입니다."
    },
    {
      "analogy": "검색창",
      "explanation": "구글 검색창에 검색어를 입력하고 엔터를 누르는 것과 유사합니다."
    },
    {
      "analogy": "설문조사",
      "explanation": "온라인 설문조사에서 질문에 답하고 다음 버튼을 누르는 과정과 같습니다."
    },
    {
      "analogy": "챗봇 대화",
      "explanation": "카카오톡 챗봇과 대화할 때 메시지를 입력하고 전송하는 것과 비슷합니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "입력값 검증 시스템",
      "description": "올바른 형식의 입력만 받아들이는 강력한 검증 시스템",
      "use_case": "이메일 주소, 전화번호 등 특정 형식의 데이터 입력받기"
    },
    {
      "concept": "다중 선택 시스템",
      "description": "번호로 선택지를 입력받아 처리하는 메뉴 시스템",
      "use_case": "1~4번 중 선택하는 객관식 퀴즈나 게임 메뉴"
    },
    {
      "concept": "대화형 AI 챗봇",
      "description": "연속적인 질문과 답변으로 자연스러운 대화 구현",
      "use_case": "학습 도우미, 상담 챗봇, 인터랙티브 스토리"
    },
    {
      "concept": "데이터 수집 폼",
      "description": "여러 정보를 순차적으로 입력받아 저장하는 시스템",
      "use_case": "회원가입, 설문조사, 주문서 작성"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "질문하고 답변을 받아 간단한 반응을 보일 수 있다",
      "example": "이름을 묻고 인사하기, 좋아하는 색 묻기"
    },
    {
      "level": "중급",
      "criteria": "입력값을 검증하고 조건에 따라 다르게 처리할 수 있다",
      "example": "퀴즈 게임, 비밀번호 확인, 선택형 스토리"
    },
    {
      "level": "고급",
      "criteria": "복잡한 대화형 시스템을 설계하고 구현할 수 있다",
      "example": "다단계 입력 폼, 대화형 학습 시스템, 복잡한 분기 스토리"
    }
  ]
}
