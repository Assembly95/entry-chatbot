{
  "id": "function_general",
  "category": "function",
  "name": "함수 호출하기",
  "description": "정의된 함수를 실행하는 블록입니다. 함수 이름을 선택하고 필요한 매개변수 값들을 전달하여 함수를 호출합니다. 코드 재사용의 핵심으로, 한 번 정의한 함수를 여러 곳에서 반복해서 사용할 수 있게 합니다.",

  "educational_context": {
    "learning_objectives": [
      "함수 호출의 개념과 메커니즘 이해",
      "매개변수 전달과 인자의 관계 학습",
      "코드 재사용을 통한 효율적 프로그래밍",
      "함수 호출 시점과 실행 흐름 파악",
      "모듈화된 프로그램 구조 설계 능력 개발"
    ],
    "key_concepts": [
      {
        "concept": "함수 호출 (Function Call)",
        "explanation": "미리 정의된 함수를 실행하는 것으로, 함수 이름과 필요한 인자를 제공하여 함수의 코드를 실행합니다."
      },
      {
        "concept": "인자 (Argument)",
        "explanation": "함수 호출 시 전달하는 실제 값으로, 함수 정의의 매개변수에 대응됩니다."
      },
      {
        "concept": "실행 흐름",
        "explanation": "함수가 호출되면 현재 위치를 기억하고 함수 내부로 이동했다가 완료 후 돌아옵니다."
      },
      {
        "concept": "코드 재사용",
        "explanation": "한 번 정의한 함수를 여러 번 호출하여 같은 코드를 반복 작성하지 않고 재사용합니다."
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": ["함수 정의 방법 이해", "매개변수 개념 숙지", "프로그램 실행 흐름 이해", "기본 블록 프로그래밍 경험"]
  },

  "usage_examples": [
    {
      "title": "도형 그리기 반복 호출",
      "description": "같은 함수를 다른 인자로 여러 번 호출",
      "blocks": [
        "function_create('다각형그리기', [number_param('변의수'), number_param('크기')])",
        "  start_drawing",
        "  repeat_basic(<param('변의수')>)",
        "    move_direction(<param('크기')>)",
        "    direction_relative(<calc_operation(360, '/', <param('변의수')>)>)",
        "  stop_drawing",
        "",
        "when_run_button_click",
        "// 삼각형 그리기",
        "function_general('다각형그리기', [3, 100])",
        "move_xy(150, 0)",
        "// 사각형 그리기",
        "function_general('다각형그리기', [4, 80])",
        "move_xy(-150, -150)",
        "// 육각형 그리기",
        "function_general('다각형그리기', [6, 60])"
      ],
      "explanation": "하나의 함수를 다른 매개변수로 여러 번 호출하여 다양한 도형을 그립니다."
    },
    {
      "title": "계산 함수 활용",
      "description": "복잡한 계산을 함수로 처리",
      "blocks": [
        "function_create('평균구하기', [list_param('숫자들')])",
        "  set_variable('합계', 0)",
        "  set_variable('개수', <length_of_list(<param('숫자들')>)>)",
        "  foreach_list(<param('숫자들')>, 'num')",
        "    change_variable('합계', <get_variable('num')>)",
        "  set_variable('평균', <calc_operation(<get_variable('합계')>, '/', <get_variable('개수')>)>)",
        "  speak_something('평균: ' + <get_variable('평균')>)",
        "  return <get_variable('평균')>",
        "",
        "when_run_button_click",
        "set_list('점수1', [85, 90, 78, 92, 88])",
        "set_list('점수2', [70, 75, 80, 85, 90])",
        "// 첫 번째 그룹 평균",
        "function_general('평균구하기', [<get_list('점수1')>])",
        "// 두 번째 그룹 평균",
        "function_general('평균구하기', [<get_list('점수2')>])",
        "// 전체 평균",
        "set_list('전체', <combine_list(<get_list('점수1')>, <get_list('점수2')>)>)",
        "function_general('평균구하기', [<get_list('전체')>])"
      ],
      "explanation": "평균 계산 함수를 여러 데이터셋에 대해 반복 호출합니다."
    },
    {
      "title": "애니메이션 시퀀스",
      "description": "여러 애니메이션 함수를 순차적으로 호출",
      "blocks": [
        "function_create('페이드인', [number_param('속도')])",
        "  set_transparency(100)",
        "  repeat_basic(10)",
        "    change_transparency(-10)",
        "    wait_second(<param('속도')>)",
        "",
        "function_create('회전애니메이션', [number_param('각도'), number_param('단계')])",
        "  repeat_basic(<param('단계')>)",
        "    direction_relative(<calc_operation(<param('각도')>, '/', <param('단계')>)>)",
        "    wait_second(0.05)",
        "",
        "function_create('크기변화', [number_param('목표크기'), number_param('속도')])",
        "  set_variable('현재크기', <get_size()>)",
        "  set_variable('차이', <calc_operation(<param('목표크기')>, '-', <get_variable('현재크기')>)>)",
        "  repeat_basic(10)",
        "    change_size(<calc_operation(<get_variable('차이')>, '/', 10)>)",
        "    wait_second(<param('속도')>)",
        "",
        "when_object_click",
        "// 애니메이션 시퀀스 실행",
        "function_general('페이드인', [0.1])",
        "function_general('회전애니메이션', [360, 20])",
        "function_general('크기변화', [150, 0.05])",
        "wait_second(0.5)",
        "function_general('크기변화', [100, 0.05])"
      ],
      "explanation": "여러 애니메이션 함수를 조합하여 복잡한 효과를 만듭니다."
    },
    {
      "title": "중첩 함수 호출",
      "description": "함수 내에서 다른 함수 호출",
      "blocks": [
        "function_create('거리계산', [number_param('x1'), number_param('y1'), number_param('x2'), number_param('y2')])",
        "  set_variable('dx', <calc_operation(<param('x2')>, '-', <param('x1')>)>)",
        "  set_variable('dy', <calc_operation(<param('y2')>, '-', <param('y1')>)>)",
        "  set_variable('거리', <calc_sqrt(<calc_operation(<calc_operation(<get_variable('dx')>, '*', <get_variable('dx')>)>, '+', <calc_operation(<get_variable('dy')>, '*', <get_variable('dy')>)>)>)>)",
        "  return <get_variable('거리')>",
        "",
        "function_create('가장가까운찾기', [list_param('위치들')])",
        "  set_variable('최소거리', 9999)",
        "  set_variable('가까운위치', 0)",
        "  foreach_list_with_index(<param('위치들')>, 'pos', 'index')",
        "    // 거리 함수 호출",
        "    set_variable('현재거리', <function_general('거리계산', [<coordinate_object('x')>, <coordinate_object('y')>, <get_list_item(<get_variable('pos')>, 'x')>, <get_list_item(<get_variable('pos')>, 'y')>])>)",
        "    if_condition(<get_variable('현재거리') < <get_variable('최소거리')>>)",
        "      set_variable('최소거리', <get_variable('현재거리')>)",
        "      set_variable('가까운위치', <get_variable('index')>)",
        "  speak_something('가장 가까운 위치: ' + <get_variable('가까운위치')>)",
        "",
        "when_run_button_click",
        "set_list('목표들', [[100, 50], [200, -100], [-50, 150]])",
        "function_general('가장가까운찾기', [<get_list('목표들')>])"
      ],
      "explanation": "함수 내부에서 다른 함수를 호출하는 중첩 구조입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "정의한 함수를 실행하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'함수' 카테고리에서 함수 호출 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'함수 호출하기' 블록을 선택하고 함수 이름을 선택하세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "매개변수가 있다면 필요한 값을 전달하세요"
        }
      ]
    },
    {
      "situation": "함수에 값을 전달하는 방법을 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "함수 정의의 매개변수 개수와 타입을 확인하세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "함수 호출 블록의 빈 칸에 값을 넣으세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "변수나 계산 결과도 인자로 전달할 수 있어요"
        }
      ]
    },
    {
      "situation": "함수를 여러 번 사용하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "같은 함수를 여러 번 호출할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "필요한 곳마다 function_general 블록을 배치하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "반복문 안에서도 함수를 호출할 수 있어요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "함수 이름을 잘못 선택",
      "why_it_happens": "함수 이름을 정확히 기억하지 못함",
      "consequence": "잘못된 함수가 실행되거나 오류 발생",
      "solution": "정의한 함수 이름을 정확히 확인",
      "teaching_moment": "함수 이름은 정확히 일치해야 해요. 드롭다운에서 선택하세요."
    },
    {
      "mistake": "매개변수 개수 불일치",
      "why_it_happens": "함수 정의와 다른 개수의 인자 전달",
      "consequence": "함수가 제대로 실행되지 않음",
      "solution": "함수 정의의 매개변수 개수 확인",
      "teaching_moment": "함수가 요구하는 매개변수 개수를 정확히 맞춰야 해요."
    },
    {
      "mistake": "잘못된 타입의 인자 전달",
      "why_it_happens": "매개변수 타입을 고려하지 않음",
      "consequence": "예상과 다른 동작이나 오류",
      "solution": "각 매개변수의 타입에 맞는 값 전달",
      "teaching_moment": "숫자, 문자열, 불린 등 타입을 맞춰서 전달해야 해요."
    },
    {
      "mistake": "함수 정의 전에 호출",
      "why_it_happens": "함수 정의 순서를 고려하지 않음",
      "consequence": "함수를 찾을 수 없다는 오류",
      "solution": "함수를 먼저 정의한 후 호출",
      "teaching_moment": "함수는 정의된 후에만 호출할 수 있어요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "함수 카테고리 열기",
      "instruction": "블록 팔레트에서 '함수' 카테고리를 클릭하세요.",
      "visual_hint": "함수 관련 블록들이 표시됩니다."
    },
    {
      "step": 2,
      "title": "함수 호출 블록 선택",
      "instruction": "'함수 호출하기' 블록을 작업 영역으로 드래그하세요.",
      "visual_hint": "실행 블록 형태로 다른 블록과 연결할 수 있습니다."
    },
    {
      "step": 3,
      "title": "함수 이름 선택",
      "instruction": "드롭다운 메뉴에서 호출할 함수 이름을 선택하세요.",
      "visual_hint": "정의된 함수 목록이 표시됩니다."
    },
    {
      "step": 4,
      "title": "인자 값 입력",
      "instruction": "함수가 요구하는 매개변수에 해당하는 값들을 입력하세요.",
      "visual_hint": "각 매개변수 자리에 값, 변수, 또는 계산식을 넣습니다."
    },
    {
      "step": 5,
      "title": "실행 위치 배치",
      "instruction": "함수를 호출할 위치(이벤트나 다른 블록 내부)에 배치하세요.",
      "visual_hint": "함수 호출 블록이 실행될 적절한 위치에 연결합니다."
    }
  ],

  "related_blocks": [
    {
      "block_id": "function_create",
      "relationship": "함수 정의",
      "explanation": "호출할 함수를 먼저 정의해야 함"
    },
    {
      "block_id": "function_return",
      "relationship": "반환값 활용",
      "explanation": "함수가 반환하는 값을 받아 사용"
    },
    {
      "block_id": "param",
      "relationship": "매개변수 접근",
      "explanation": "함수 내부에서 전달받은 값 사용"
    },
    {
      "block_id": "set_variable",
      "relationship": "결과 저장",
      "explanation": "함수 호출 결과를 변수에 저장"
    },
    {
      "block_id": "repeat_basic",
      "relationship": "반복 호출",
      "explanation": "반복문 내에서 함수를 여러 번 호출"
    },
    {
      "block_id": "if_condition",
      "relationship": "조건부 호출",
      "explanation": "특정 조건에서만 함수 호출"
    }
  ],

  "debugging_tips": [
    {
      "problem": "함수가 실행되지 않아요",
      "possible_causes": ["함수가 정의되지 않음", "함수 이름 오타", "호출 블록이 연결되지 않음", "실행 흐름에서 벗어남"],
      "solutions": ["함수 정의 확인", "함수 이름 재선택", "블록 연결 상태 확인", "실행 경로 점검"]
    },
    {
      "problem": "예상과 다른 결과가 나와요",
      "possible_causes": ["잘못된 인자 전달", "매개변수 순서 혼동", "타입 불일치", "함수 내부 로직 오류"],
      "solutions": ["전달하는 값 확인", "매개변수 순서 확인", "타입 일치 확인", "함수 정의 검토"]
    },
    {
      "problem": "함수 호출이 너무 느려요",
      "possible_causes": ["함수 내부가 너무 복잡", "중첩 호출이 너무 깊음", "불필요한 반복 호출"],
      "solutions": ["함수 로직 최적화", "중첩 깊이 줄이기", "호출 횟수 최소화"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "전화 걸기",
      "explanation": "전화번호(함수 이름)를 눌러 상대방(함수)을 호출하는 것과 같습니다."
    },
    {
      "analogy": "레시피 따라하기",
      "explanation": "요리책의 레시피(함수)를 필요할 때마다 참고하여 요리하는 것과 비슷합니다."
    },
    {
      "analogy": "리모컨 버튼",
      "explanation": "리모컨 버튼(함수 호출)을 누르면 정해진 동작(함수)이 실행됩니다."
    },
    {
      "analogy": "ATM 메뉴 선택",
      "explanation": "ATM에서 메뉴(함수)를 선택하고 필요한 정보(인자)를 입력하는 것과 같습니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "콜백 함수",
      "description": "함수를 인자로 전달하여 나중에 호출",
      "use_case": "이벤트 처리, 비동기 작업, 타이머"
    },
    {
      "concept": "재귀 호출",
      "description": "함수가 자기 자신을 호출",
      "use_case": "트리 탐색, 팩토리얼, 피보나치"
    },
    {
      "concept": "함수 체이닝",
      "description": "여러 함수를 연속적으로 호출",
      "use_case": "데이터 파이프라인, 변환 체인"
    },
    {
      "concept": "동적 함수 호출",
      "description": "실행 시점에 호출할 함수 결정",
      "use_case": "플러그인 시스템, 명령 패턴"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "간단한 함수를 정확히 호출하고 기본 인자를 전달할 수 있다",
      "example": "매개변수 없는 함수, 단순 값 전달"
    },
    {
      "level": "중급",
      "criteria": "복잡한 인자와 여러 함수를 조합하여 프로그램을 구성할 수 있다",
      "example": "변수와 계산식 인자, 순차적 함수 호출, 조건부 호출"
    },
    {
      "level": "고급",
      "criteria": "중첩 호출과 고급 패턴을 활용한 복잡한 시스템을 구현할 수 있다",
      "example": "재귀 호출, 함수 체이닝, 동적 호출 패턴"
    }
  ]
}
