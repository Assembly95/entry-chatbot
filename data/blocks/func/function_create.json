{
  "id": "function_create",
  "category": "function",
  "name": "함수 만들기",
  "description": "반복적으로 사용되는 코드를 하나의 함수로 정의하는 블록입니다. 함수 이름을 지정하고 매개변수를 추가할 수 있으며, 함수 내부에 실행할 블록들을 배치합니다. 코드 재사용과 모듈화의 핵심 기능입니다.",

  "educational_context": {
    "learning_objectives": [
      "함수의 개념과 필요성 이해",
      "코드 재사용과 모듈화의 중요성 학습",
      "매개변수와 인자의 활용법 익히기",
      "추상화와 캡슐화 개념 습득",
      "효율적인 프로그램 구조 설계 능력 개발"
    ],
    "key_concepts": [
      {
        "concept": "함수 정의",
        "explanation": "특정 작업을 수행하는 코드 묶음에 이름을 붙여 재사용 가능한 단위로 만드는 것입니다."
      },
      {
        "concept": "매개변수 (Parameter)",
        "explanation": "함수가 실행될 때 외부에서 받아올 수 있는 입력값으로, 함수를 더 유연하게 만듭니다."
      },
      {
        "concept": "코드 재사용",
        "explanation": "한 번 작성한 코드를 여러 곳에서 반복해서 사용할 수 있어 효율성이 높아집니다."
      },
      {
        "concept": "모듈화",
        "explanation": "큰 프로그램을 작은 기능 단위로 나누어 관리하고 개발하는 프로그래밍 방식입니다."
      }
    ],
    "difficulty_level": "고급",
    "prerequisites": ["기본 블록 프로그래밍 경험", "변수 사용법 숙지", "반복문과 조건문 활용 능력", "프로그램 구조에 대한 이해"]
  },

  "usage_examples": [
    {
      "title": "도형 그리기 함수",
      "description": "다각형을 그리는 재사용 가능한 함수",
      "blocks": [
        "function_create('다각형그리기', ['변의수', '길이'])",
        "  start_drawing",
        "  repeat_basic(<param('변의수')>)",
        "    move_direction(<param('길이')>)",
        "    direction_relative(<calc_operation(360, '/', <param('변의수')>)>)",
        "  stop_drawing",
        "",
        "when_run_button_click",
        "function_call('다각형그리기', [3, 100])",
        "move_xy(150, 0)",
        "function_call('다각형그리기', [4, 80])",
        "move_xy(-150, -100)",
        "function_call('다각형그리기', [6, 60])"
      ],
      "explanation": "매개변수로 변의 수와 길이를 받아 다양한 다각형을 그리는 함수입니다."
    },
    {
      "title": "점수 계산 함수",
      "description": "보너스 점수를 계산하는 함수",
      "blocks": [
        "function_create('점수계산', ['기본점수', '보너스'])",
        "  set_variable('최종점수', <calc_operation(<param('기본점수')>, '*', <param('보너스')>)>)",
        "  if_condition(<get_variable('최종점수') > 100>)",
        "    speak_something('대단해요! 100점 넘었어요!')",
        "  change_variable('총점', <get_variable('최종점수')>)",
        "  set_text('현재 총점: ' + <get_variable('총점')>)",
        "",
        "when_run_button_click",
        "set_variable('총점', 0)",
        "function_call('점수계산', [50, 1.5])",
        "wait_second(1)",
        "function_call('점수계산', [30, 2])",
        "wait_second(1)",
        "function_call('점수계산', [40, 1.2])"
      ],
      "explanation": "기본 점수와 보너스 배수를 받아 점수를 계산하고 총점에 추가하는 함수입니다."
    },
    {
      "title": "애니메이션 함수",
      "description": "페이드 인/아웃 효과 함수",
      "blocks": [
        "function_create('페이드효과', ['방향', '속도'])",
        "  if_condition(<param('방향')> = 'in')",
        "    set_transparency(100)",
        "    repeat_basic(10)",
        "      change_transparency(-10)",
        "      wait_second(<param('속도')>)",
        "  else_if(<param('방향')> = 'out')",
        "    set_transparency(0)",
        "    repeat_basic(10)",
        "      change_transparency(10)",
        "      wait_second(<param('속도')>)",
        "",
        "when_object_click",
        "function_call('페이드효과', ['out', 0.1])",
        "move_to_random_position",
        "function_call('페이드효과', ['in', 0.1])"
      ],
      "explanation": "방향과 속도를 매개변수로 받아 페이드 효과를 만드는 재사용 가능한 함수입니다."
    },
    {
      "title": "충돌 처리 함수",
      "description": "적과 충돌 시 처리 함수",
      "blocks": [
        "function_create('충돌처리', ['데미지'])",
        "  change_variable('체력', -<param('데미지')>)",
        "  set_effect('color', 100)",
        "  wait_second(0.2)",
        "  set_effect('color', 0)",
        "  if_condition(<get_variable('체력') <= 0>)",
        "    speak_something('게임 오버!')",
        "    broadcast_message('게임종료')",
        "  else",
        "    set_text('체력: ' + <get_variable('체력')>)",
        "",
        "when_run_button_click",
        "set_variable('체력', 100)",
        "repeat_while_true",
        "  if_condition(<is_touched('작은적')>)",
        "    function_call('충돌처리', [10])",
        "    wait_second(1)",
        "  if_condition(<is_touched('큰적')>)",
        "    function_call('충돌처리', [30])",
        "    wait_second(1)"
      ],
      "explanation": "적의 종류에 따른 데미지를 매개변수로 받아 충돌을 처리하는 함수입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "반복되는 코드를 함수로 만들고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'함수' 카테고리에서 함수 만들기 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'함수 만들기' 블록을 사용하고 이름을 지정하세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "함수 안에 실행할 코드를 넣고, 다른 곳에서 호출하여 사용하세요"
        }
      ]
    },
    {
      "situation": "함수에 값을 전달하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "매개변수를 추가하면 함수 호출 시 값을 전달할 수 있어요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "함수 만들기 블록에서 '매개변수 추가' 버튼을 클릭하세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "함수 내부에서 매개변수 블록으로 전달받은 값을 사용하세요"
        }
      ]
    },
    {
      "situation": "함수를 더 효율적으로 만들고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "하나의 함수는 하나의 명확한 기능만 수행하도록 만드세요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "매개변수를 활용해 다양한 상황에서 사용할 수 있게 하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "함수 이름은 기능을 명확히 나타내도록 지으세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "함수 정의와 호출을 혼동",
      "why_it_happens": "함수 만들기와 사용의 차이를 이해하지 못함",
      "consequence": "함수가 실행되지 않거나 오류 발생",
      "solution": "함수 만들기는 정의, function_call이 실제 실행",
      "teaching_moment": "함수를 만드는 것과 사용하는 것은 다른 단계예요. 먼저 만들고, 필요할 때 호출하세요."
    },
    {
      "mistake": "매개변수와 인자를 잘못 사용",
      "why_it_happens": "매개변수 개수나 순서를 맞추지 않음",
      "consequence": "함수가 예상과 다르게 작동",
      "solution": "정의한 매개변수 순서와 개수를 정확히 맞춰 호출",
      "teaching_moment": "함수를 호출할 때는 정의한 매개변수와 같은 개수, 같은 순서로 값을 전달해야 해요."
    },
    {
      "mistake": "함수 내부에서 전역 변수 남용",
      "why_it_happens": "매개변수 대신 전역 변수에 의존",
      "consequence": "함수 재사용성 떨어짐",
      "solution": "필요한 값은 매개변수로 전달받기",
      "teaching_moment": "함수는 독립적으로 작동하도록 만드는 것이 좋아요. 매개변수를 활용하세요."
    },
    {
      "mistake": "너무 복잡한 함수 생성",
      "why_it_happens": "하나의 함수에 너무 많은 기능 포함",
      "consequence": "이해하기 어렵고 디버깅 곤란",
      "solution": "한 함수는 하나의 명확한 작업만 수행",
      "teaching_moment": "함수는 작고 명확한 기능 단위로 나누는 것이 좋아요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "함수 카테고리 찾기",
      "instruction": "블록 팔레트에서 '함수' 카테고리를 클릭하세요.",
      "visual_hint": "함수 아이콘이 있는 카테고리입니다."
    },
    {
      "step": 2,
      "title": "함수 만들기 블록 추가",
      "instruction": "'함수 만들기' 블록을 작업 영역으로 드래그하세요.",
      "visual_hint": "독립적으로 배치되는 정의 블록입니다."
    },
    {
      "step": 3,
      "title": "함수 이름과 매개변수 설정",
      "instruction": "함수 이름을 입력하고 필요하면 매개변수를 추가하세요.",
      "visual_hint": "함수가 하는 일을 설명하는 명확한 이름을 사용합니다."
    },
    {
      "step": 4,
      "title": "함수 내용 구현",
      "instruction": "함수 블록 안에 실행할 코드를 배치하세요.",
      "visual_hint": "매개변수 블록을 활용하여 전달받은 값을 사용합니다."
    },
    {
      "step": 5,
      "title": "함수 호출하기",
      "instruction": "다른 이벤트나 함수에서 'function_call' 블록으로 호출하세요.",
      "visual_hint": "정의한 매개변수에 맞는 값을 전달합니다."
    }
  ],

  "related_blocks": [
    {
      "block_id": "function_call",
      "relationship": "함수 호출",
      "explanation": "정의한 함수를 실제로 실행할 때 사용"
    },
    {
      "block_id": "function_return",
      "relationship": "값 반환",
      "explanation": "함수에서 결과값을 반환할 때 사용"
    },
    {
      "block_id": "param",
      "relationship": "매개변수 사용",
      "explanation": "함수 내부에서 전달받은 매개변수 값에 접근"
    },
    {
      "block_id": "set_variable",
      "relationship": "지역 변수",
      "explanation": "함수 내부에서 사용할 변수 설정"
    },
    {
      "block_id": "broadcast_message",
      "relationship": "대안 방법",
      "explanation": "함수 대신 메시지로 코드를 실행하는 다른 방법"
    },
    {
      "block_id": "when_run_button_click",
      "relationship": "함수 사용처",
      "explanation": "이벤트 블록에서 함수를 호출하는 일반적인 위치"
    }
  ],

  "debugging_tips": [
    {
      "problem": "함수가 실행되지 않아요",
      "possible_causes": ["함수 호출을 하지 않음", "함수 이름이 일치하지 않음", "매개변수 개수 불일치", "함수 정의가 없음"],
      "solutions": [
        "function_call 블록으로 호출했는지 확인",
        "함수 이름 정확히 일치시키기",
        "매개변수 개수와 순서 확인",
        "함수 정의 블록이 있는지 확인"
      ]
    },
    {
      "problem": "함수가 예상과 다르게 작동해요",
      "possible_causes": ["매개변수 값이 잘못됨", "전역 변수와 충돌", "함수 내부 로직 오류", "매개변수 순서 혼동"],
      "solutions": ["전달하는 값이 올바른지 확인", "변수 이름 중복 확인", "함수 내부 코드 단계별 점검", "매개변수 순서 재확인"]
    },
    {
      "problem": "함수가 너무 복잡해요",
      "possible_causes": ["하나의 함수에 너무 많은 기능", "중첩이 너무 깊음", "매개변수가 너무 많음"],
      "solutions": ["기능별로 함수 분리", "복잡한 부분을 별도 함수로", "매개변수 개수 줄이기"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "요리 레시피",
      "explanation": "레시피처럼 한 번 만든 방법을 여러 번 사용할 수 있습니다."
    },
    {
      "analogy": "수학 공식",
      "explanation": "공식에 값을 대입하면 결과를 얻는 것처럼 함수도 입력값에 따라 동작합니다."
    },
    {
      "analogy": "자동판매기",
      "explanation": "버튼(함수 호출)을 누르면 정해진 동작(함수 내용)을 수행합니다."
    },
    {
      "analogy": "레고 블록",
      "explanation": "작은 블록(함수)들을 조합해서 큰 작품(프로그램)을 만드는 것과 같습니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "재귀 함수",
      "description": "함수가 자기 자신을 호출하는 고급 패턴",
      "use_case": "팩토리얼 계산, 트리 구조 탐색, 프랙탈 그리기"
    },
    {
      "concept": "고차 함수",
      "description": "함수를 매개변수로 받거나 반환하는 함수",
      "use_case": "이벤트 핸들러, 콜백 함수, 함수 합성"
    },
    {
      "concept": "함수 라이브러리",
      "description": "자주 사용하는 함수들을 모아둔 재사용 가능한 코드 모음",
      "use_case": "유틸리티 함수, 게임 엔진, 그래픽 라이브러리"
    },
    {
      "concept": "함수형 프로그래밍",
      "description": "함수를 중심으로 프로그램을 구성하는 패러다임",
      "use_case": "순수 함수, 불변성, 함수 조합"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "간단한 함수를 만들고 호출할 수 있다",
      "example": "인사말 함수, 기본 도형 그리기 함수"
    },
    {
      "level": "중급",
      "criteria": "매개변수를 활용한 유연한 함수를 설계할 수 있다",
      "example": "다양한 도형 그리기, 점수 계산, 애니메이션 효과"
    },
    {
      "level": "고급",
      "criteria": "복잡한 로직을 함수로 모듈화하고 체계적으로 구성할 수 있다",
      "example": "게임 시스템, 재귀 함수, 함수 라이브러리 구축"
    }
  ]
}
