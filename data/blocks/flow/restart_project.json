{
  "id": "restart_project",
  "category": "flow",
  "name": "프로젝트 다시 시작하기",
  "description": "현재 실행 중인 프로젝트를 완전히 초기화하고 처음부터 다시 시작하는 블록입니다. 모든 변수, 복제본, 타이머가 초기 상태로 리셋되며, '시작하기 버튼을 클릭했을 때' 이벤트부터 다시 실행됩니다.",

  "educational_context": {
    "learning_objectives": [
      "프로그램 초기화와 재시작 개념 이해",
      "전역 리셋과 상태 관리 방법 학습",
      "게임 재시작 메커니즘 구현 능력 개발",
      "메모리 정리와 초기화의 중요성 인식",
      "프로그램 생명주기 관리 방법 익히기"
    ],
    "key_concepts": [
      {
        "concept": "완전 초기화",
        "explanation": "모든 변수, 복제본, 타이머, 오브젝트 상태가 프로젝트 시작 시점으로 되돌아가는 완전한 리셋입니다."
      },
      {
        "concept": "프로그램 재시작",
        "explanation": "현재 실행을 중단하고 처음부터 새로 시작하는 것으로, 새로고침과 유사한 효과입니다."
      },
      {
        "concept": "상태 리셋",
        "explanation": "누적된 모든 상태 정보를 삭제하고 초기 상태로 되돌리는 과정입니다."
      },
      {
        "concept": "이벤트 재실행",
        "explanation": "시작 이벤트부터 다시 실행되어 프로그램이 처음 실행될 때와 동일하게 작동합니다."
      }
    ],
    "difficulty_level": "중급",
    "prerequisites": ["프로그램 흐름 이해", "변수와 상태 개념 숙지", "이벤트 블록 사용 경험", "게임 로직 기본 지식"]
  },

  "usage_examples": [
    {
      "title": "게임 오버 후 재시작",
      "description": "게임 오버 시 자동으로 처음부터 다시 시작",
      "blocks": [
        "when_run_button_click",
        "set_variable('생명', 3)",
        "set_variable('점수', 0)",
        "speak_something('게임 시작!')",
        "",
        "when_message_cast('게임오버')",
        "speak_something('게임 오버!')",
        "set_text('최종 점수: ' + <get_variable('점수')>)",
        "wait_second(3)",
        "ask_and_wait('다시 시작하시겠습니까? (y/n)')",
        "if_condition(<get_variable('답변') = 'y'>)",
        "  restart_project"
      ],
      "explanation": "게임 오버 후 사용자가 원하면 프로젝트를 완전히 재시작합니다."
    },
    {
      "title": "리셋 버튼 구현",
      "description": "특정 키를 누르면 언제든지 처음부터 시작",
      "blocks": [
        "when_some_key_pressed('r')",
        "ask_and_wait('정말 처음부터 다시 시작하시겠습니까? (확인/취소)')",
        "if_condition(<get_variable('답변') = '확인'>)",
        "  speak_something('프로젝트를 다시 시작합니다')",
        "  wait_second(1)",
        "  restart_project",
        "else",
        "  speak_something('취소되었습니다')"
      ],
      "explanation": "R키를 누르면 확인 후 프로젝트를 재시작하는 리셋 기능입니다."
    },
    {
      "title": "시간 제한 게임",
      "description": "제한 시간이 끝나면 자동 재시작",
      "blocks": [
        "when_run_button_click",
        "set_variable('제한시간', 30)",
        "set_variable('점수', 0)",
        "repeat_while_true(<get_variable('제한시간') > 0>)",
        "  set_text('남은 시간: ' + <get_variable('제한시간')> + '초')",
        "  wait_second(1)",
        "  change_variable('제한시간', -1)",
        "speak_something('시간 종료!')",
        "set_text('점수: ' + <get_variable('점수')>)",
        "wait_second(2)",
        "speak_something('3초 후 재시작합니다')",
        "wait_second(3)",
        "restart_project"
      ],
      "explanation": "제한 시간이 끝나면 자동으로 게임을 재시작하는 무한 반복 게임입니다."
    },
    {
      "title": "오류 복구 시스템",
      "description": "치명적 오류 발생 시 자동 재시작",
      "blocks": [
        "when_run_button_click",
        "set_variable('오류_카운트', 0)",
        "",
        "when_message_cast('오류발생')",
        "change_variable('오류_카운트', 1)",
        "speak_something('오류 ' + <get_variable('오류_카운트')> + '회 발생')",
        "if_condition(<get_variable('오류_카운트') >= 3>)",
        "  speak_something('치명적 오류! 시스템을 재시작합니다')",
        "  wait_second(2)",
        "  restart_project",
        "else",
        "  speak_something('계속 진행합니다')"
      ],
      "explanation": "오류가 3번 이상 발생하면 자동으로 프로젝트를 재시작하여 복구합니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "프로젝트를 처음부터 다시 시작하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'흐름' 카테고리에서 프로젝트 제어 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'프로젝트 다시 시작하기' 블록을 사용하세요"
        },
        {
          "step": 3,
          "hint_type": "concept",
          "content": "이 블록을 실행하면 모든 것이 초기화되고 처음부터 다시 시작해요"
        }
      ]
    },
    {
      "situation": "게임 오버 후 재시작 기능을 만들고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "게임 오버 조건을 확인한 후 재시작 블록을 실행하면 돼요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "사용자 확인을 받으려면 '감지' 카테고리의 묻기 블록을 활용하세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "조건 블록 안에 restart_project를 넣어서 선택적으로 재시작하세요"
        }
      ]
    },
    {
      "situation": "재시작 전에 데이터를 저장하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "재시작 블록 실행 전에 필요한 데이터를 저장하세요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'자료' 카테고리의 리스트나 클라우드 변수를 활용할 수 있어요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "점수 저장 → 대기 → restart_project 순서로 구성하세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "재시작 후 코드가 실행될 것으로 기대",
      "why_it_happens": "재시작의 의미를 완전히 이해하지 못함",
      "consequence": "재시작 블록 이후의 코드는 실행되지 않음",
      "solution": "재시작 전에 필요한 모든 처리를 완료하기",
      "teaching_moment": "재시작은 즉시 처음부터 다시 시작해요. 그 뒤의 코드는 실행되지 않아요."
    },
    {
      "mistake": "변수가 유지될 것으로 기대",
      "why_it_happens": "일부 데이터는 남을 것으로 생각",
      "consequence": "모든 변수가 초기값으로 리셋됨",
      "solution": "영구 저장이 필요한 데이터는 클라우드 변수 사용",
      "teaching_moment": "재시작하면 모든 변수가 초기값으로 돌아가요. 완전한 리셋이에요."
    },
    {
      "mistake": "너무 자주 재시작 사용",
      "why_it_happens": "간단한 초기화도 재시작으로 해결하려 함",
      "consequence": "불필요한 전체 재시작으로 사용자 경험 저하",
      "solution": "부분 초기화가 가능한 경우 변수 리셋만 사용",
      "teaching_moment": "작은 초기화는 변수 리셋으로, 완전 초기화가 필요할 때만 재시작을 사용하세요."
    },
    {
      "mistake": "무한 재시작 루프",
      "why_it_happens": "시작 시 조건 없이 재시작 실행",
      "consequence": "프로그램이 계속 재시작되어 진행 불가",
      "solution": "재시작 조건을 명확히 설정하기",
      "teaching_moment": "재시작은 특정 조건에서만 실행되도록 주의해야 해요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "흐름 카테고리 찾기",
      "instruction": "블록 팔레트에서 주황색 '흐름' 카테고리를 클릭하세요.",
      "visual_hint": "화살표 모양의 아이콘이 있는 주황색 카테고리입니다."
    },
    {
      "step": 2,
      "title": "재시작 블록 선택",
      "instruction": "'프로젝트 다시 시작하기' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "단독으로 사용되는 실행 블록입니다."
    },
    {
      "step": 3,
      "title": "실행 조건 설정",
      "instruction": "재시작이 필요한 조건을 설정하고 조건 블록 안에 배치하세요.",
      "visual_hint": "게임 오버, 시간 종료, 사용자 요청 등의 조건을 확인합니다."
    },
    {
      "step": 4,
      "title": "사전 처리 추가",
      "instruction": "재시작 전에 필요한 메시지 표시나 데이터 저장을 추가하세요.",
      "visual_hint": "재시작 블록 실행 전에 모든 처리를 완료해야 합니다."
    },
    {
      "step": 5,
      "title": "테스트 및 확인",
      "instruction": "프로그램을 실행하여 재시작이 제대로 작동하는지 확인하세요.",
      "visual_hint": "모든 것이 초기 상태로 돌아가는지 확인합니다."
    }
  ],

  "related_blocks": [
    {
      "block_id": "when_run_button_click",
      "relationship": "시작 이벤트",
      "explanation": "재시작 시 이 이벤트부터 다시 실행됨"
    },
    {
      "block_id": "set_variable",
      "relationship": "변수 초기화",
      "explanation": "재시작하면 모든 변수가 초기값으로 리셋됨"
    },
    {
      "block_id": "remove_all_clones",
      "relationship": "복제본 정리",
      "explanation": "재시작 시 자동으로 모든 복제본이 삭제됨"
    },
    {
      "block_id": "reset_timer",
      "relationship": "타이머 리셋",
      "explanation": "재시작 시 타이머도 0으로 초기화됨"
    },
    {
      "block_id": "broadcast_message",
      "relationship": "이벤트 전달",
      "explanation": "재시작 전에 다른 오브젝트에 알림을 보낼 때 사용"
    },
    {
      "block_id": "stop_all",
      "relationship": "프로그램 중단",
      "explanation": "재시작과 달리 완전히 중단만 하는 블록"
    }
  ],

  "debugging_tips": [
    {
      "problem": "재시작이 작동하지 않아요",
      "possible_causes": ["블록이 실행되지 않는 위치에 있음", "조건이 만족되지 않음", "블록 연결 오류"],
      "solutions": ["블록 실행 경로 확인", "조건 로직 재검토", "블록 연결 상태 점검"]
    },
    {
      "problem": "무한 재시작 루프에 빠졌어요",
      "possible_causes": ["시작 시 무조건 재시작 실행", "조건이 항상 참", "초기화 로직 오류"],
      "solutions": ["재시작 조건을 더 구체적으로 설정", "플래그 변수로 첫 실행 구분", "조건문으로 재시작 제어"]
    },
    {
      "problem": "데이터가 사라져요",
      "possible_causes": ["일반 변수 사용", "저장 시점이 잘못됨", "클라우드 변수 미사용"],
      "solutions": ["영구 저장이 필요한 데이터는 클라우드 변수 사용", "재시작 전에 데이터 저장", "외부 저장소 활용 고려"]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "컴퓨터 재부팅",
      "explanation": "컴퓨터를 재시작하면 모든 프로그램이 종료되고 처음부터 다시 시작하는 것과 같습니다."
    },
    {
      "analogy": "게임기 리셋 버튼",
      "explanation": "옛날 게임기의 리셋 버튼을 누르면 게임이 처음부터 시작되는 것과 동일합니다."
    },
    {
      "analogy": "새 게임 시작",
      "explanation": "게임에서 'New Game'을 선택하면 모든 진행 상황이 초기화되는 것과 같습니다."
    },
    {
      "analogy": "웹페이지 새로고침",
      "explanation": "F5키로 웹페이지를 새로고침하면 페이지가 처음부터 다시 로드되는 것과 비슷합니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "소프트 리셋",
      "description": "일부 요소만 초기화하고 중요 데이터는 유지하는 부분 재시작",
      "use_case": "레벨 재시작, 라운드 초기화, 체크포인트 시스템"
    },
    {
      "concept": "자동 재시작 시스템",
      "description": "특정 조건에서 자동으로 재시작하는 스마트 시스템",
      "use_case": "오류 복구, 시간 제한 게임, 무한 반복 게임"
    },
    {
      "concept": "재시작 카운터",
      "description": "재시작 횟수를 추적하여 난이도 조절이나 통계 제공",
      "use_case": "시도 횟수 기록, 난이도 자동 조절, 성취도 시스템"
    },
    {
      "concept": "체크포인트 시스템",
      "description": "특정 지점부터 재시작할 수 있는 세이브 포인트",
      "use_case": "긴 게임의 중간 저장, 스테이지별 재시작"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "프로젝트 재시작 블록을 사용해서 간단한 리셋 기능을 구현할 수 있다",
      "example": "게임 오버 후 재시작, 리셋 버튼 구현"
    },
    {
      "level": "중급",
      "criteria": "조건에 따른 적절한 재시작 시점을 설계하고 구현할 수 있다",
      "example": "시간 제한 게임, 라운드 시스템, 사용자 확인 후 재시작"
    },
    {
      "level": "고급",
      "criteria": "재시작을 활용한 복잡한 게임 시스템과 상태 관리를 구현할 수 있다",
      "example": "체크포인트 시스템, 자동 복구 시스템, 데이터 영속성 관리"
    }
  ]
}
