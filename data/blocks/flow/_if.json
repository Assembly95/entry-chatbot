{
  "id": "_if",
  "category": "flow",
  "name": "만약 ~라면",
  "description": "조건이 참일 때만 내부의 블록들을 실행합니다. 프로그램의 흐름을 조건에 따라 분기시키는 기본적인 조건문 블록입니다.",

  "educational_context": {
    "learning_objectives": [
      "조건문의 개념과 필요성 이해",
      "참(True)과 거짓(False)의 논리적 판단 학습",
      "프로그램 흐름 제어의 기본 원리 습득",
      "조건부 실행을 통한 동적 프로그래밍 구현",
      "일상생활의 조건부 상황을 프로그래밍으로 표현하는 능력 개발"
    ],
    "key_concepts": [
      {
        "concept": "조건문(Conditional Statement)",
        "explanation": "주어진 조건이 참일 때만 특정 코드를 실행하는 프로그래밍 구조로, 프로그램이 상황에 따라 다르게 동작할 수 있게 만드는 핵심 개념"
      },
      {
        "concept": "불린 값(Boolean Value)",
        "explanation": "참(True) 또는 거짓(False) 두 가지 값만을 가질 수 있는 데이터 타입으로, 조건문의 판단 기준이 됨"
      },
      {
        "concept": "제어 흐름(Control Flow)",
        "explanation": "프로그램이 실행되는 순서를 조건에 따라 달리하여 원하는 동작을 구현하는 방법"
      },
      {
        "concept": "논리적 사고",
        "explanation": "'만약 A라면 B를 한다'는 형태의 조건부 사고로, 일상생활의 의사결정 과정과 동일한 구조"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": [
      "Entry 기본 인터페이스 사용법",
      "판단 블록의 이해",
      "시작 블록과 기본 동작 블록 사용 경험",
      "블록 조립 방법 숙지"
    ]
  },

  "usage_examples": [
    {
      "title": "기본 조건 확인",
      "description": "마우스 클릭 시에만 인사말 출력",
      "blocks": [
        "when_run_button_click",
        "repeat_while_true",
        "  if_condition(<마우스를 클릭했는가?>)",
        "    speak_something('안녕하세요!')"
      ],
      "explanation": "무한 반복으로 마우스 클릭을 계속 감지하여, 마우스를 클릭했을 때만 '안녕하세요!'라고 말합니다."
    },
    {
      "title": "숫자 비교 조건",
      "description": "변수값에 따른 조건부 실행",
      "blocks": [
        "when_run_button_click",
        "ask_and_wait('숫자를 입력하세요')",
        "set_variable('입력값', <답변>)",
        "if_condition((입력값) > (10))",
        "  speak_something('10보다 큰 수네요!')"
      ],
      "explanation": "사용자가 입력한 숫자가 10보다 클 때만 메시지를 출력합니다."
    },
    {
      "title": "캐릭터 위치 확인",
      "description": "오브젝트 충돌 감지",
      "blocks": [
        "when_run_button_click",
        "move_to_direction('오른쪽', 100)",
        "if_condition(<[벽]에 닿았는가?>)",
        "  speak_something('벽에 부딪혔어요!')",
        "  move_to_direction('왼쪽', 50)"
      ],
      "explanation": "캐릭터가 벽에 닿았을 때만 메시지를 출력하고 뒤로 물러납니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "조건문을 어떨 때 사용하는지 모르겠어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "일상생활에서 '만약 비가 오면 우산을 가져간다'처럼 조건에 따라 행동이 달라질 때 사용해요"
        },
        {
          "step": 2,
          "hint_type": "category",
          "content": "'흐름' 카테고리의 '만약 ~라면' 블록을 찾아보세요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "조건 자리에는 '판단' 카테고리의 블록들을 넣어서 참/거짓을 판단해요"
        }
      ]
    },
    {
      "situation": "조건이 맞아도 블록이 실행되지 않아요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "조건문 안에 들어가는 블록들이 '만약 ~라면' 블록 안쪽에 제대로 들어가 있는지 확인하세요"
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "조건 자리에 들어간 판단 블록이 실제로 참이 되는지 따로 확인해보세요"
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "조건문 전체가 다른 블록과 연결되어 있는지 확인해주세요"
        }
      ]
    },
    {
      "situation": "여러 조건을 동시에 확인하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "category",
          "content": "'판단' 카테고리에서 '그리고', '또는' 블록을 찾아보세요"
        },
        {
          "step": 2,
          "hint_type": "concept",
          "content": "'그리고'는 양쪽 조건이 참일 때, '또는'은 양쪽 조건 중 하나만 참이어도 실행돼요"
        },
        {
          "step": 3,
          "hint_type": "specific_block",
          "content": "복합 조건을 만들어서 '만약 ~라면' 블록의 조건 자리에 넣어보세요"
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "조건문 안의 블록들이 제대로 들여쓰기 되지 않음",
      "why_it_happens": "블록을 조건문 바깥쪽에 배치하여 조건과 무관하게 실행됨",
      "consequence": "조건에 상관없이 항상 실행되거나, 전혀 실행되지 않음",
      "solution": "블록을 '만약 ~라면' 안쪽 영역에 드래그해서 들여쓰기가 되도록 배치",
      "teaching_moment": "책의 목차처럼 블록 안에 실행할 블록을 넣는 방법으로 포함 관계를 나타내는 것과 같아요."
    },
    {
      "mistake": "항상 거짓이 되는 조건을 사용",
      "why_it_happens": "비교 연산자나 판단 블록의 작동 방식을 잘못 이해",
      "consequence": "조건문 내부의 코드가 전혀 실행되지 않음",
      "solution": "조건을 단순한 형태부터 시작해서 점차 복잡하게 만들기",
      "teaching_moment": "요리할 때 간을 보면서 조절하는 것처럼, 조건도 테스트하면서 맞춰가요."
    },
    {
      "mistake": "복잡한 조건을 한 번에 만들려고 시도",
      "why_it_happens": "논리 연산자의 우선순위나 조합을 제대로 이해하지 못함",
      "consequence": "예상과 다른 결과가 나오거나 오류 발생",
      "solution": "조건을 간단한 부분으로 나누어서 각각 테스트한 후 조합",
      "teaching_moment": "복잡한 문제는 작은 문제들로 나누어서 해결하는 것이 프로그래밍의 기본이에요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "조건문 블록 찾기",
      "instruction": "블록 팔레트에서 '흐름' 카테고리를 클릭하세요.",
      "visual_hint": "하늘색 아래로 갈라지는 나뭇가지 모양의 아이콘을 찾아보세요."
    },
    {
      "step": 2,
      "title": "만약 ~라면 블록 선택",
      "instruction": "'만약 ~라면' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "육각형 모양의 조건 자리가 있는 디귿자 형태의 블록이에요."
    },
    {
      "step": 3,
      "title": "조건 설정하기",
      "instruction": "육각형 모양의 조건 자리에 판단 블록을 드래그해서 넣으세요.",
      "visual_hint": "'판단' 카테고리의 블록들은 육각형 모양으로 되어 있어요."
    },
    {
      "step": 4,
      "title": "실행할 블록 배치",
      "instruction": "조건이 참일 때 실행하고 싶은 블록들을 조건 블록 안쪽에 배치하세요.",
      "visual_hint": "실행할 블록들을 조건 블록 안에 포함되도록 배치해야 해요."
    },
    {
      "step": 5,
      "title": "테스트 및 수정",
      "instruction": "프로그램을 실행해보고 조건이 제대로 작동하는지 확인하세요.",
      "visual_hint": "조건을 만족하는 상황과 그렇지 않은 상황 모두 테스트해보세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "if_else_condition",
      "relationship": "확장된 조건문",
      "explanation": "'만약 ~라면, 아니면' 블록으로 조건이 거짓일 때의 동작도 정의 가능"
    },
    {
      "block_id": "comparison_blocks",
      "relationship": "조건으로 사용",
      "explanation": "=, >, < 등의 비교 블록들이 조건 자리에 들어가서 판단 기준 제공"
    },
    {
      "block_id": "logical_operators",
      "relationship": "복합 조건 생성",
      "explanation": "'그리고', '또는', '~이 아니다' 블록으로 여러 조건을 조합"
    },
    {
      "block_id": "sensing_blocks",
      "relationship": "조건 판단 재료",
      "explanation": "마우스 클릭, 키 입력, 충돌 감지 등의 상황을 조건으로 활용"
    }
  ],

  "debugging_tips": [
    {
      "problem": "조건이 맞는데도 블록이 실행되지 않아요",
      "possible_causes": [
        "실행할 블록들이 조건문 바깥에 위치",
        "조건 블록 전체가 다른 블록과 연결되지 않음",
        "조건 자리가 비어있거나 잘못된 블록 사용"
      ],
      "solutions": [
        "실행할 블록들을 조건 블록 안쪽으로 드래그하여 들여쓰기 확인",
        "조건문이 시작 블록이나 다른 실행 블록과 연결되어 있는지 확인",
        "조건 자리에 판단 블록이 제대로 들어가 있는지 확인"
      ]
    },
    {
      "problem": "조건 블록이 항상 실행되거나 전혀 실행되지 않아요",
      "possible_causes": [
        "조건이 항상 참이거나 항상 거짓인 상태",
        "비교 연산자나 논리 연산자를 잘못 사용",
        "변수나 값이 예상과 다르게 설정됨"
      ],
      "solutions": [
        "조건을 간단한 형태로 바꿔서 테스트해보기",
        "변수 값이나 센서 상태를 별도로 확인해보기",
        "조건을 말로 표현해보고 블록과 일치하는지 확인하기"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "신호등 체계",
      "explanation": "빨간불이면 멈추고, 초록불이면 간다는 조건부 행동과 같습니다."
    },
    {
      "analogy": "온도 조절기",
      "explanation": "온도가 설정값보다 낮으면 히터를 켜는 것처럼 조건에 따라 장치가 동작합니다."
    },
    {
      "analogy": "출입문 보안 시스템",
      "explanation": "올바른 비밀번호를 입력했을 때만 문이 열리는 것과 같은 조건부 접근 제어입니다."
    },
    {
      "analogy": "게임의 규칙",
      "explanation": "특정 점수에 도달하면 다음 레벨로 넘어가는 것처럼 조건을 만족해야 다음 단계로 진행됩니다."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "중첩 조건 블록",
      "description": "조건 블록 안에 또 다른 조건 블록을 넣어서 더 복잡한 판단 구조 만들기",
      "use_case": "성적에 따른 등급 부여, 다단계 게임 진행 조건"
    },
    {
      "concept": "복합 조건 활용",
      "description": "'그리고', '또는' 블록을 사용해서 여러 조건을 동시에 확인하기",
      "use_case": "게임에서 특정 아이템을 가지고 있으면서 동시에 특정 위치에 있을 때만 실행되는 이벤트"
    },
    {
      "concept": "조건부 애니메이션",
      "description": "사용자 입력이나 상황에 따라 다른 애니메이션이나 효과 실행",
      "use_case": "캐릭터 상태에 따른 다른 행동, 시간대별 배경 변화"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "간단한 조건문을 사용해서 기본적인 조건부 동작을 구현할 수 있다",
      "example": "마우스 클릭 시에만 소리 재생하기, 특정 키가 눌렸을 때만 움직이기"
    },
    {
      "level": "중급",
      "criteria": "복합 조건과 중첩 조건문을 활용해서 복잡한 논리 구조를 만들 수 있다",
      "example": "여러 조건을 조합한 게임 규칙 구현, 상황에 따른 다른 반응 만들기"
    },
    {
      "level": "고급",
      "criteria": "조건문을 활용해서 인터랙티브하고 동적인 프로그램을 설계할 수 있다",
      "example": "사용자 선택에 따라 스토리가 달라지는 게임, 실시간 상황 판단 시스템"
    }
  ]
}
