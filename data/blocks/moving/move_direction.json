{
  "id": "move_direction",
  "category": "move",
  "name": "~만큼 움직이기",
  "description": "오브젝트의 이동 방향 화살표가 가리키는 방향으로 입력한 거리만큼 움직입니다. 입력한 거리가 음수이면 이동 방향의 반대 방향으로 움직여요.",

  "keywords": [
    "움직이기",
    "이동",
    "전진",
    "후진",
    "걷기",
    "앞으로",
    "뒤로",
    "방향 움직이기",
    "거리 이동",
    "픽셀 이동",
    "move",
    "step",
    "forward",
    "backward",
    "직진",
    "움직임",
    "이동 방향",
    "화살표 방향",
    "방향대로"
  ],

  "usage_context": {
    "when_to_use": [
      "오브젝트가 바라보는 방향으로 움직이게 하고 싶을 때",
      "캐릭터의 전진과 후진을 구현하고 싶을 때",
      "방향을 기준으로 한 상대적 움직임이 필요할 때",
      "게임 캐릭터나 차량의 움직임을 만들 때"
    ],
    "where_to_use": [
      "자동차 주행 시뮬레이션",
      "로봇이나 드론의 움직임 구현",
      "탑다운 뷰 게임의 캐릭터 이동",
      "터틀 그래픽스 같은 그림 그리기",
      "미로 찾기 게임",
      "동물이나 곤충의 움직임 애니메이션"
    ],
    "why_to_use": [
      "x, y 좌표 이동보다 직관적인 방향 기반 움직임",
      "회전과 조합하여 자연스러운 움직임 패턴 생성",
      "음수를 사용한 간단한 후진 구현",
      "실제 이동체의 움직임과 유사한 로직"
    ],
    "best_practices": [
      "화면 크기를 고려한 적절한 거리 값 사용 (10-50 권장)",
      "반복 블록 안에서는 작은 값(1-10) 사용하여 부드러운 움직임",
      "움직이기 전 방향 설정 블록으로 정확한 방향 지정",
      "벽에 부딪히면 튕기기 블록과 함께 사용하여 화면 이탈 방지"
    ]
  },

  "common_questions": [
    {
      "question": "움직이기 블록을 썼는데 원하는 방향으로 가지 않아요",
      "answer": "오브젝트가 현재 바라보는 방향을 확인해보세요. '~도 방향보기' 블록을 먼저 사용해서 원하는 방향을 설정한 후에 움직이기 블록을 사용하면 돼요. 0도는 위, 90도는 오른쪽, 180도는 아래, 270도는 왼쪽이에요.",
      "related_concepts": ["방향 설정", "rotate_absolute", "각도 시스템"]
    },
    {
      "question": "음수를 넣으면 어떻게 되나요?",
      "answer": "음수를 넣으면 현재 바라보는 방향의 반대로 움직여요. 예를 들어 -30을 넣으면 뒤로 30픽셀 후진하는 것과 같아요. 자동차가 후진하는 것처럼 방향은 그대로 두고 뒤로 갈 수 있어요.",
      "related_concepts": ["음수 활용", "후진", "반대 방향"]
    },
    {
      "question": "얼마나 움직이는 게 적당한가요?",
      "answer": "일반적으로 10-50 정도가 적당해요. 화면 크기가 보통 480x360이니까 너무 큰 값을 넣으면 화면 밖으로 나가버려요. 처음에는 10정도로 시작해서 테스트하면서 조절하는 게 좋아요.",
      "related_concepts": ["화면 크기", "픽셀 단위", "적절한 거리"]
    },
    {
      "question": "계속 움직이게 하려면 어떻게 하나요?",
      "answer": "무한 반복 블록 안에 움직이기 블록을 넣으면 계속 움직여요. 이때 작은 값(5-10)을 사용하면 부드럽게 움직이고, '~초 기다리기' 블록을 추가하면 속도를 조절할 수 있어요.",
      "related_concepts": ["반복 블록", "연속 움직임", "속도 조절"]
    },
    {
      "question": "x, y로 움직이기와 뭐가 다른가요?",
      "answer": "'x로 ~만큼 움직이기'는 항상 수평으로, 'y로 ~만큼 움직이기'는 항상 수직으로만 움직여요. 하지만 '~만큼 움직이기'는 오브젝트가 바라보는 방향으로 움직이니까 대각선이나 원하는 모든 방향으로 갈 수 있어요.",
      "related_concepts": ["좌표계 움직임", "방향성 움직임", "움직임 종류"]
    },
    {
      "question": "화면 밖으로 나가지 않게 하려면?",
      "answer": "'벽에 부딪히면 튕기기' 블록을 함께 사용하면 화면 가장자리에서 자동으로 튕겨요. 또는 조건 블록으로 x, y 좌표를 체크해서 화면 경계에 가까우면 방향을 바꾸도록 만들 수도 있어요.",
      "related_concepts": ["화면 경계", "벽 튕기기", "위치 제한"]
    },
    {
      "question": "원을 그리듯 움직이게 할 수 있나요?",
      "answer": "네! 반복 블록 안에서 조금씩 움직이고(예: 10픽셀) 방향을 조금씩 돌리면(예: 10도) 원형으로 움직여요. 36번 반복하면서 매번 10도씩 돌리면 완전한 원(360도)을 그릴 수 있어요.",
      "related_concepts": ["원형 움직임", "회전 조합", "패턴 움직임"]
    },
    {
      "question": "부드럽게 움직이게 하려면?",
      "answer": "큰 거리를 한 번에 움직이면 순간이동처럼 보여요. 대신 반복 블록으로 작은 거리(1-5픽셀)를 여러 번 움직이면 부드러운 애니메이션이 돼요.",
      "related_concepts": ["부드러운 움직임", "애니메이션", "반복 활용"]
    },
    {
      "question": "방향키로 조작하게 하려면?",
      "answer": "각 방향키에 대한 '키를 눌렀을 때' 이벤트 블록을 만들고, 각각에서 방향 설정(0도, 90도, 180도, 270도) 후 움직이기 블록을 사용하면 돼요.",
      "related_concepts": ["키보드 조작", "방향키", "게임 컨트롤"]
    },
    {
      "question": "마우스를 따라가게 하려면?",
      "answer": "'마우스 포인터 향하기' 블록으로 마우스 방향을 바라보게 한 후, '~만큼 움직이기' 블록을 사용하면 마우스를 따라가는 움직임을 만들 수 있어요.",
      "related_concepts": ["마우스 추적", "동적 방향", "인터랙티브 움직임"]
    }
  ],

  "educational_context": {
    "learning_objectives": [
      "방향과 거리 개념을 통한 좌표계 이해",
      "벡터의 기본 개념 학습 (방향과 크기)",
      "오브젝트의 방향 설정과 움직임 제어 능력 개발",
      "음수와 양수를 통한 반대 방향 움직임 이해",
      "게임과 애니메이션에서의 캐릭터 움직임 구현"
    ],
    "key_concepts": [
      {
        "concept": "방향성 움직임",
        "explanation": "오브젝트가 현재 바라보고 있는 방향으로 이동하는 개념으로, 실제 로봇이나 자동차가 앞으로 가는 것과 같은 원리"
      },
      {
        "concept": "상대적 좌표",
        "explanation": "절대 좌표가 아닌 현재 위치에서 상대적으로 얼마나 움직일지를 결정하는 방식"
      },
      {
        "concept": "벡터와 스칼라",
        "explanation": "방향(벡터)과 거리(스칼라)가 결합되어 실제 움직임을 만들어내는 수학적 개념"
      },
      {
        "concept": "음수의 활용",
        "explanation": "음수 값을 입력하면 반대 방향으로 이동한다는 개념으로, 후진의 개념을 이해할 수 있음"
      }
    ],
    "difficulty_level": "초급",
    "prerequisites": [
      "엔트리 기본 인터페이스 사용법",
      "오브젝트의 방향 개념 이해",
      "시작 블록과 기본 동작 블록 사용 경험",
      "숫자 블록 사용 경험"
    ]
  },

  "usage_examples": [
    {
      "title": "기본 전진 움직임",
      "description": "캐릭터가 바라보는 방향으로 앞으로 가기",
      "blocks": ["when_run_button_click", "move_direction(100)"],
      "explanation": "실행 버튼을 클릭하면 오브젝트가 현재 바라보는 방향으로 100픽셀만큼 움직입니다."
    },
    {
      "title": "키보드로 조작하는 캐릭터",
      "description": "방향키로 캐릭터 움직이기",
      "blocks": [
        "when_key_pressed('위쪽 화살표')",
        "rotate_absolute(0)",
        "move_direction(10)",
        "",
        "when_key_pressed('아래쪽 화살표')",
        "rotate_absolute(180)",
        "move_direction(10)",
        "",
        "when_key_pressed('오른쪽 화살표')",
        "rotate_absolute(90)",
        "move_direction(10)",
        "",
        "when_key_pressed('왼쪽 화살표')",
        "rotate_absolute(270)",
        "move_direction(10)"
      ],
      "explanation": "각 방향키를 누르면 해당 방향으로 향한 후 10픽셀씩 움직입니다. 게임의 캐릭터 조작과 같은 원리입니다."
    },
    {
      "title": "후진하는 캐릭터",
      "description": "음수를 사용한 반대 방향 움직임",
      "blocks": ["when_run_button_click", "rotate_absolute(90)", "move_direction(50)", "wait(1)", "move_direction(-30)"],
      "explanation": "오른쪽(90도)을 향한 후 50픽셀 전진하고, 1초 기다린 다음 30픽셀 후진합니다."
    },
    {
      "title": "원형으로 움직이는 패턴",
      "description": "방향을 조금씩 바꾸며 움직이기",
      "blocks": ["when_run_button_click", "repeat(36)", "  move_direction(10)", "  direction_relative(10)"],
      "explanation": "10픽셀 앞으로 가고 방향을 10도씩 돌리는 것을 36번 반복하여 원형으로 움직입니다."
    }
  ],

  "progressive_hints": [
    {
      "situation": "오브젝트가 원하는 방향으로 움직이지 않아요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "오브젝트가 현재 어느 방향을 바라보고 있는지 확인해보세요. 방향 화살표를 보면 알 수 있어요."
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "'움직임' 카테고리의 '~도 방향보기' 블록으로 먼저 방향을 설정해보세요."
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "0도는 위쪽, 90도는 오른쪽, 180도는 아래쪽, 270도는 왼쪽을 의미해요."
        }
      ]
    },
    {
      "situation": "움직임이 너무 작거나 커서 조절하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "입력하는 숫자가 움직이는 거리(픽셀)를 결정해요. 작은 숫자는 조금씩, 큰 숫자는 많이 움직여요."
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "보통 10-50 정도가 적당한 움직임을 만들어요. 1-5는 매우 세밀한 움직임용이에요."
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "반복문과 함께 사용하면 작은 숫자로도 부드러운 긴 움직임을 만들 수 있어요."
        }
      ]
    },
    {
      "situation": "오브젝트를 뒤로 움직이게 하고 싶어요",
      "steps": [
        {
          "step": 1,
          "hint_type": "concept",
          "content": "음수(-)를 사용하면 현재 방향의 반대로 움직일 수 있어요."
        },
        {
          "step": 2,
          "hint_type": "specific_block",
          "content": "예를 들어 -50을 입력하면 바라보는 방향의 반대로 50픽셀 움직여요."
        },
        {
          "step": 3,
          "hint_type": "category",
          "content": "마치 자동차가 후진하는 것처럼, 방향은 그대로 두고 뒤로 갈 수 있어요."
        }
      ]
    }
  ],

  "common_mistakes": [
    {
      "mistake": "오브젝트 방향을 설정하지 않고 움직임 블록만 사용",
      "why_it_happens": "오브젝트의 기본 방향을 확인하지 않고 움직임 블록을 사용",
      "consequence": "예상과 다른 방향으로 움직이거나 이상한 방향으로 이동",
      "solution": "움직임 전에 '~도 방향보기' 블록으로 방향을 먼저 설정하기",
      "teaching_moment": "자동차를 운전할 때도 어느 방향으로 가고 싶은지 먼저 정하고 가속페달을 밟는 것처럼, 방향을 먼저 정하고 움직여야 해요."
    },
    {
      "mistake": "너무 큰 숫자를 입력해서 오브젝트가 화면 밖으로 사라짐",
      "why_it_happens": "화면 크기와 입력 값의 관계를 고려하지 않음",
      "consequence": "오브젝트가 화면에서 보이지 않아 작품이 의도대로 동작하지 않음",
      "solution": "처음에는 10-50 정도의 작은 값으로 시작해서 점차 조정하기",
      "teaching_moment": "요리할 때 소금을 조금씩 넣어보며 간을 맞추는 것처럼, 움직임도 조금씩 테스트해보며 적당한 크기를 찾아가요."
    },
    {
      "mistake": "반복문 안에서 너무 큰 값을 사용해서 움직임이 부자연스러움",
      "why_it_happens": "반복문의 특성을 고려하지 않고 일반적인 움직임과 같은 값을 사용",
      "consequence": "오브젝트가 순간이동하는 것처럼 보이거나 부자연스러운 움직임",
      "solution": "반복문에서는 1-10 정도의 작은 값을 사용해서 부드러운 움직임 만들기",
      "teaching_moment": "애니메이션은 빠른 속도로 조금씩 움직이는 그림들이 모여서 만들어지는 것처럼, 반복문에서는 작은 움직임들이 모여서 자연스러운 동작을 만들어요."
    }
  ],

  "step_by_step_guide": [
    {
      "step": 1,
      "title": "움직임 블록 찾기",
      "instruction": "블록 팔레트에서 '움직임' 카테고리를 클릭하세요.",
      "visual_hint": "보라색으로 된 '움직임' 카테고리를 찾아보세요."
    },
    {
      "step": 2,
      "title": "~만큼 움직이기 블록 선택",
      "instruction": "'~만큼 움직이기' 블록을 찾아서 작업 영역으로 드래그하세요.",
      "visual_hint": "움직임 카테고리의 보라색 블록이에요."
    },
    {
      "step": 3,
      "title": "거리 값 입력",
      "instruction": "블록의 빈 칸에 움직이고 싶은 거리(픽셀)를 입력하세요.",
      "visual_hint": "기본값은 10이지만, 원하는 숫자로 바꿀 수 있어요."
    },
    {
      "step": 4,
      "title": "시작 블록과 연결",
      "instruction": "시작 블록 아래에 움직임 블록을 연결하세요.",
      "visual_hint": "블록들이 '착!' 소리와 함께 연결되는지 확인하세요."
    },
    {
      "step": 5,
      "title": "테스트 및 조정",
      "instruction": "실행 버튼을 눌러서 원하는 만큼 움직이는지 확인하고 필요하면 값을 조정하세요.",
      "visual_hint": "오브젝트가 화면 밖으로 나가지 않는 적당한 크기를 찾아보세요."
    }
  ],

  "related_blocks": [
    {
      "block_id": "rotate_absolute",
      "relationship": "방향 설정",
      "explanation": "움직이기 전에 어느 방향으로 향할지 정하는 블록. '~만큼 움직이기'와 함께 자주 사용됨"
    },
    {
      "block_id": "direction_relative",
      "relationship": "방향 조정",
      "explanation": "현재 방향에서 각도를 더하거나 빼서 방향을 바꾸는 블록. 회전하며 움직이는 패턴에 유용"
    },
    {
      "block_id": "repeat",
      "relationship": "반복적 움직임",
      "explanation": "반복문과 함께 사용하면 부드러운 연속 움직임이나 패턴 있는 움직임을 만들 수 있음"
    },
    {
      "block_id": "move_x",
      "relationship": "좌표계 움직임",
      "explanation": "방향 기반 움직임 대신 좌표 기반으로 수평(x축) 움직임을 만드는 대안 블록"
    },
    {
      "block_id": "move_y",
      "relationship": "좌표계 움직임",
      "explanation": "방향 기반 움직임 대신 좌표 기반으로 수직(y축) 움직임을 만드는 대안 블록"
    }
  ],

  "debugging_tips": [
    {
      "problem": "오브젝트가 예상과 다른 방향으로 움직여요",
      "possible_causes": [
        "오브젝트의 현재 방향이 예상과 다름",
        "방향 설정 블록을 사용하지 않음",
        "이전에 실행된 다른 블록이 방향을 바꿨음"
      ],
      "solutions": [
        "움직임 전에 '~도 방향보기' 블록으로 방향을 명확히 설정",
        "오브젝트의 방향 화살표를 확인하여 현재 방향 파악",
        "작품 시작 부분에서 초기 방향을 설정해두기"
      ]
    },
    {
      "problem": "오브젝트가 화면에서 사라져요",
      "possible_causes": ["입력한 움직임 거리가 너무 큼", "화면 경계를 고려하지 않음", "반복문으로 계속 같은 방향으로 움직임"],
      "solutions": [
        "더 작은 숫자(10-50)로 거리를 조정하기",
        "'벽에 부딪히면 튕기기' 블록을 함께 사용하기",
        "조건 블록으로 화면 경계를 체크하기"
      ]
    },
    {
      "problem": "움직임이 너무 느리거나 빨라요",
      "possible_causes": ["입력한 거리 값이 부적절함", "반복문의 속도와 거리의 조합 문제", "다른 속도 관련 블록이 영향을 줌"],
      "solutions": [
        "거리 값을 점진적으로 조정해보기(5, 10, 20, 50 등)",
        "반복문 사용 시에는 작은 값(1-10)으로 부드러운 움직임 만들기",
        "'~초 기다리기' 블록으로 움직임 사이에 간격 두기"
      ]
    }
  ],

  "real_world_connections": [
    {
      "analogy": "자동차 운전",
      "explanation": "운전대로 방향을 정하고 액셀러레이터로 속도를 조절하는 것처럼, 방향 블록과 움직임 블록을 조합해서 원하는 움직임을 만들어요."
    },
    {
      "analogy": "로봇 청소기",
      "explanation": "로봇 청소기가 방향을 정하고 일정 거리만큼 직진하는 것과 같은 원리로 동작해요."
    },
    {
      "analogy": "체스 게임의 말",
      "explanation": "체스에서 말들이 정해진 방향으로 정해진 칸 수만큼 움직이는 것처럼, 규칙적인 움직임을 프로그래밍할 수 있어요."
    },
    {
      "analogy": "GPS 네비게이션",
      "explanation": "네비게이션이 '직진 500m'라고 안내하는 것처럼, 방향과 거리를 조합해서 정확한 위치로 이동할 수 있어요."
    }
  ],

  "extensions_and_variations": [
    {
      "concept": "곡선 움직임 만들기",
      "description": "작은 거리로 움직이고 방향을 조금씩 바꾸는 것을 반복해서 곡선 경로 만들기",
      "use_case": "달팽이 모양, 원형, 웨이브 모양 등의 부드러운 곡선 애니메이션"
    },
    {
      "concept": "가변 속도 움직임",
      "description": "변수를 사용해서 움직임 거리를 동적으로 바꾸어 가속도나 감속 효과 만들기",
      "use_case": "점점 빨라지거나 느려지는 자동차, 중력의 영향을 받는 물체"
    },
    {
      "concept": "충돌 감지와 움직임",
      "description": "다른 오브젝트나 벽과의 충돌을 감지해서 움직임을 제어하기",
      "use_case": "미로 찾기 게임, 핀볼 게임, 충돌 회피 시뮬레이션"
    },
    {
      "concept": "사용자 입력 기반 움직임",
      "description": "키보드나 마우스 입력에 따라 움직임의 방향과 거리를 실시간으로 조절",
      "use_case": "플레이어 조작 캐릭터, 인터랙티브 아트, 그림 그리기 도구"
    }
  ],

  "assessment_criteria": [
    {
      "level": "기초",
      "criteria": "기본적인 직선 움직임을 구현하고 방향과 거리의 관계를 이해할 수 있다",
      "example": "시작 버튼을 누르면 오브젝트가 정해진 방향으로 정해진 거리만큼 움직이는 프로그램 만들기"
    },
    {
      "level": "중급",
      "criteria": "키보드 입력이나 조건문과 함께 사용해서 동적인 움직임을 구현할 수 있다",
      "example": "방향키로 캐릭터를 조작하거나, 벽에 부딪히면 방향을 바꾸는 프로그램 만들기"
    },
    {
      "level": "고급",
      "criteria": "복잡한 패턴의 움직임이나 물리적 효과를 시뮬레이션할 수 있다",
      "example": "중력, 마찰력, 반발력 등을 고려한 현실적인 물리 시뮬레이션이나 복잡한 게임 메커니즘 구현"
    }
  ]
}
